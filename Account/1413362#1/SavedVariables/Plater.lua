
PlaterDB = {
["captured_spells"] = {
[209413] = {
["isChanneled"] = false,
["source"] = "Guardian Construct",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 104270,
},
[209477] = {
["isChanneled"] = false,
["source"] = "Mana Wyrm",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 105703,
},
[212773] = {
["isChanneled"] = false,
["source"] = "Duskwatch Reinforcement",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 107073,
},
[209033] = {
["isChanneled"] = false,
["source"] = "Duskwatch Guard",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 104246,
},
[225101] = {
["type"] = "BUFF",
["source"] = "Guardian Construct",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 104270,
},
[1247901] = {
["type"] = "DEBUFF",
["source"] = "Manifested Timeways",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 248958,
},
[209512] = {
["type"] = "DEBUFF",
["source"] = "Guardian Construct",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 104270,
},
[225100] = {
["isChanneled"] = false,
["source"] = "Guardian Construct",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 104270,
},
[208876] = {
["type"] = "DEBUFF",
["source"] = "Jessa Weaver",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 105408,
},
[1240778] = {
["type"] = "BUFF",
["source"] = "Great Sea Whale Shark",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 111389,
},
[209036] = {
["isChanneled"] = false,
["source"] = "Duskwatch Sentry",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 104251,
},
[209516] = {
["isChanneled"] = false,
["source"] = "Mana Saber",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 105699,
},
[79849] = {
["isChanneled"] = false,
["source"] = "Kirin Tor Guardian",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 104091,
},
[61353] = {
["isChanneled"] = false,
["source"] = "Dagna Flintlock",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 96779,
},
[209485] = {
["isChanneled"] = false,
["source"] = "Arcane Manifestation",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 105704,
},
[225678] = {
["type"] = "BUFF",
["source"] = "Nightborne Wretch",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 109409,
},
[1241368] = {
["type"] = "BUFF",
["source"] = "Charged Knifefish",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 111376,
},
[209713] = {
["type"] = "BUFF",
["source"] = "Imacu'tya",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 104275,
},
[1240379] = {
["type"] = "BUFF",
["source"] = "Charged Knifefish",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 111376,
},
[1247757] = {
["isChanneled"] = false,
["source"] = "Eternus",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 248954,
},
[1247760] = {
["type"] = "BUFF",
["source"] = "Manifested Timeways",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 248958,
},
[1247764] = {
["isChanneled"] = false,
["source"] = "Manifested Timeways",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 248958,
},
[209495] = {
["isChanneled"] = false,
["source"] = "Guardian Construct",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 104270,
},
[209719] = {
["type"] = "BUFF",
["source"] = "Baalgar the Watchful",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 104274,
},
[210261] = {
["isChanneled"] = false,
["source"] = "Duskwatch Sentry",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 104251,
},
[48168] = {
["type"] = "BUFF",
["source"] = "Matron Ossela",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 96955,
},
[209722] = {
["type"] = "BUFF",
["source"] = "Talixae Flamewreath",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 104217,
},
[209404] = {
["isChanneled"] = false,
["source"] = "Duskwatch Arcanist",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 104247,
},
[203761] = {
["type"] = "BUFF",
["source"] = "Duskwatch Scryer",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 116360,
},
[209027] = {
["isChanneled"] = false,
["source"] = "Duskwatch Guard",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 104246,
},
[209410] = {
["isChanneled"] = false,
["source"] = "Duskwatch Arcanist",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 104247,
},
[209858] = {
["type"] = "DEBUFF",
["source"] = "Mana Wyrm",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 105703,
},
[207850] = {
["type"] = "BUFF",
["source"] = "Jazshariu",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 104273,
},
},
["profileKeys"] = {
["Zedek - Ravencrest"] = "Default",
["Brewdda - Ravencrest"] = "Default",
["Wanpan - Ravencrest"] = "Default",
["Cretino - Ravencrest"] = "Quazii",
},
["profiles"] = {
["Quazii S3 (5 Aug)"] = {
["plater_resources_show_depleted"] = false,
["target_shady_combat_only"] = false,
["aura_sort"] = true,
["blizzard_nameplate_large_font"] = "Quazii",
["saved_cvars_last_change"] = {
["ShowClassColorInNameplate"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateOverlapV"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["ShowNamePlateLoseAggroFlash"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowEnemyMinus"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["NamePlateClassificationScale"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowFriendlyTotems"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplatePersonalHideDelaySeconds"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowFriendlyPets"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplatePersonalShowInCombat"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplatePersonalShowWithTarget"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateMinAlpha"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateResourceOnTarget"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowAll"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateMaxDistance"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowFriendlyMinions"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateSelfScale"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateTargetBehindMaxDistance"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["SoftTargetInteract"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowEnemies"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["NamePlateVerticalScale"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateSelectedAlpha"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowSelf"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowPersonalCooldowns"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateSelfTopInset"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateMotionSpeed"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateGlobalScale"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowEnemyMinions"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowFriendlyNPCs"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateSelectedScale"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateMinAlphaDistance"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateMotion"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateLargeTopInset"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateMinScale"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowFriends"] = "[C]: ?\n[C]: in function 'SetCVar'\n[Interface/AddOns/Blizzard_SharedXMLBase/CvarUtil.lua]:76: in function 'SetValue'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua]:264: in function 'SetValueDerived'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua]:110: in function 'ApplyValue'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua]:86: in function 'SetValue'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Settings.lua]:224: in function 'SetValue'\n[FRIENDNAMEPLATES]:3: in function <[string \"FRIENDNAMEPLATES\"]:1>\n",
["nameplateOtherTopInset"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateTargetRadialPosition"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateSelfBottomInset"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowOnlyNames"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowFriendlyGuardians"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateSelfAlpha"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["NamePlateHorizontalScale"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateOccludedAlphaMult"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplatePersonalShowAlways"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowFriendlyBuffs"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
},
["url"] = "https://wago.io/kvgdjO6_L/3",
["hover_highlight_alpha"] = 0.29999998211861,
["cast_statusbar_fadein_time"] = 0.02081192471087,
["indicator_raidmark_scale"] = 0.6499999761581421,
["cast_statusbar_spark_alpha"] = 0.7199999690055847,
["aura2_y_offset"] = 0,
["castbar_framelevel"] = 0,
["buffs_on_aura2"] = true,
["plate_config"] = {
["player"] = {
["actorname_text_font"] = "Accidental Presidency",
["percent_text_font"] = "Quazii",
["spellpercent_text_font"] = "Quazii",
["power_percent_text_color"] = {
1,
1,
1,
},
["big_actortitle_text_font"] = "Accidental Presidency",
["click_through"] = true,
["power_percent_text_font"] = "Quazii",
["power_percent_text_size"] = 10,
["big_actorname_text_font"] = "Accidental Presidency",
["spellname_text_font"] = "Quazii",
["level_text_font"] = "Accidental Presidency",
["power_percent_text_enabled"] = false,
},
["friendlyplayer"] = {
["big_actorname_text_size"] = 10,
["spellpercent_text_font"] = "Quazii",
["actorname_use_class_color"] = true,
["big_actortitle_text_font"] = "Accidental Presidency",
["cast"] = {
120,
1,
},
["percent_text_ooc"] = true,
["big_actortitle_text_size"] = 10,
["spellpercent_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["level_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["big_actortitle_text_shadow_color_offset"] = {
1,
-1,
},
["cast_incombat"] = {
120,
1,
},
["big_actorname_text_shadow_color"] = {
0,
0,
0,
1,
},
["spellpercent_text_outline"] = "NONE",
["big_actortitle_text_shadow_color"] = {
0,
0,
0,
1,
},
["percent_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["level_text_font"] = "Quazii",
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["big_actorname_text_outline"] = "OUTLINE",
["big_actorname_text_shadow_color_offset"] = {
1,
-1,
},
["quest_color_enemy"] = {
1,
0.369,
0,
},
["quest_color_neutral"] = {
1,
0.65,
0,
},
["mana_incombat"] = {
nil,
4,
},
["percent_text_enabled"] = true,
["big_actorname_text_font"] = "Accidental Presidency",
["actorname_use_guild_color"] = false,
["all_names"] = true,
["power_percent_text_font"] = "Accidental Presidency",
["actorname_use_friends_color"] = false,
["actorname_text_anchor"] = {
["y"] = -3,
["x"] = -1,
["side"] = 1,
},
["percent_show_health"] = true,
["level_text_alpha"] = 0.2999999821186066,
["spellpercent_text_enabled"] = true,
["big_actortitle_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 9,
["only_damaged"] = false,
["buff_frame_y_offset"] = 0,
["percent_text_outline"] = "NONE",
["quest_enabled"] = true,
["actorname_text_font"] = "Quazii",
["percent_text_font"] = "Quazii",
["percent_text_size"] = 10,
["health_incombat"] = {
120,
14,
},
["health"] = {
120,
14,
},
["mana"] = {
nil,
4,
},
["spellname_text_font"] = "Quazii",
["spellname_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["only_thename"] = true,
["level_text_enabled"] = true,
},
["friendlynpc"] = {
["quest_color_enemy"] = {
1,
0.369,
0,
},
["spellpercent_text_font"] = "Quazii",
["big_actortitle_text_font"] = "Quazii",
["cast"] = {
120,
1,
},
["percent_text_ooc"] = true,
["big_actortitle_text_size"] = 10,
["spellpercent_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["enabled"] = false,
["level_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["cast_incombat"] = {
nil,
1,
},
["spellpercent_text_outline"] = "NONE",
["percent_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["level_text_font"] = "Quazii",
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["only_names"] = false,
["quest_color_neutral"] = {
1,
0.65,
0,
},
["percent_text_enabled"] = true,
["actorname_text_outline"] = "OUTLINE",
["actorname_text_anchor"] = {
["y"] = -3,
["x"] = -1,
["side"] = 1,
},
["spellpercent_text_enabled"] = true,
["actorname_text_spacing"] = 9,
["percent_text_font"] = "Quazii",
["spellname_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["level_text_alpha"] = 0.2999999821186066,
["percent_text_outline"] = "NONE",
["percent_text_size"] = 10,
["percent_show_health"] = true,
["big_actorname_text_font"] = "Quazii",
["health_incombat"] = {
100,
14,
},
["health"] = {
100,
14,
},
["actorname_text_font"] = "Quazii",
["big_actorname_text_size"] = 10,
["power_percent_text_font"] = "Accidental Presidency",
["spellname_text_font"] = "Quazii",
["level_text_enabled"] = true,
},
["global_health_height"] = 14,
["global_health_width"] = 120,
["enemyplayer"] = {
["quest_color_enemy"] = {
1,
0.369,
0,
1,
},
["spellpercent_text_font"] = "Quazii",
["big_actortitle_text_font"] = "Accidental Presidency",
["cast"] = {
120,
8,
},
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["percent_text_show_decimals"] = false,
["cast_incombat"] = {
nil,
8,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_outline"] = "NONE",
["percent_text_anchor"] = {
["y"] = 4.649993896484375,
["side"] = 5,
},
["level_text_font"] = "Quazii",
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["quest_color_neutral"] = {
1,
0.65,
0,
1,
},
["mana_incombat"] = {
120,
1,
},
["big_actorname_text_font"] = "Accidental Presidency",
["level_text_anchor"] = {
["y"] = 100,
["x"] = 1,
["side"] = 5,
},
["all_names"] = true,
["mana"] = {
120,
1,
},
["big_actorname_text_size"] = 10,
["actorname_text_anchor"] = {
["y"] = -0.4000015258789063,
["x"] = -1,
["side"] = 1,
},
["actorname_text_outline"] = "OUTLINE",
["percent_show_health"] = false,
["actorname_text_font"] = "Quazii",
["percent_text_size"] = 10,
["actorname_text_spacing"] = 9,
["percent_text_font"] = "Quazii",
["power_percent_text_font"] = "Accidental Presidency",
["percent_show_percent"] = false,
["quest_enabled"] = true,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_alpha"] = 0.2999999821186066,
["quest_color_enabled"] = true,
["health_incombat"] = {
nil,
14,
},
["health"] = {
120,
14,
},
["big_actortitle_text_size"] = 10,
["actorname_text_size"] = 10,
["spellname_text_font"] = "Quazii",
["spellname_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["level_text_enabled"] = false,
},
["enemynpc"] = {
["spellpercent_text_font"] = "Quazii",
["level_text_size"] = 10,
["big_actortitle_text_font"] = "Quazii",
["cast"] = {
120,
8,
},
["spellpercent_text_size"] = 10,
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_anchor"] = {
["y"] = -0.8000030517578125,
["x"] = 3.899993896484375,
["side"] = 5,
},
["percent_text_show_decimals"] = false,
["cast_incombat"] = {
nil,
8,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["y"] = 0.09999847412109375,
["x"] = -0.8000030517578125,
["side"] = 3,
},
["percent_text_anchor"] = {
["y"] = 12.29999542236328,
["x"] = 0.5999984741210938,
["side"] = 5,
},
["level_text_font"] = "Quazii",
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["actorname_text_size"] = 10,
["big_actorname_text_font"] = "Quazii",
["actorname_text_outline"] = "OUTLINE",
["actorname_text_anchor"] = {
["y"] = 12.29999542236328,
["x"] = 1.599998474121094,
["side"] = 3,
},
["percent_text_size"] = 10,
["actorname_text_spacing"] = 9,
["percent_text_font"] = "Quazii",
["level_text_anchor"] = {
["y"] = 100,
["x"] = 1,
["side"] = 5,
},
["spellname_text_font"] = "Quazii",
["percent_show_health"] = false,
["spellname_text_size"] = 10,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
nil,
14,
},
["health"] = {
120,
14,
},
["power_percent_text_font"] = "Accidental Presidency",
["level_text_alpha"] = 0.2999999821186066,
["actorname_text_font"] = "Quazii",
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_enabled"] = false,
},
},
["health_selection_overlay"] = "Quazii",
["aura_y_offset"] = 2,
["use_ui_parent"] = true,
["expansion_triggerwipe"] = {
[9] = true,
[10] = true,
},
["cast_statusbar_color_nointerrupt"] = {
0.49411764705882,
0.49803921568628,
0.50196078431373,
0.96000000089407,
},
["bossmod_aura_width"] = 32,
["bossmod_support_bars_enabled"] = false,
["border_thickness"] = 1.5,
["plater_resources_grow_direction"] = "center",
["resources_settings"] = {
["chr"] = {
["Player-3725-0C1533F1"] = "ComboPoints",
["Player-5764-000264AF"] = "ComboPoints",
["Player-3725-0C1632F3"] = "HolyPower",
["Player-4609-0014BD91"] = "SoulShards",
["Player-4609-0014B9A9"] = "ArcaneCharges",
["Player-11-0E6B493E"] = "ComboPoints",
["Player-5764-000166DE"] = "HolyPower",
["Player-3725-0C16E871"] = "HolyPower",
["Player-3725-0AA8E1EF"] = "Runes",
["Player-4184-00C4D942"] = "SoulShards",
["Player-4184-00949207"] = "HolyPower",
["Player-5764-0002671B"] = "HolyPower",
["Player-3725-0A9FE377"] = "Chi",
["Player-11-0E532B0D"] = "Chi",
["Player-11-0E93F38F"] = "HolyPower",
["Player-5765-003F0A0E"] = "Chi",
["Player-4184-009493C8"] = "Runes",
["Player-11-0E532B17"] = "ComboPoints",
["Player-4184-00949549"] = "ComboPoints",
["Player-4184-003D46E0"] = "Chi",
["Player-1329-0625A67D"] = "ComboPoints",
["Player-4609-0014B1DA"] = "ComboPoints",
["Player-5765-003F0A3C"] = "HolyPower",
["Player-4609-0014C179"] = "HolyPower",
["Player-3725-0C194479"] = "Essence",
["Player-11-0E532B60"] = "Runes",
["Player-5764-000944AE"] = "Chi",
["Player-5765-003F0A23"] = "ComboPoints",
["Player-4184-00948CDA"] = "Chi",
["Player-11-0E532B15"] = "HolyPower",
["Player-3296-009336A2"] = "HolyPower",
["Player-4184-00C5DED9"] = "ComboPoints",
["Player-4609-0014B1D9"] = "Essence",
["Player-5765-003F0A27"] = "Runes",
},
},
["health_animation_time_dilatation"] = 2.869999885559082,
["npc_cache"] = {
[134139] = {
"Shrine Templar",
"Shrine of the Storm",
},
[196798] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
},
[216619] = {
"Orator Krix'vizk",
"City of Threads",
"enUS",
},
[231197] = {
"Bubbles",
"Operation: Floodgate",
"enUS",
},
[231325] = {
"Darkfuse Jumpstarter",
"Operation: Floodgate",
"enUS",
},
[196671] = {
"Arcane Ravager",
"Algeth'ar Academy",
"enUS",
},
[180431] = {
"Focused Ritualist",
"Tazavesh, the Veiled Market",
"enUS",
},
[216364] = {
"Blood Overseer",
"Ara-Kara, City of Echoes",
"enUS",
},
[195265] = {
"Stormcaller Arynga",
"The Nokhud Offensive",
"enUS",
},
[180432] = {
"Devoted Accomplice",
"Tazavesh, the Veiled Market",
"enUS",
},
[173655] = {
"Mistveil Matriarch",
"Mists of Tirna Scithe",
"enUS",
},
[173016] = {
"Corpse Collector",
"The Necrotic Wake",
"enUS",
},
[201788] = {
"Dazhak",
"Dawn of the Infinite",
"enUS",
},
[229537] = {
"Void Emissary",
"The Stonevault",
"enUS",
},
[231839] = {
"Scrapmaster",
"Liberation of Undermine",
"enUS",
},
[120651] = {
"Explosives",
"Court of Stars",
},
[212786] = {
"Cursed Stormrider",
"The Rookery",
"enUS",
},
[213937] = {
"Rasha'nan",
"The Dawnbreaker",
"enUS",
},
[197697] = {
"Flamegullet",
"Ruby Life Pools",
"enUS",
},
[40633] = {
"Naz'jar Honor Guard",
"Throne of the Tides",
"enUS",
},
[135167] = {
"Spectral Berserker",
"Kings' Rest",
},
[214066] = {
"Cursedforge Stoneshaper",
"The Stonevault",
"enUS",
},
[131587] = {
"Bewitched Captain",
"Waycrest Manor",
},
[126918] = {
"Irontide Crackshot",
"Freehold",
},
[196548] = {
"Ancient Branch",
"Algeth'ar Academy",
"enUS",
},
[135552] = {
"Deathtouched Slaver",
"Waycrest Manor",
"enUS",
},
[218671] = {
"Venture Co. Pyromaniac",
"Cinderbrew Meadery",
"enUS",
},
[236190] = {
"Frenzied Mite",
"Eco-Dome Al'dani",
"enUS",
},
[186191] = {
"Decay Speaker",
"Brackenhide Hollow",
"enUS",
},
[206140] = {
"Coalesced Time",
"Dawn of the Infinite",
"enUS",
},
[98275] = {
"Risen Archer",
"Black Rook Hold",
"enUS",
},
[221102] = {
"Elder Shadeweaver",
"City of Threads",
"enUS",
},
[127111] = {
"Irontide Oarsman",
"Freehold",
},
[168418] = {
"Forsworn Inquisitor",
"Spires of Ascension",
},
[213942] = {
"Sludge",
"Throne of the Tides",
"enUS",
},
[199748] = {
"Timeline Marauder",
"Dawn of the Infinite",
"enUS",
},
[165222] = {
"Zolramus Bonemender",
"The Necrotic Wake",
"enUS",
},
[199749] = {
"Timestream Anomaly",
"Dawn of the Infinite",
"enUS",
},
[168420] = {
"Forsworn Champion",
"Spires of Ascension",
},
[212793] = {
"Void Ascendant",
"The Rookery",
"enUS",
},
[134150] = {
"Runecarver Sorn",
"Shrine of the Storm",
},
[187602] = {
"Qalashi Scaleripper",
"10.0 Dragon Isles",
},
[184022] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
"enUS",
},
[128967] = {
"Ashvane Sniper",
"Siege of Boralus",
"enUS",
},
[210109] = {
"Earth Infused Golem",
"The Stonevault",
"enUS",
},
[212411] = {
"Torchsnarl",
"Darkflame Cleft",
"enUS",
},
[199368] = {
"Hardened Crystal",
"The Azure Vault",
"enUS",
},
[134024] = {
"Devouring Maggot",
"Waycrest Manor",
"enUS",
},
[178141] = {
"Murkbrine Scalebinder",
"Tazavesh, the Veiled Market",
"enUS",
},
[212412] = {
"Sootsnout",
"Darkflame Cleft",
"enUS",
},
[83892] = {
"Life Warden Gola",
"The Everbloom",
},
[178142] = {
"Murkbrine Fishmancer",
"Tazavesh, the Veiled Market",
"enUS",
},
[98406] = {
"Embershard Scorpion",
"Neltharion's Lair",
},
[137478] = {
"Queen Wasi",
"Kings' Rest",
},
[208193] = {
"Paladin of the Silver Hand",
"Dawn of the Infinite",
"enUS",
},
[196045] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
"enUS",
},
[135049] = {
"Dreadwing Raven",
"Waycrest Manor",
"enUS",
},
[211263] = {
"Deathscreamer Iken'tak",
"The Dawnbreaker",
"enUS",
},
[164461] = {
"Sathel the Accursed",
"Theater of Pain",
"enUS",
},
[83893] = {
"Earthshaper Telu",
"The Everbloom",
},
[128969] = {
"Ashvane Commander",
"Siege of Boralus",
"enUS",
},
[99366] = {
"Taintheart Summoner",
"Darkheart Thicket",
"enUS",
},
[220599] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[150396] = {
"Aerial Unit R-21/X",
"Operation: Mechagon",
"enUS",
},
[207940] = {
"Prioress Murrpray",
"Priory of the Sacred Flame",
"enUS",
},
[223541] = {
"Stolen Loader",
"Mycomancer Cavern",
"enUS",
},
[217531] = {
"Ixin",
"Ara-Kara, City of Echoes",
"enUS",
},
[167532] = {
"Heavin the Breaker",
"Theater of Pain",
"enUS",
},
[98280] = {
"Risen Arcanist",
"Black Rook Hold",
"enUS",
},
[225204] = {
"Zekvir",
"Zekvir's Lair",
"enUS",
},
[205384] = {
"Infinite Chronoweaver",
"Dawn of the Infinite",
"enUS",
},
[212673] = {
"Naz'jar Ravager",
"Throne of the Tides",
"enUS",
},
[136076] = {
"Agitated Nimbus",
"Temple of Sethraliss",
},
[134158] = {
"Shadow-Borne Champion",
"Kings' Rest",
},
[172265] = {
"Remnant of Fury",
"Sanguine Depths",
},
[217533] = {
"Atik",
"Ara-Kara, City of Echoes",
"enUS",
},
[220730] = {
"Royal Venomshell",
"City of Threads",
"enUS",
},
[165872] = {
"Flesh Crafter",
"The Necrotic Wake",
"enUS",
},
[214209] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
"enUS",
},
[129227] = {
"Azerokk",
"The MOTHERLODE!!",
"enUS",
},
[131858] = {
"Thornguard",
"Waycrest Manor",
},
[129547] = {
"Blacktooth Knuckleduster",
"Freehold",
},
[45912] = {
"Wild Vortex",
"The Vortex Pinnacle",
},
[127757] = {
"Reanimated Honor Guard",
"Atal'Dazar",
},
[208456] = {
"Shuffling Horror",
"Darkflame Cleft",
"enUS",
},
[189531] = {
"Decayed Elder",
"Brackenhide Hollow",
"enUS",
},
[137486] = {
"Queen Patlaa",
"Kings' Rest",
},
[219454] = {
"Crazed Abomination",
"The Underkeep",
"enUS",
},
[137103] = {
"Blood Visage",
"The Underrot",
},
[207946] = {
"Captain Dailcry",
"Priory of the Sacred Flame",
"enUS",
},
[162039] = {
"Wicked Oppressor",
"Sanguine Depths",
},
[75713] = {
"Shadowmoon Bone-Mender",
"Shadowmoon Burial Grounds",
},
[138255] = {
"Ashvane Spotter",
"Siege of Boralus",
"enUS",
},
[162040] = {
"Grand Overseer",
"Sanguine Depths",
},
[195927] = {
"Soulharvester Galtmaa",
"The Nokhud Offensive",
"enUS",
},
[181861] = {
"Magmatusk",
"Neltharus",
"enUS",
},
[195928] = {
"Soulharvester Duuren",
"The Nokhud Offensive",
"enUS",
},
[97197] = {
"Valarjar Purifier",
"Halls of Valor",
},
[126928] = {
"Irontide Corsair",
"Freehold",
},
[203857] = {
"Horde Warlock",
"Dawn of the Infinite",
"enUS",
},
[195929] = {
"Soulharvester Tumen",
"The Nokhud Offensive",
"enUS",
},
[221760] = {
"Risen Mage",
"Priory of the Sacred Flame",
"enUS",
},
[131864] = {
"Gorak Tul",
"Waycrest Manor",
"enUS",
},
[231223] = {
"Disturbed Kelp",
"Operation: Floodgate",
"enUS",
},
[186339] = {
"Teera",
"The Nokhud Offensive",
"enUS",
},
[223423] = {
"Careless Hopgoblin",
"Cinderbrew Meadery",
"enUS",
},
[195930] = {
"Soulharvester Mandakh",
"The Nokhud Offensive",
"enUS",
},
[104295] = {
"Blazing Imp",
"Court of Stars",
},
[193373] = {
"Nokhud Thunderfist",
"The Nokhud Offensive",
"enUS",
},
[184422] = {
"Emberon",
"Uldaman: Legacy of Tyr",
"enUS",
},
[228539] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[164218] = {
"Lord Chamberlain",
"Halls of Atonement",
"enUS",
},
[133912] = {
"Bloodsworn Defiler",
"The Underrot",
},
[136214] = {
"Windspeaker Heldis",
"Shrine of the Storm",
},
[136470] = {
"Refreshment Vendor",
"The MOTHERLODE!!",
"enUS",
},
[90997] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[234935] = {
"Soul-Scribe",
"Eco-Dome Al'dani",
"enUS",
},
[216649] = {
"Vx",
"City of Threads",
"enUS",
},
[173044] = {
"Stitching Assistant",
"The Necrotic Wake",
"enUS",
},
[40320] = {
"Valiona",
"Grim Batol",
"enUS",
},
[214348] = {
"Undersea Abomination",
"Tak-Rethan Abyss",
"enUS",
},
[90998] = {
"Blightshard Shaper",
"Neltharion's Lair",
},
[224962] = {
"Cursedforge Mender",
"The Stonevault",
"enUS",
},
[168058] = {
"Infused Quill-feather",
"Sanguine Depths",
},
[105704] = {
"Arcane Manifestation",
"Court of Stars",
},
[127315] = {
"Reanimation Totem",
"Atal'Dazar",
},
[129553] = {
"Dinomancer Kish'o",
"Atal'Dazar",
"enUS",
},
[174197] = {
"Battlefield Ritualist",
"Theater of Pain",
"enUS",
},
[214350] = {
"Turned Speaker",
"The Stonevault",
"enUS",
},
[168443] = {
"Zolramus Necromancer",
"The Necrotic Wake",
},
[84989] = {
"Infested Icecaller",
"The Everbloom",
},
[196576] = {
"Spellbound Scepter",
"Algeth'ar Academy",
"enUS",
},
[180336] = {
"Cartel Wiseguy",
"Tazavesh, the Veiled Market",
"enUS",
},
[170490] = {
"Atal'ai High Priest",
"De Other Side",
},
[168572] = {
"Fungi Stormer",
"Plaguefall",
},
[134174] = {
"Shadow-Borne Witch Doctor",
"Kings' Rest",
},
[225605] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[91000] = {
"Vileshard Hulk",
"Neltharion's Lair",
},
[84990] = {
"Addled Arcanomancer",
"The Everbloom",
},
[81985] = {
"Everbloom Cultivator",
"The Everbloom",
},
[122969] = {
"Zanchuli Witch-Doctor",
"Atal'Dazar",
},
[100527] = {
"Dreadfire Imp",
"Darkheart Thicket",
"enUS",
},
[191847] = {
"Nokhud Plainstomper",
"The Nokhud Offensive",
"enUS",
},
[163459] = {
"Forsworn Mender",
"Spires of Ascension",
},
[178165] = {
"Coastwalker Goliath",
"Tazavesh, the Veiled Market",
"enUS",
},
[162309] = {
"Kul'tharok",
"Theater of Pain",
"enUS",
},
[104300] = {
"Shadow Mistress",
"Court of Stars",
},
[171772] = {
"Mistveil Defender",
"Mists of Tirna Scithe",
"enUS",
},
[131492] = {
"Devout Blood Priest",
"The Underrot",
},
[76104] = {
"Monstrous Corpse Spider",
"Shadowmoon Burial Grounds",
},
[135329] = {
"Matron Bryndle",
"Waycrest Manor",
},
[210264] = {
"Bee Wrangler",
"Cinderbrew Meadery",
"enUS",
},
[219983] = {
"Eye of the Queen",
"City of Threads",
"enUS",
},
[136353] = {
"Colossal Tentacle",
"Shrine of the Storm",
},
[123227] = {
"Keystone Vendor",
"Kalimdor",
},
[219984] = {
"Xeph'itik",
"City of Threads",
"enUS",
},
[228424] = {
"Darkfuse Mechadrone",
"Operation: Floodgate",
"enUS",
},
[162057] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[211289] = {
"Taener Duelmal",
"Priory of the Sacred Flame",
"enUS",
},
[207453] = {
"Fungal Rotspreader",
"Mycomancer Cavern",
"enUS",
},
[186226] = {
"Fetid Rotsinger",
"Brackenhide Hollow",
"enUS",
},
[135204] = {
"Spectral Hex Priest",
"Kings' Rest",
},
[122972] = {
"Dazar'ai Augur",
"Atal'Dazar",
},
[207198] = {
"Cursed Thunderer",
"The Rookery",
"enUS",
},
[129366] = {
"Bilge Rat Buccaneer",
"Siege of Boralus",
"enUS",
},
[170882] = {
"Bone Magus",
"Theater of Pain",
"enUS",
},
[178171] = {
"Stormforged Guardian",
"Tazavesh, the Veiled Market",
"enUS",
},
[139425] = {
"Crazed Incubator",
"Temple of Sethraliss",
},
[218324] = {
"Nakt",
"Ara-Kara, City of Echoes",
"enUS",
},
[207199] = {
"Cursed Rooktender",
"The Rookery",
"enUS",
},
[196202] = {
"Spectral Invoker",
"Algeth'ar Academy",
"enUS",
},
[212826] = {
"Guard Captain Suleyman",
"Priory of the Sacred Flame",
"enUS",
},
[122973] = {
"Dazar'ai Confessor",
"Atal'Dazar",
},
[100531] = {
"Bloodtainted Fury",
"Darkheart Thicket",
"enUS",
},
[213338] = {
"Forgebound Mender",
"The Stonevault",
"enUS",
},
[236995] = {
"Ravenous Destroyer",
"Eco-Dome Al'dani",
"enUS",
},
[207456] = {
"Fungal Speartender",
"Mycomancer Cavern",
"enUS",
},
[186229] = {
"Wilted Oak",
"Brackenhide Hollow",
"enUS",
},
[129559] = {
"Cutwater Duelist",
"Freehold",
},
[186741] = {
"Arcane Elemental",
"The Azure Vault",
"enUS",
},
[175616] = {
"Zo'phex",
"Tazavesh, the Veiled Market",
"enUS",
},
[129879] = {
"Irontide Cleaver",
"Siege of Boralus",
"enUS",
},
[174210] = {
"Blighted Sludge-Spewer",
"Theater of Pain",
"enUS",
},
[100532] = {
"Bloodtainted Burster",
"Darkheart Thicket",
"enUS",
},
[207202] = {
"Void Fragment",
"The Rookery",
"enUS",
},
[165515] = {
"Depraved Darkblade",
"Halls of Atonement",
"enUS",
},
[229069] = {
"Mechadrone Sniper",
"Operation: Floodgate",
"enUS",
},
[137511] = {
"Bilge Rat Cutthroat",
"Siege of Boralus",
"enUS",
},
[91006] = {
"Rockback Gnasher",
"Neltharion's Lair",
},
[40484] = {
"Erudax",
"Grim Batol",
"enUS",
},
[205158] = {
"Spurlok, Timesworn Sentinel",
"Dawn of the Infinite",
"enUS",
},
[145185] = {
"Gnomercy 4.U.",
"Operation: Mechagon",
"enUS",
},
[195696] = {
"Primalist Thunderbeast",
"The Nokhud Offensive",
"enUS",
},
[207205] = {
"Stormguard Gorren",
"The Rookery",
"enUS",
},
[171656] = {
"Venomous Sniper Captain",
"Plaguefall",
},
[138281] = {
"Faceless Corruptor",
"The Underrot",
},
[213216] = {
"Speaker Dorlita",
"The Stonevault",
"enUS",
},
[187897] = {
"Defier Draghar",
"Ruby Life Pools",
"enUS",
},
[129370] = {
"Irontide Waveshaper",
"Siege of Boralus",
"enUS",
},
[213217] = {
"Speaker Brokk",
"The Stonevault",
"enUS",
},
[207207] = {
"Voidstone Monstrosity",
"The Rookery",
"enUS",
},
[206696] = {
"Arathi Knight",
"Priory of the Sacred Flame",
"enUS",
},
[165137] = {
"Zolramus Gatekeeper",
"The Necrotic Wake",
"enUS",
},
[234957] = {
"Wastelander Ritualist",
"Eco-Dome Al'dani",
"enUS",
},
[206697] = {
"Devout Priest",
"Priory of the Sacred Flame",
"enUS",
},
[184319] = {
"Refti Custodian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[137517] = {
"Ashvane Destroyer",
"Siege of Boralus",
"enUS",
},
[130011] = {
"Irontide Buccaneer",
"Freehold",
},
[242631] = {
"Overcharged Sentinel",
"Eco-Dome Al'dani",
"enUS",
},
[105715] = {
"Watchful Inquisitor",
"Court of Stars",
},
[212453] = {
"Ghastly Voidsoul",
"The Stonevault",
"enUS",
},
[144296] = {
"Spider Tank",
"Operation: Mechagon",
"enUS",
},
[179334] = {
"Portalmancer Zo'dahh",
"Tazavesh, the Veiled Market",
"enUS",
},
[132532] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[234960] = {
"Tamed Ruinstalker",
"Eco-Dome Al'dani",
"enUS",
},
[139949] = {
"Plague Doctor",
"Temple of Sethraliss",
},
[224219] = {
"Twilight Earthcaller",
"Grim Batol",
"enUS",
},
[191739] = {
"Scalebane Lieutenant",
"The Azure Vault",
"enUS",
},
[224731] = {
"Web Marauder",
"City of Threads",
"enUS",
},
[168594] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[144298] = {
"Defense Bot Mk III",
"Operation: Mechagon",
"enUS",
},
[176395] = {
"Overloaded Mailemental",
"Tazavesh, the Veiled Market",
"enUS",
},
[234962] = {
"Wastelander Farstalker",
"Eco-Dome Al'dani",
"enUS",
},
[190206] = {
"Primalist Flamedancer",
"Ruby Life Pools",
"enUS",
},
[167956] = {
"Dark Acolyte",
"Sanguine Depths",
},
[184580] = {
"Olaf",
"Uldaman: Legacy of Tyr",
"enUS",
},
[129374] = {
"Scrimshaw Enforcer",
"Siege of Boralus",
"enUS",
},
[190207] = {
"Primalist Cinderweaver",
"Ruby Life Pools",
"enUS",
},
[169875] = {
"Shackled Soul",
"Theater of Pain",
"enUS",
},
[226396] = {
"Swampface",
"Operation: Floodgate",
"enUS",
},
[184581] = {
"Baelog",
"Uldaman: Legacy of Tyr",
"enUS",
},
[104247] = {
"Duskwatch Arcanist",
"Court of Stars",
},
[130909] = {
"Fetid Maggot",
"Zandalar",
},
[186116] = {
"Gutshot",
"Brackenhide Hollow",
"enUS",
},
[206704] = {
"Ardent Paladin",
"Priory of the Sacred Flame",
"enUS",
},
[206065] = {
"Interval",
"Dawn of the Infinite",
"enUS",
},
[165529] = {
"Depraved Collector",
"Halls of Atonement",
"enUS",
},
[98813] = {
"Bloodscent Felhound",
"Black Rook Hold",
"enUS",
},
[231385] = {
"Darkfuse Inspector",
"Operation: Floodgate",
"enUS",
},
[45922] = {
"Empyrean Assassin",
"The Vortex Pinnacle",
"enUS",
},
[206066] = {
"Timestream Leech",
"Dawn of the Infinite",
"enUS",
},
[40935] = {
"Gilgoblin Hunter",
"Throne of the Tides",
"enUS",
},
[214762] = {
"Nightfall Commander",
"The Dawnbreaker",
"enUS",
},
[186246] = {
"Fleshripper Vulture",
"Brackenhide Hollow",
"enUS",
},
[92612] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[166299] = {
"Mistveil Tender",
"Mists of Tirna Scithe",
"enUS",
},
[186120] = {
"Treemouth",
"Brackenhide Hollow",
"enUS",
},
[190340] = {
"Refti Defender",
"Halls of Infusion",
"enUS",
},
[136249] = {
"Guardian Elemental",
"Shrine of the Storm",
},
[204918] = {
"Iridikron's Creation",
"Dawn of the Infinite",
"enUS",
},
[223844] = {
"Covert Webmancer",
"City of Threads",
"enUS",
},
[171799] = {
"Depths Warden",
"Sanguine Depths",
},
[167963] = {
"Headless Client",
"De Other Side",
},
[226402] = {
"Bront",
"Operation: Floodgate",
"enUS",
},
[180495] = {
"Enraged Direhorn",
"Tazavesh, the Veiled Market",
"enUS",
},
[199037] = {
"Primalist Shocktrooper",
"Halls of Infusion",
"enUS",
},
[206710] = {
"Lightspawn",
"Priory of the Sacred Flame",
"enUS",
},
[101437] = {
"Burning Geode",
"Neltharion's Lair",
},
[122984] = {
"Dazar'ai Colossus",
"Atal'Dazar",
},
[41096] = {
"Naz'jar Oracle",
"Throne of the Tides",
"enUS",
},
[166302] = {
"Corpse Harvester",
"The Necrotic Wake",
"enUS",
},
[167965] = {
"Lubricator",
"De Other Side",
},
[226404] = {
"Geezle Gigazap",
"Operation: Floodgate",
"enUS",
},
[195842] = {
"Ukhel Corruptor",
"The Nokhud Offensive",
"enUS",
},
[165408] = {
"Halkias",
"Halls of Atonement",
"enUS",
},
[173720] = {
"Mistveil Gorgegullet",
"Mists of Tirna Scithe",
"enUS",
},
[163618] = {
"Zolramus Necromancer",
"The Necrotic Wake",
"enUS",
},
[194181] = {
"Vexamus",
"Algeth'ar Academy",
"enUS",
},
[186125] = {
"Tricktotem",
"Brackenhide Hollow",
"enUS",
},
[190345] = {
"Primalist Geomancer",
"Halls of Infusion",
"enUS",
},
[167967] = {
"Sentient Oil",
"De Other Side",
},
[137405] = {
"Gripping Terror",
"Siege of Boralus",
"enUS",
},
[206074] = {
"Pendule",
"Dawn of the Infinite",
"enUS",
},
[205691] = {
"Iridikron's Creation",
"Dawn of the Infinite",
"enUS",
},
[98370] = {
"Ghostly Councilor",
"Black Rook Hold",
"enUS",
},
[239834] = {
"Taener Duelmal",
"Priory of the Sacred Flame",
"enUS",
},
[163621] = {
"Goregrind",
"The Necrotic Wake",
"enUS",
},
[168992] = {
"Risen Cultist",
"De Other Side",
},
[134338] = {
"Tidesage Enforcer",
"Shrine of the Storm",
},
[45477] = {
"Gust Soldier",
"The Vortex Pinnacle",
},
[196102] = {
"Conjured Lasher",
"The Azure Vault",
"enUS",
},
[177816] = {
"Interrogation Specialist",
"Tazavesh, the Veiled Market",
"enUS",
},
[98243] = {
"Soul-Torn Champion",
"Black Rook Hold",
"enUS",
},
[190348] = {
"Primalist Ravager",
"Halls of Infusion",
"enUS",
},
[239836] = {
"Sergeant Shaynemail",
"Priory of the Sacred Flame",
"enUS",
},
[177817] = {
"Support Officer",
"Tazavesh, the Veiled Market",
"enUS",
},
[135235] = {
"Spectral Beastmaster",
"Kings' Rest",
},
[165414] = {
"Depraved Obliterator",
"Halls of Atonement",
"enUS",
},
[151476] = {
"Blastatron X-80",
"Operation: Mechagon",
"enUS",
},
[136643] = {
"Azerite Extractor",
"The MOTHERLODE!!",
"enUS",
},
[165415] = {
"Toiling Groundskeeper",
"Halls of Atonement",
"enUS",
},
[194315] = {
"Stormcaller Solongo",
"The Nokhud Offensive",
"enUS",
},
[135365] = {
"Matron Alma",
"Waycrest Manor",
},
[214264] = {
"Cursedforge Honor Guard",
"The Stonevault",
"enUS",
},
[168357] = {
"Zolramus Sorcerer",
"The Necrotic Wake",
},
[194316] = {
"Stormcaller Zarii",
"The Nokhud Offensive",
"enUS",
},
[210812] = {
"Royal Wicklighter",
"Darkflame Cleft",
"enUS",
},
[163882] = {
"Decaying Flesh Giant",
"Plaguefall",
},
[195851] = {
"Ukhel Deathspeaker",
"The Nokhud Offensive",
"enUS",
},
[134599] = {
"Imbued Stormcaller",
"Temple of Sethraliss",
},
[194317] = {
"Stormcaller Boroo",
"The Nokhud Offensive",
"enUS",
},
[169893] = {
"Nefarious Darkspeaker",
"Theater of Pain",
"enUS",
},
[224240] = {
"Twilight Flamerender",
"Grim Batol",
"enUS",
},
[190609] = {
"Echo of Doragosa",
"Algeth'ar Academy",
"enUS",
},
[134600] = {
"Sandswept Marksman",
"Temple of Sethraliss",
},
[201223] = {
"Infinite Twilight Magus",
"Dawn of the Infinite",
"enUS",
},
[135240] = {
"Soul Essence",
"UNKNOWN",
"enUS",
},
[217208] = {
"Zekvir",
"Mycomancer Cavern",
"enUS",
},
[59545] = {
"The Golden Beetle",
"Temple of the Jade Serpent",
},
[135241] = {
"Bilge Rat Pillager",
"Siege of Boralus",
"enUS",
},
[133835] = {
"Feral Bloodswarmer",
"The Underrot",
},
[222964] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[190484] = {
"Kyrakka",
"Ruby Life Pools",
"enUS",
},
[100485] = {
"Soul-torn Vanguard",
"Black Rook Hold",
"enUS",
},
[195855] = {
"Risen Warrior",
"The Nokhud Offensive",
"enUS",
},
[163503] = {
"Etherdiver",
"Spires of Ascension",
},
[187160] = {
"Crystal Fury",
"The Azure Vault",
"enUS",
},
[213119] = {
"Void Speaker Eirich",
"The Stonevault",
"enUS",
},
[187033] = {
"Stinkbreath",
"Brackenhide Hollow",
"enUS",
},
[210818] = {
"Lowly Moleherd",
"Darkflame Cleft",
"enUS",
},
[192788] = {
"Qalashi Thaumaturge",
"Neltharus",
"enUS",
},
[59546] = {
"The Talking Fish",
"Temple of the Jade Serpent",
},
[102788] = {
"Felspite Dominator",
"Black Rook Hold",
"enUS",
},
[189464] = {
"Qalashi Irontorch",
"Neltharus",
"enUS",
},
[76446] = {
"Shadowmoon Dominator",
"Shadowmoon Burial Grounds",
},
[192789] = {
"Nokhud Longbow",
"The Nokhud Offensive",
"enUS",
},
[134990] = {
"Charged Dust Devil",
"Temple of Sethraliss",
},
[138187] = {
"Grotesque Horror",
"The Underrot",
},
[164463] = {
"Paceran the Virulent",
"Theater of Pain",
"enUS",
},
[215405] = {
"Anub'zekt",
"Ara-Kara, City of Echoes",
"enUS",
},
[197905] = {
"Spellbound Scepter",
"Algeth'ar Academy",
},
[84400] = {
"Flourishing Ancient",
"The Everbloom",
"enUS",
},
[131666] = {
"Coven Thornshaper",
"Waycrest Manor",
},
[81522] = {
"Witherbark",
"The Everbloom",
"enUS",
},
[212739] = {
"Consuming Voidstone",
"The Rookery",
"enUS",
},
[144303] = {
"G.U.A.R.D.",
"Operation: Mechagon",
"enUS",
},
[163891] = {
"Rotmarrow Slime",
"Plaguefall",
},
[45928] = {
"Executor of the Caliph",
"The Vortex Pinnacle",
},
[44404] = {
"Naz'jar Frost Witch",
"Throne of the Tides",
"enUS",
},
[129600] = {
"Bilge Rat Brinescale",
"Freehold",
},
[213932] = {
"Sureki Militant",
"The Dawnbreaker",
"enUS",
},
[144071] = {
"Irontide Waveshaper",
"Siege of Boralus",
"enUS",
},
[83846] = {
"Yalnu",
"The Everbloom",
"enUS",
},
[190362] = {
"Dazzling Dragonfly",
"Halls of Infusion",
"enUS",
},
[224249] = {
"Twilight Lavabender",
"Grim Batol",
"enUS",
},
[212403] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[192333] = {
"Alpha Eagle",
"Algeth'ar Academy",
"enUS",
},
[208747] = {
"The Darkness",
"Darkflame Cleft",
"enUS",
},
[43873] = {
"Altairus",
"The Vortex Pinnacle",
},
[134418] = {
"Drowned Depthbringer",
"Shrine of the Storm",
},
[223994] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[213892] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[220158] = {
"Under-Lord Vik'tis",
"The Dread Pit",
"enUS",
},
[186738] = {
"Umbrelskul",
"The Azure Vault",
"enUS",
},
[163126] = {
"Brittlebone Mage",
"The Necrotic Wake",
"enUS",
},
[193944] = {
"Qalashi Lavamancer",
"Neltharus",
"enUS",
},
[208698] = {
"Infinite Riftmage",
"Dawn of the Infinite",
"enUS",
},
[81819] = {
"Everbloom Naturalist",
"The Everbloom",
},
[208745] = {
"The Candle King",
"Darkflame Cleft",
"enUS",
},
[213893] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[186644] = {
"Leymor",
"The Azure Vault",
"enUS",
},
[223777] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[226403] = {
"Keeza Quickfuse",
"Operation: Floodgate",
"enUS",
},
[40634] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
"enUS",
},
[131670] = {
"Heartsbane Vinetwister",
"Waycrest Manor",
},
[214661] = {
"Goldie Baronbottom",
"Cinderbrew Meadery",
"enUS",
},
[40167] = {
"Twilight Beguiler",
"Grim Batol",
"enUS",
},
[208743] = {
"Blazikon",
"Darkflame Cleft",
"enUS",
},
[189470] = {
"Lava Flare",
"Neltharus",
"enUS",
},
[208438] = {
"Infinite Saboteur",
"Dawn of the Infinite",
"enUS",
},
[163128] = {
"Zolramus Sorcerer",
"The Necrotic Wake",
"enUS",
},
[224732] = {
"Covert Webmancer",
"City of Threads",
"enUS",
},
[98792] = {
"Wyrmtongue Scavenger",
"Black Rook Hold",
"enUS",
},
[168627] = {
"Plaguebinder",
"Plaguefall",
},
[113998] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[226398] = {
"Big M.O.M.M.A.",
"Operation: Floodgate",
"enUS",
},
[189266] = {
"Qalashi Trainee",
"Neltharus",
"enUS",
},
[216648] = {
"Nx",
"City of Threads",
"enUS",
},
[192796] = {
"Nokhud Hornsounder",
"The Nokhud Offensive",
"enUS",
},
[200137] = {
"Depraved Mistweaver",
"Temple of the Jade Serpent",
},
[206351] = {
"Alliance Conjuror",
"Dawn of the Infinite",
"enUS",
},
[162329] = {
"Xav the Unfallen",
"Theater of Pain",
"enUS",
},
[189467] = {
"Qalashi Bonesplitter",
"Neltharus",
"enUS",
},
[213934] = {
"Nightfall Tactician",
"The Dawnbreaker",
"enUS",
},
[164920] = {
"Drust Soulcleaver",
"Mists of Tirna Scithe",
"enUS",
},
[185508] = {
"Claw Fighter",
"Brackenhide Hollow",
"enUS",
},
[216326] = {
"Ascended Neophyte",
"City of Threads",
"enUS",
},
[131545] = {
"Lady Waycrest",
"Waycrest Manor",
"enUS",
},
[205408] = {
"Infinite Timeslicer",
"Dawn of the Infinite",
"enUS",
},
[189901] = {
"Warlord Sargha",
"Neltharus",
"enUS",
},
[129231] = {
"Rixxa Fluxflame",
"The MOTHERLODE!!",
"enUS",
},
[190368] = {
"Flamecaller Aymi",
"Halls of Infusion",
"enUS",
},
[164921] = {
"Drust Harvester",
"Mists of Tirna Scithe",
"enUS",
},
[132491] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[196200] = {
"Algeth'ar Echoknight",
"Algeth'ar Academy",
"enUS",
},
[229212] = {
"Darkfuse Demolitionist",
"Operation: Floodgate",
"enUS",
},
[206064] = {
"Coalesced Moment",
"Dawn of the Infinite",
"enUS",
},
[188067] = {
"Flashfrost Chillweaver",
"Ruby Life Pools",
"enUS",
},
[75459] = {
"Plagued Bat",
"Shadowmoon Burial Grounds",
},
[168886] = {
"Virulax Blightweaver",
"Plaguefall",
},
[134232] = {
"Hired Assassin",
"The MOTHERLODE!!",
"enUS",
},
[45930] = {
"Minister of Air",
"The Vortex Pinnacle",
},
[196043] = {
"Primalist Infuser",
"Halls of Infusion",
"enUS",
},
[210269] = {
"Hired Muscle",
"Cinderbrew Meadery",
"enUS",
},
[189719] = {
"Watcher Irideus",
"Halls of Infusion",
"enUS",
},
[40943] = {
"Gilgoblin Aquamage",
"Throne of the Tides",
"enUS",
},
[205151] = {
"Tyr's Vanguard",
"Dawn of the Infinite",
"enUS",
},
[179841] = {
"Veteran Sparkcaster",
"Tazavesh, the Veiled Market",
"enUS",
},
[165946] = {
"Mordretha, the Endless Empress",
"Theater of Pain",
"enUS",
},
[210271] = {
"Brew Master Aldryr",
"Cinderbrew Meadery",
"enUS",
},
[192800] = {
"Nokhud Lancemaster",
"The Nokhud Offensive",
"enUS",
},
[184132] = {
"Earthen Warder",
"Uldaman: Legacy of Tyr",
"enUS",
},
[196577] = {
"Spellbound Battleaxe",
"Algeth'ar Academy",
"enUS",
},
[104278] = {
"Felbound Enforcer",
"Court of Stars",
},
[186151] = {
"Balakar Khan",
"The Nokhud Offensive",
"enUS",
},
[199000] = {
"Chrono-Lord Deios",
"Dawn of the Infinite",
"enUS",
},
[197985] = {
"Flame Channeler",
"Ruby Life Pools",
"enUS",
},
[211087] = {
"Speaker Shadowcrown",
"The Dawnbreaker",
"enUS",
},
[45919] = {
"Young Storm Dragon",
"The Vortex Pinnacle",
},
[234872] = {
"Wastelander Phaseblade",
"Eco-Dome Al'dani",
"enUS",
},
[131677] = {
"Heartsbane Runeweaver",
"Waycrest Manor",
},
[168318] = {
"Forsworn Goliath",
"Spires of Ascension",
},
[134157] = {
"Shadow-Borne Warrior",
"Kings' Rest",
},
[180091] = {
"Ancient Core Hound",
"Tazavesh, the Veiled Market",
"enUS",
},
[135258] = {
"Irontide Curseblade",
"Siege of Boralus",
"enUS",
},
[208450] = {
"Wandering Candle",
"Darkflame Cleft",
"enUS",
},
[220423] = {
"Retired Lord Vul'azak",
"City of Threads",
"enUS",
},
[200126] = {
"Fallen Waterspeaker",
"Temple of the Jade Serpent",
},
[164414] = {
"Reanimated Mage",
"The Necrotic Wake",
"enUS",
},
[133852] = {
"Living Rot",
"The Underrot",
},
[128434] = {
"Feasting Skyscreamer",
"Atal'Dazar",
},
[190373] = {
"Primalist Galesinger",
"Halls of Infusion",
"enUS",
},
[189478] = {
"Forgemaster Gorek",
"Neltharus",
"enUS",
},
[134364] = {
"Faithless Tender",
"Temple of Sethraliss",
},
[130661] = {
"Venture Co. Earthshaper",
"The MOTHERLODE!!",
"enUS",
},
[191736] = {
"Crawth",
"Algeth'ar Academy",
"enUS",
},
[139422] = {
"Scaled Krolusk Tamer",
"Temple of Sethraliss",
},
[167612] = {
"Stoneborn Reaver",
"Halls of Atonement",
"enUS",
},
[84957] = {
"Putrid Pyromancer",
"The Everbloom",
},
[197535] = {
"High Channeler Ryvati",
"Ruby Life Pools",
"enUS",
},
[213008] = {
"Wriggling Darkspawn",
"Darkflame Cleft",
"enUS",
},
[131586] = {
"Banquet Steward",
"Waycrest Manor",
},
[184301] = {
"Cavern Seeker",
"Uldaman: Legacy of Tyr",
"enUS",
},
[198047] = {
"Tempest Channeler",
"Ruby Life Pools",
"enUS",
},
[207468] = {
"Gnarled Reviver",
"Mycomancer Cavern",
"enUS",
},
[40177] = {
"Forgemaster Throngus",
"Grim Batol",
"enUS",
},
[128435] = {
"Toxic Saurid",
"Atal'Dazar",
},
[133432] = {
"Venture Co. Alchemist",
"The MOTHERLODE!!",
"enUS",
},
[189340] = {
"Chargath, Bane of Scales",
"Neltharus",
"enUS",
},
[129788] = {
"Irontide Bonesaw",
"Freehold",
},
[205337] = {
"Infinite Timebender",
"Dawn of the Infinite",
"enUS",
},
[176565] = {
"Disruptive Patron",
"Tazavesh, the Veiled Market",
"enUS",
},
[177716] = {
"So' Cartel Assassin",
"Tazavesh, the Veiled Market",
"enUS",
},
[153292] = {
"Training Dummy",
"Eastern Kingdoms",
},
[213343] = {
"Forge Loader",
"The Stonevault",
"enUS",
},
[165824] = {
"Nar'zudah",
"The Necrotic Wake",
"enUS",
},
[164929] = {
"Tirnenn Villager",
"Mists of Tirna Scithe",
"enUS",
},
[144293] = {
"Waste Processing Unit",
"Operation: Mechagon",
"enUS",
},
[129602] = {
"Irontide Enforcer",
"Freehold",
},
[231380] = {
"Undercrawler",
"Operation: Floodgate",
"enUS",
},
[229251] = {
"Venture Co. Architect",
"Operation: Floodgate",
"enUS",
},
[214673] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[135007] = {
"Orb Guardian",
"Temple of Sethraliss",
},
[190377] = {
"Primalist Icecaller",
"Halls of Infusion",
"enUS",
},
[135263] = {
"Ashvane Spotter",
"Siege of Boralus",
"enUS",
},
[196115] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[195876] = {
"Desecrated Ohuna",
"The Nokhud Offensive",
"enUS",
},
[212389] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[186220] = {
"Brackenhide Shaper",
"Brackenhide Hollow",
"enUS",
},
[212827] = {
"High Priest Aemya",
"Priory of the Sacred Flame",
"enUS",
},
[205723] = {
"Time-Lost Aerobot",
"Dawn of the Infinite",
"enUS",
},
[229252] = {
"Darkfuse Hyena",
"Operation: Floodgate",
"enUS",
},
[210966] = {
"Sureki Webmage",
"The Dawnbreaker",
"enUS",
},
[211089] = {
"Anub'ikkaj",
"The Dawnbreaker",
"enUS",
},
[195877] = {
"Risen Mystic",
"The Nokhud Offensive",
"enUS",
},
[163086] = {
"Rancid Gasbag",
"Theater of Pain",
"enUS",
},
[131812] = {
"Heartsbane Soulcharmer",
"Waycrest Manor",
"enUS",
},
[98706] = {
"Commander Shemdah'sohn",
"Black Rook Hold",
"enUS",
},
[231496] = {
"Venture Co. Diver",
"Operation: Floodgate",
"enUS",
},
[164804] = {
"Droman Oulfarran",
"Mists of Tirna Scithe",
"enUS",
},
[47238] = {
"Whipping Wind",
"The Vortex Pinnacle",
},
[168578] = {
"Fungalmancer",
"Plaguefall",
},
[195878] = {
"Ukhel Beastcaller",
"The Nokhud Offensive",
"enUS",
},
[175546] = {
"Timecap'n Hooktail",
"Tazavesh, the Veiled Market",
"enUS",
},
[131685] = {
"Runic Disciple",
"Waycrest Manor",
},
[102287] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[242209] = {
"Overgorged Mite",
"Eco-Dome Al'dani",
"enUS",
},
[207459] = {
"Fungal Rotcaster",
"Mycomancer Cavern",
"enUS",
},
[215968] = {
"Black Blood",
"Ara-Kara, City of Echoes",
"enUS",
},
[178139] = {
"Murkbrine Shellcrusher",
"Tazavesh, the Veiled Market",
"enUS",
},
[216339] = {
"Sureki Unnaturaler",
"City of Threads",
"enUS",
},
[214421] = {
"Corrupted Thunderer",
"The Rookery",
"enUS",
},
[189265] = {
"Qalashi Bonetender",
"Neltharus",
"enUS",
},
[220815] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[190381] = {
"Rotburst Totem",
"Brackenhide Hollow",
"enUS",
},
[95766] = {
"Crazed Razorbeak",
"Darkheart Thicket",
"enUS",
},
[209801] = {
"Quartermaster Koratite",
"The Rookery",
"enUS",
},
[125977] = {
"Reanimation Totem",
"Atal'Dazar",
},
[216340] = {
"Sentry Stagshell",
"Ara-Kara, City of Echoes",
"enUS",
},
[166275] = {
"Mistveil Shaper",
"Mists of Tirna Scithe",
"enUS",
},
[104270] = {
"Guardian Construct",
"Court of Stars",
},
[144295] = {
"Mechagon Mechanic",
"Operation: Mechagon",
"enUS",
},
[205727] = {
"Time-Lost Rocketeer",
"Dawn of the Infinite",
"enUS",
},
[167876] = {
"Inquisitor Sigar",
"Halls of Atonement",
"enUS",
},
[199717] = {
"Nokhud Defender",
"The Nokhud Offensive",
"enUS",
},
[138465] = {
"Ashvane Cannoneer",
"Siege of Boralus",
"enUS",
},
[98691] = {
"Risen Scout",
"Black Rook Hold",
"enUS",
},
[59552] = {
"The Crybaby Hozen",
"Temple of the Jade Serpent",
},
[167493] = {
"Venomous Sniper",
"Plaguefall",
},
[164552] = {
"Rotmarrow Slime",
"Plaguefall",
},
[189232] = {
"Kokia Blazehoof",
"Ruby Life Pools",
"enUS",
},
[184023] = {
"Vicious Basilisk",
"Uldaman: Legacy of Tyr",
"enUS",
},
[138338] = {
"Reanimated Guardian",
"The Underrot",
},
[170690] = {
"Diseased Horror",
"Theater of Pain",
"enUS",
},
[216342] = {
"Skittering Assistant",
"City of Threads",
"enUS",
},
[197698] = {
"Thunderhead",
"Ruby Life Pools",
"enUS",
},
[136549] = {
"Ashvane Cannoneer",
"Siege of Boralus",
"enUS",
},
[131817] = {
"Cragmaw the Infested",
"The Underrot",
},
[220946] = {
"Venture Co. Honey Harvester",
"Cinderbrew Meadery",
"enUS",
},
[213913] = {
"Kobold Flametender",
"Darkflame Cleft",
"enUS",
},
[186420] = {
"Earthen Weaver",
"Uldaman: Legacy of Tyr",
"enUS",
},
[167111] = {
"Spinemaw Staghorn",
"Mists of Tirna Scithe",
"enUS",
},
[211228] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[81820] = {
"Everbloom Mender",
"The Everbloom",
},
[224271] = {
"Twilight Warlock",
"Grim Batol",
"enUS",
},
[131818] = {
"Marked Sister",
"Waycrest Manor",
},
[220060] = {
"Taste Tester",
"Cinderbrew Meadery",
"enUS",
},
[137516] = {
"Ashvane Invader",
"Siege of Boralus",
"enUS",
},
[130435] = {
"Addled Thug",
"The MOTHERLODE!!",
"enUS",
},
[179388] = {
"Hourglass Tidesage",
"Tazavesh, the Veiled Market",
"enUS",
},
[91001] = {
"Tarspitter Lurker",
"Neltharion's Lair",
},
[164506] = {
"Ancient Captain",
"Theater of Pain",
"enUS",
},
[189235] = {
"Overseer Lahar",
"Neltharus",
"enUS",
},
[136934] = {
"Weapons Tester",
"The MOTHERLODE!!",
"enUS",
},
[216856] = {
"Black Blood",
"Ara-Kara, City of Echoes",
"enUS",
},
[190404] = {
"Subterranean Proto-Dragon",
"Halls of Infusion",
},
[136295] = {
"Sunken Denizen",
"Shrine of the Storm",
},
[102232] = {
"Rockbound Trapper",
"Neltharion's Lair",
},
[131436] = {
"Chosen Blood Matron",
"The Underrot",
},
[41139] = {
"Naz'jar Oracle",
"Throne of the Tides",
"enUS",
},
[137830] = {
"Pallid Gorger",
"Waycrest Manor",
},
[96664] = {
"Valarjar Runecarver",
"Halls of Valor",
},
[169927] = {
"Putrid Butcher",
"Theater of Pain",
"enUS",
},
[95769] = {
"Mindshattered Screecher",
"Darkheart Thicket",
"enUS",
},
[133482] = {
"Crawler Mine",
"The MOTHERLODE!!",
"enUS",
},
[185528] = {
"Trickclaw Mystic",
"Brackenhide Hollow",
"enUS",
},
[185656] = {
"Filth Caller",
"Brackenhide Hollow",
"enUS",
},
[131819] = {
"Coven Diviner",
"Waycrest Manor",
"enUS",
},
[141283] = {
"Kul Tiran Halberd",
"Siege of Boralus",
},
[131821] = {
"Faceless Maiden",
"Waycrest Manor",
"enUS",
},
[167607] = {
"Stoneborn Slasher",
"Halls of Atonement",
"enUS",
},
[141284] = {
"Kul Tiran Wavetender",
"Siege of Boralus",
},
[134251] = {
"Seneschal M'bara",
"Kings' Rest",
},
[185529] = {
"Bracken Warscourge",
"Brackenhide Hollow",
"enUS",
},
[75979] = {
"Exhumed Spirit",
"Shadowmoon Burial Grounds",
},
[193457] = {
"Balara",
"The Nokhud Offensive",
"enUS",
},
[223253] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[129529] = {
"Blacktooth Scrapper",
"Freehold",
},
[137521] = {
"Irontide Powdershot",
"Siege of Boralus",
"enUS",
},
[141285] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[95834] = {
"Valarjar Mystic",
"Halls of Valor",
},
[45935] = {
"Temple Adept",
"The Vortex Pinnacle",
},
[113537] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[190407] = {
"Aqua Rager",
"Halls of Infusion",
"enUS",
},
[164557] = {
"Shard of Halkias",
"Halls of Atonement",
"enUS",
},
[190342] = {
"Containment Apparatus",
"Halls of Infusion",
"enUS",
},
[164501] = {
"Mistcaller",
"Mists of Tirna Scithe",
"enUS",
},
[229686] = {
"Venture Co. Surveyor",
"Operation: Floodgate",
"enUS",
},
[129208] = {
"Dread Captain Lockwood",
"Siege of Boralus",
"enUS",
},
[135239] = {
"Spectral Witch Doctor",
"Kings' Rest",
},
[208165] = {
"Alliance Knight",
"Dawn of the Infinite",
"enUS",
},
[133685] = {
"Befouled Spirit",
"The Underrot",
},
[135474] = {
"Thistle Acolyte",
"Waycrest Manor",
},
[133870] = {
"Diseased Lasher",
"The Underrot",
},
[184125] = {
"Chrono-Lord Deios",
"Uldaman: Legacy of Tyr",
"enUS",
},
[95771] = {
"Dreadsoul Ruiner",
"Darkheart Thicket",
"enUS",
},
[133430] = {
"Venture Co. Mastermind",
"The MOTHERLODE!!",
"enUS",
},
[220314] = {
"Bogpiper",
"Mycomancer Cavern",
"enUS",
},
[134144] = {
"Living Current",
"Shrine of the Storm",
},
[228540] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[207969] = {
"Horde Raider",
"Dawn of the Infinite",
"enUS",
},
[216338] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[134629] = {
"Scaled Krolusk Rider",
"Temple of Sethraliss",
},
[231312] = {
"Venture Co. Electrician",
"Operation: Floodgate",
"enUS",
},
[134331] = {
"King Rahu'ai",
"Kings' Rest",
},
[95842] = {
"Valarjar Thundercaller",
"Halls of Valor",
},
[98521] = {
"Lord Etheldrin Ravencrest",
"Black Rook Hold",
"enUS",
},
[168942] = {
"Death Speaker",
"De Other Side",
},
[170572] = {
"Atal'ai Hoodoo Hexxer",
"De Other Side",
},
[164562] = {
"Depraved Houndmaster",
"Halls of Atonement",
"enUS",
},
[160495] = {
"Maniacal Soulbinder",
"Theater of Pain",
"enUS",
},
[193462] = {
"Batak",
"The Nokhud Offensive",
"enUS",
},
[131585] = {
"Enthralled Guard",
"Waycrest Manor",
},
[185534] = {
"Bonebolt Hunter",
"Brackenhide Hollow",
"enUS",
},
[128455] = {
"T'lonja",
"Atal'Dazar",
"enUS",
},
[190405] = {
"Infuser Sariya",
"Halls of Infusion",
"enUS",
},
[196044] = {
"Unruly Textbook",
"Algeth'ar Academy",
"enUS",
},
[179893] = {
"Cartel Skulker",
"Tazavesh, the Veiled Market",
"enUS",
},
[221979] = {
"Void Bound Howler",
"The Stonevault",
"enUS",
},
[163458] = {
"Forsworn Castigator",
"Spires of Ascension",
},
[179269] = {
"Oasis Security",
"Tazavesh, the Veiled Market",
"enUS",
},
[132126] = {
"Gilded Priestess",
"Atal'Dazar",
},
[163157] = {
"Amarth",
"The Necrotic Wake",
"enUS",
},
[59555] = {
"Haunting Sha",
"Temple of the Jade Serpent",
},
[223770] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[235151] = {
"K'aresh Elemental",
"Eco-Dome Al'dani",
"enUS",
},
[126919] = {
"Irontide Stormcaller",
"Freehold",
},
[193293] = {
"Qalashi Warden",
"Neltharus",
"enUS",
},
[144294] = {
"Mechagon Tinkerer",
"Operation: Mechagon",
"enUS",
},
[165076] = {
"Gluttonous Tick",
"Sanguine Depths",
},
[134514] = {
"Abyssal Cultist",
"Shrine of the Storm",
},
[204206] = {
"Horde Farseer",
"Dawn of the Infinite",
"enUS",
},
[130635] = {
"Stonefury",
"The MOTHERLODE!!",
"enUS",
},
[137484] = {
"King A'akul",
"Kings' Rest",
},
[184130] = {
"Earthen Custodian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[153285] = {
"Training Dummy",
"Kalimdor",
},
[136186] = {
"Tidesage Spiritualist",
"Shrine of the Storm",
},
[131318] = {
"Elder Leaxa",
"The Underrot",
},
[134417] = {
"Deepsea Ritualist",
"Shrine of the Storm",
},
[234955] = {
"Wastelander Pactspeaker",
"Eco-Dome Al'dani",
"enUS",
},
[223772] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[191164] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[212775] = {
"Faceless Seer",
"Throne of the Tides",
"enUS",
},
[231075] = {
"Chrome King Gallywix",
"Liberation of Undermine",
"enUS",
},
[233152] = {
"Wandering Candle",
"Darkflame Cleft",
"enUS",
},
[220141] = {
"Royal Jelly Purveyor",
"Cinderbrew Meadery",
"enUS",
},
[186121] = {
"Decatriarch Wratheye",
"Brackenhide Hollow",
"enUS",
},
[134284] = {
"Fallen Deathspeaker",
"The Underrot",
},
[223773] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[164567] = {
"Ingra Maloch",
"Mists of Tirna Scithe",
"enUS",
},
[189247] = {
"Tamed Phoenix",
"Neltharus",
"enUS",
},
[134701] = {
"Blood Effigy",
"The Underrot",
},
[187155] = {
"Rune Seal Keeper",
"The Azure Vault",
"enUS",
},
[190294] = {
"Nokhud Stormcaster",
"The Nokhud Offensive",
"enUS",
},
[129214] = {
"Coin-Operated Crowd Pummeler",
"The MOTHERLODE!!",
"enUS",
},
[214439] = {
"Corrupted Oracle",
"The Rookery",
"enUS",
},
[187969] = {
"Flashfrost Earthshaper",
"Ruby Life Pools",
"enUS",
},
[130404] = {
"Vermin Trapper",
"Freehold",
},
[194894] = {
"Primalist Stormspeaker",
"The Nokhud Offensive",
"enUS",
},
[186658] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
"enUS",
},
[133007] = {
"Unbound Abomination",
"The Underrot",
},
[216293] = {
"Trilling Attendant",
"Ara-Kara, City of Echoes",
"enUS",
},
[194895] = {
"Unstable Squall",
"The Nokhud Offensive",
"enUS",
},
[176396] = {
"Defective Sorter",
"Tazavesh, the Veiled Market",
"enUS",
},
[223775] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[133463] = {
"Venture Co. War Machine",
"The MOTHERLODE!!",
"enUS",
},
[212778] = {
"Minion of Ghur'sha",
"Throne of the Tides",
"enUS",
},
[210539] = {
"Corridor Creeper",
"Darkflame Cleft",
"enUS",
},
[220195] = {
"Sureki Silkbinder",
"City of Threads",
"enUS",
},
[101991] = {
"Nightmare Dweller",
"Darkheart Thicket",
"enUS",
},
[220003] = {
"Eye of the Queen",
"City of Threads",
"enUS",
},
[133836] = {
"Reanimated Guardian",
"The Underrot",
},
[223776] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[214697] = {
"Chef Chewie",
"Cinderbrew Meadery",
"enUS",
},
[128651] = {
"Hadal Darkfathom",
"Siege of Boralus",
"enUS",
},
[190401] = {
"Gusting Proto-Dragon",
"Halls of Infusion",
},
[220196] = {
"Herald of Ansurek",
"City of Threads",
"enUS",
},
[186739] = {
"Azureblade",
"The Azure Vault",
"enUS",
},
[211121] = {
"Rank Overseer",
"Darkflame Cleft",
"enUS",
},
[213806] = {
"Splotch",
"Throne of the Tides",
"enUS",
},
[205363] = {
"Time-Lost Waveshaper",
"Dawn of the Infinite",
"enUS",
},
[122971] = {
"Dazar'ai Juggernaut",
"Atal'Dazar",
},
[230740] = {
"Shreddinator 3000",
"Operation: Floodgate",
"enUS",
},
[134137] = {
"Temple Attendant",
"Shrine of the Storm",
},
[220197] = {
"Royal Swarmguard",
"City of Threads",
"enUS",
},
[127106] = {
"Irontide Officer",
"Freehold",
},
[165919] = {
"Skeletal Marauder",
"The Necrotic Wake",
"enUS",
},
[206705] = {
"Arathi Footman",
"Priory of the Sacred Flame",
"enUS",
},
[199027] = {
"Magmas",
"Vault of the Incarnates",
"enUS",
},
[174802] = {
"Venomous Sniper",
"Plaguefall",
},
[205152] = {
"Lerai, Timesworn Maiden",
"Dawn of the Infinite",
"enUS",
},
[190403] = {
"Glacial Proto-Dragon",
"Halls of Infusion",
"enUS",
},
[151657] = {
"Bomb Tonk",
"Operation: Mechagon",
"enUS",
},
[180429] = {
"Adorned Starseer",
"Tazavesh, the Veiled Market",
"enUS",
},
[89] = {
"Infernal",
"Theater of Pain",
"enUS",
},
[230748] = {
"Darkfuse Bloodwarper",
"Operation: Floodgate",
"enUS",
},
[206698] = {
"Fanatical Mage",
"Priory of the Sacred Flame",
"enUS",
},
[209230] = {
"Kyrioss",
"The Rookery",
"enUS",
},
[129367] = {
"Bilge Rat Tempest",
"Siege of Boralus",
"enUS",
},
},
["aura_grow_direction"] = 3,
["health_selection_overlay_alpha"] = 0.2999999821186066,
["aura_stack_shadow_color"] = {
nil,
nil,
nil,
0,
},
["minor_height_scale"] = 0.9999999403953552,
["bossmod_cooldown_text_size"] = 10,
["cast_statusbar_spark_half"] = true,
["aura_padding"] = 2,
["indicator_worldboss"] = false,
["hook_data"] = {
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    \n    --ATTENTION: after enabling this mod, you may have to adjust the anchor point at the Buff Settings tab\n    \n    local sortByTime = false\n    local invertSort = false\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        [\"Vampiric Touch\"] = 50,\n        [\"Shadow Word: Pain\"] = 22,\n        [\"Mind Flay\"] = 5,\n        [\"Pistol Shot\"] = 50,\n        [\"Marked for Death\"] = 99,\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or 1\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                 return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1754710660,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_reorder",
["Enabled"] = true,
["Revision"] = 372,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Desc"] = "Reorder buffs and debuffs following the settings set in the constructor.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Aura Reorder [Plater]",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["Enabled"] = true,
["Revision"] = 146,
["Options"] = {
},
["HooksTemp"] = {
},
["Author"] = "????????-Illidan",
["Name"] = "Advanced Debuff Border",
["Desc"] = "Config aura borders",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border thickness\n    local size = 1 \n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (0, 0, 0, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()\n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end\n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame2.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (0, 0, 0, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()            \n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end    \nend",
},
["Prio"] = 99,
["Time"] = 1755150006,
["PlaterCore"] = 1,
["LastHookEdited"] = "",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Icon"] = 133006,
["OptionsValues"] = {
},
},
{
["Enabled"] = true,
["Revision"] = 99,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Author"] = "Cyclopes-Turalyon",
["Time"] = 1755150021,
["Desc"] = "Add an icon to indicate an unit has Aggro on you. By default only show for units using a custom color from Npc Colors.",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.ThreatIcon) then\n        unitFrame.ThreatIcon:Hide()\n    end\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIndicator (unitFrame)\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.ThreatIcon) then\n        unitFrame.ThreatIcon:Hide()\n    end    \nend\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.ThreatIcon) then\n        unitFrame.ThreatIcon:Hide()\n    end\nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateThreatState (unitFrame, unitId)\n    \nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdatePlayerRole (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.Anchor = {side = 11, x = -2, y = 0}\n    envTable.Texture = \"Interface\\\\AddOns\\\\Plater\\\\media\\\\exclamation2_64\"\n    \n    --it'll only use the icon if the nameplate has a color from the Npc Colors tab and \"Only Scripts\" disabled.\n    envTable.OnlyWhenUsingNpcColor = true --if false, it'll always use the icon\n    \n    --private\n    envTable.PlayerRole = \"NONE\" --automatically changed by the script\n    \n    function envTable.CreateIndicator (unitFrame)\n        if (not unitFrame.ThreatIcon) then\n            unitFrame.ThreatIcon = unitFrame.healthBar:CreateTexture (nil, \"overlay\")\n        end\n    end\n    \n    function envTable.UpdateIndicator (unitFrame)\n        envTable.CreateIndicator (unitFrame)\n        \n        unitFrame.ThreatIcon:SetTexture (envTable.Texture)\n        Plater.SetAnchor (unitFrame.ThreatIcon, envTable.Anchor)\n        unitFrame.ThreatIcon:SetSize (unitFrame.healthBar:GetHeight(), unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateThreatState (unitFrame, unitId)\n        if (not unitFrame.ThreatIcon) then --if there's no icon created yet\n            return\n            \n        elseif (not Plater.IsInCombat()) then --not in combat\n            unitFrame.ThreatIcon:Hide()\n            return\n            \n        elseif (unitFrame.IsSelf) then --personal bar\n            unitFrame.ThreatIcon:Hide()\n            return\n            \n        elseif (envTable.OnlyWhenUsingNpcColor) then --must be using a npc color?\n            if (not unitFrame.UsingCustomColor) then\n                unitFrame.ThreatIcon:Hide()\n                return\n            end\n        end\n        \n        local isTanking, threatStatus, threatpct = UnitDetailedThreatSituation (\"player\", unitId)\n        \n        if (isTanking) then\n            if (envTable.PlayerRole == \"TANK\") then\n                unitFrame.ThreatIcon:Hide()\n            else\n                unitFrame.ThreatIcon:Show()\n                unitFrame.ThreatIcon:SetVertexColor (unpack (envTable.NameplateAggroColor))\n            end\n        else\n            if (envTable.PlayerRole == \"TANK\") then\n                unitFrame.ThreatIcon:Show()\n                unitFrame.ThreatIcon:SetVertexColor (unpack (envTable.NameplateNoAggroColor))                \n            else\n                unitFrame.ThreatIcon:Hide()                \n            end\n        end\n    end\n    \n    function envTable.UpdatePlayerRole (unitFrame)\n        local profile = Plater.db.profile\n        local role = Plater:GetPlayerRole()\n        \n        if (role == \"TANK\") then\n            envTable.PlayerRole = \"TANK\"\n            envTable.NameplateAggroColor = profile.tank.colors.aggro\n            envTable.NameplateNoAggroColor = profile.tank.colors.noaggro\n            \n        else\n            envTable.PlayerRole = \"DAMAGER\"\n            envTable.NameplateAggroColor = profile.dps.colors.aggro\n            envTable.NameplateNoAggroColor = profile.dps.colors.noaggro\n            \n        end        \n    end\n    \n    envTable.UpdatePlayerRole (unitFrame)\n    \nend",
},
["Prio"] = 33,
["Name"] = "Aggro Indicator",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["HooksTemp"] = {
},
["PlaterCore"] = 1,
["Icon"] = 132344,
["Options"] = {
},
},
{
["Enabled"] = true,
["Revision"] = 147,
["Options"] = {
},
["HooksTemp"] = {
},
["Author"] = "Izimode-Azralon",
["Time"] = 1755166681,
["Desc"] = "Adds a pixels perfect border around the cast bar.",
["Hooks"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder:Hide()\n    end    \nend",
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    \n    --hide the icon of the spell, may require /reload after changing\n    envTable.HideIcon = false\n    \n    --border settings\n    envTable.BorderThickness = 1.5\n    envTable.BorderColor = \"black\"\n    \n    --private\n    --create the border\n    if (not unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder = CreateFrame (\"frame\", nil, unitFrame.castBar, \"NamePlateFullBorderTemplate\")\n    end    \n    \n    --update the border\n    function envTable.UpdateBorder (unitFrame)\n        local castBar = unitFrame.castBar\n        \n        local r, g, b, a = DetailsFramework:ParseColors (envTable.BorderColor)\n        castBar.CastBarBorder:SetVertexColor (r, g, b, a)\n        \n        local size = envTable.BorderThickness\n        castBar.CastBarBorder:SetBorderSizes (size, size, size, size)\n        castBar.CastBarBorder:UpdateSizes()        \n        \n        if (envTable.HideIcon) then\n            castBar.Icon:Hide()\n        end\n        \n        castBar.CastBarBorder:Show()\n    end\n    \nend\n\n\n\n\n",
},
["Prio"] = 99,
["Name"] = "Cast Bar Border",
["PlaterCore"] = 1,
["LastHookEdited"] = "Constructor",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Icon"] = 133004,
["OptionsValues"] = {
},
},
{
["Enabled"] = true,
["Revision"] = 98,
["Options"] = {
},
["HooksTemp"] = {
},
["Author"] = "?????-Illidan",
["Name"] = "Buff Special Mod",
["Desc"] = "Format Buff Special icons like the regular aura icons.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --    if false then return end\n    \n    for _, iconFrame in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n        \n        unitFrame.ExtraIconFrame.options.show_text = true\n        \n        local profile = Plater.db.profile\n        \n        Plater.SetAnchor (iconFrame.CountdownText, profile.aura_timer_text_anchor)\n        Plater:SetFontSize (iconFrame.CountdownText, profile.aura_timer_text_size)\n        Plater:SetFontFace (iconFrame.CountdownText, profile.aura_timer_text_font)\n        \n        Plater.SetFontOutlineAndShadow (iconFrame.CountdownText, profile.aura_timer_text_outline, profile.aura_timer_text_shadow_color, profile.aura_timer_text_shadow_color_offset[1], profile.aura_timer_text_shadow_color_offset[2])\n        \n        iconFrame.Cooldown:SetEdgeTexture (profile.aura_cooldown_edge_texture)\n        iconFrame.Cooldown:SetReverse (profile.aura_cooldown_reverse)\n        iconFrame.Cooldown:SetDrawSwipe (profile.aura_cooldown_show_swipe)        \n        \n    end\n    \nend",
},
["Prio"] = 99,
["Time"] = 1754710658,
["PlaterCore"] = 1,
["LastHookEdited"] = "",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Icon"] = 136139,
["OptionsValues"] = {
},
},
{
["Enabled"] = true,
["Revision"] = 64,
["Options"] = {
},
["HooksTemp"] = {
},
["Author"] = "Ditador-Azralon",
["Name"] = "Unit Name Over Target Shading",
["Desc"] = "Set the unit name to be above the target shading texture.",
["Hooks"] = {
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    unitFrame.unitName:SetDrawLayer (\"overlay\", 7)\nend\n\n\n\n\n\n\n\n\n",
},
["Prio"] = 99,
["Time"] = 1754710639,
["PlaterCore"] = 1,
["LastHookEdited"] = "",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Icon"] = 237377,
["OptionsValues"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    function envTable.CheckAggro (unitFrame)\n        --if the player isn't in combat, ignore this check\n        if (not Plater.IsInCombat()) then\n            return\n        end\n        \n        --Disable in PVP\n        if (UnitPlayerControlled(unitFrame.unit))\n        then \n            return     \n        end\n        \n        --if this unit isn't in combat, ignore\n        if (not unitFrame.InCombat) then\n            return \n        end\n        \n        --player is a tank?\n        if (Plater.PlayerIsTank) then\n            --player isn't tanking this unit?\n            if (not unitFrame.namePlateThreatIsTanking) then\n                --check if a second tank is tanking it\n                if (Plater.ZoneInstanceType == \"raid\") then\n                    --return a list with the name of tanks in the raid\n                    local tankPlayersInTheRaid = Plater.GetTanks()\n                    \n                    --get the target name of this unit\n                    local unitTargetName = UnitName (unitFrame.targetUnitID)\n                    \n                    --check if the unit isn't targeting another tank in the raid and paint the color\n                    if (not tankPlayersInTheRaid [unitTargetName]) then\n                        Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                    else\n                        --another tank is tanking this unit\n                        --do nothing\n                    end\n                    \n                else\n                    Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                end\n            end\n            \n        else\n            --player is a dps or healer\n            if (unitFrame.namePlateThreatIsTanking) then\n                Plater.SetNameplateColor (unitFrame, Plater.db.profile.dps.colors.aggro)\n            end\n            \n        end        \n    end\nend\n\n\n\n\n\n\n",
},
["Time"] = 1754710654,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/id_wRWfKp/2",
["Icon"] = "Interface\\AddOns\\Plater\\media\\checked_64",
["Enabled"] = true,
["Revision"] = 66,
["semver"] = "1.0.1",
["Author"] = "Kastfall-Azralon",
["Desc"] = "When a mob is attacking you, force show the threat color. For tanks, force threat color if the mob is not attacking you.",
["Prio"] = 58,
["version"] = 2,
["PlaterCore"] = 1,
["Name"] = "Force Threat Color",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
["manualNameOverwrites"] = {
{
"Mordretha, the Endless Empress",
"Mordretha",
},
},
["nameLength"] = 10,
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.shortenNameplateName(unitId, unitFrame, modTable.config, envTable)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.shortenNameplateName(unitId, unitFrame, modTable.config, envTable)\nend",
["Initialization"] = "function (modTable)\n    local cache = {}\n    local concat = table.concat\n    local utf8Enabled = string.utf8len and string.utf8sub and true\n    \n    local utf8len = function(str)\n        if utf8Enabled then\n            return str:utf8len()\n        end\n        \n        local count = 0\n        for _ in str:gmatch(\"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") do\n            count = count + 1\n        end\n        \n        return count\n    end\n    \n    local utf8sub = function(str, from, to)\n        if utf8Enabled then\n            return str:utf8sub(from, to)\n        end\n        \n        local extracted = {}\n        local size = 0\n        local count = 0\n        for char in str:gmatch(\"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") do\n            count = count + 1\n            \n            if count >= from and count <= to then\n                size = size + 1\n                extracted[size] = char\n            end\n            \n            if count >= to then return concat(extracted) end\n        end\n        \n        return \"\"\n    end\n    \n    -- Left to right works in the following steps for \"The Best Warrior Linaori\":\n    -- T. Best Warrior Linaori\n    -- T.B. Warrior Linaori\n    -- T.B.W. Linaori\n    local reduceLeftToRight\n    reduceLeftToRight = function (leftPart, rightPart, lastPartLength, nameLength)\n        if not rightPart or utf8len(rightPart) == 0 then\n            return leftPart, rightPart\n        end\n        \n        -- 2 spaces added to the length after concat\n        if 2 + utf8len(leftPart) + utf8len(rightPart) + lastPartLength <= nameLength then\n            return leftPart .. \" \" .. rightPart, \"\"\n        end\n        \n        local firstWord, remainingRightPart = rightPart:match(\"^([^ ]*)[ ](.*)$\")\n        if not firstWord then\n            firstWord = rightPart\n            remainingRightPart = \"\"\n        end\n        leftPart = leftPart .. utf8sub(firstWord, 1, 1) .. \".\"\n        \n        return reduceLeftToRight(leftPart, remainingRightPart, lastPartLength, nameLength)\n    end\n    \n    -- Right to left works in the following steps for \"The Best Warrior Linaori\":\n    -- The Best W. Linaori\n    -- The B.W. Linaori\n    -- T.B.W. Linaori\n    local reduceRightToLeft\n    reduceRightToLeft = function (leftPart, rightPart, lastPartLength, nameLength)\n        if not leftPart or utf8len(leftPart) == 0 then\n            return leftPart, rightPart\n        end\n        \n        -- 2 spaces added to the length after concat\n        if 2 + utf8len(leftPart) + utf8len(rightPart) + lastPartLength <= nameLength then\n            return \"\", leftPart .. \" \" .. rightPart\n        end\n        \n        local remainingLeftPart, lastWord = leftPart:match(\"^(.*)[ ]([^ ]*)$\")\n        \n        if not remainingLeftPart then\n            remainingLeftPart = \"\"\n            lastWord = leftPart\n        end\n        \n        rightPart = utf8sub(lastWord, 1, 1) .. \".\" .. rightPart\n        \n        return reduceRightToLeft(remainingLeftPart, rightPart, lastPartLength, nameLength)\n    end\n    \n    local cutOffName = function (wholeName, config)\n        if config.noSplitCutoff then\n            return utf8sub(wholeName, 1, config.nameLength)\n        end\n        \n        return wholeName\n    end\n    \n    local shorten = function (unitId, nameplateUnitName, config, nameLength)\n        -- let the player overwrite the name regardless of length based on the NPC name\n        local manualNameOverwrite = config.manualNameOverwrites[nameplateUnitName]\n        if manualNameOverwrite then\n            return manualNameOverwrite\n        end\n        \n        -- let the player overwrite the name regardless of length based on the NPC ID\n        local npcId = select(6, strsplit(\"-\", UnitGUID(unitId)))\n        local manualNpcIdOverwrite = config.manualNameOverwrites[npcId]\n        if manualNpcIdOverwrite then\n            return manualNpcIdOverwrite\n        end\n        \n        -- the original name is short enough already\n        if utf8len(nameplateUnitName) <= nameLength then\n            return nameplateUnitName\n        end\n        \n        -- Naming often implies \"<name>, <title>\" or \"<title> <name>\"\n        if nameplateUnitName:find(\",\") then\n            -- assumed that \",\" implies a title, and try to strip them of their title\n            local possibleName = nameplateUnitName:match(\"^(.*)[,][^,]*$\")\n            \n            if possibleName then\n                if utf8len(possibleName) <= nameLength then\n                    return possibleName\n                end\n                \n                -- in case of longer names: \"Linaori the best fury warrior ever, of the deeps\n                nameplateUnitName = possibleName\n            end\n        end\n        \n        -- Forsworn Squad-Leader -> Forsworn Squad Leader\n        -- Squad-Leader of the Forsworn -> Squad Leader of the Forsworn\n        if config.hyphenAsSpace then\n            local lastPart\n            \n            -- keep \"Forsworn Squad-Leader\" as is, while still replacing \"Squad-Leader of the Forsworn\"\n            if config.keepHyphenInLastName then\n                local _, spaces = nameplateUnitName:gsub(\" \", \"\")\n                if spaces > 0 then\n                    nameplateUnitName, lastPart = nameplateUnitName:match(\"^(.*)[ ]([^ ]*)$\")\n                end\n            end\n            \n            nameplateUnitName = nameplateUnitName:gsub(\"-\", \" \")\n            if lastPart then\n                nameplateUnitName = nameplateUnitName .. \" \" .. lastPart\n            end\n        end\n        \n        -- amount of times we can check if the name needs replacing\n        local _, occurrences = nameplateUnitName:gsub(\" \", \"\")\n        \n        -- no spaces left to split on, just return whatever can be made of it\n        if occurrences == 0 then\n            return cutOffName(nameplateUnitName, config)\n        end\n        \n        local nameToShorten, nameToKeep, nameToKeepLength\n        if config.keepRightSide then\n            -- we always want the last name if possible\n            -- example: Cleave Training Dummy -> Dummy\n            nameToShorten, nameToKeep = nameplateUnitName:match(\"^(.*)[ ]([^ ]*)$\")\n            nameToKeepLength = utf8len(nameToKeep)\n        else\n            -- we always want the first name if possible\n            -- example: Cleave Training Dummy -> Cleave\n            nameToKeep, nameToShorten = nameplateUnitName:match(\"^([^ ]*)[ ](.*)$\")\n            nameToKeepLength = utf8len(nameToKeep)\n        end\n        \n        -- in case the name to keep is too long, just use that\n        if nameToKeepLength > nameLength or not config.abbreviate then\n            return cutOffName(nameToKeep, config)\n        end\n        \n        local shortenedName\n        if config.abbreviateLeftToRight then\n            shortenedName, _ = reduceLeftToRight(\"\", nameToShorten, nameToKeepLength, nameLength)\n        else\n            _, shortenedName = reduceRightToLeft(nameToShorten, \"\", nameToKeepLength, nameLength)\n        end\n        \n        if config.keepRightSide then\n            return shortenedName .. \" \" .. nameToKeep\n        else\n            return nameToKeep .. \" \" .. shortenedName\n        end\n    end\n    \n    local tryCache = function (unitId, nameplateUnitName, config, nameLength)\n        if cache[nameLength] == nil then\n            cache[nameLength] = {}\n        end\n        \n        if cache[nameLength][nameplateUnitName] == nil then\n            cache[nameLength][nameplateUnitName] = shorten(unitId, nameplateUnitName, config, nameLength)\n        end\n        \n        return cache[nameLength][nameplateUnitName]\n    end\n    \n    modTable.shortenNameplateName = function (unitId, unitFrame, config)\n        if not unitId or not unitFrame.namePlateUnitName then return end\n        \n        if config.ignorePlayers and unitFrame.isPlayer then return end\n        if config.ignoreFriendlyNpcNameplate and unitFrame.actorType == \"friendlynpc\" then return end\n        if config.ignoreObjectNameplate and unitFrame.isObject then return end\n        \n        local name = tryCache(unitId, unitFrame.namePlateUnitName, config, config.nameLength)\n        \n        if name == unitFrame.namePlateUnitName then return end\n        \n        unitFrame.namePlateUnitName = name\n        unitFrame.PlateFrame.namePlateUnitName = name\n        unitFrame.healthBar.unitName:SetText(name)\n        unitFrame.ActorNameSpecial:SetText(name)\n    end\n    \n    modTable.shortenCastBarName = function (unitId, unitFrame, config)\n        if not unitId then return end\n        \n        local castBar = unitFrame.castBar\n        if not castBar.unit then return end\n        local targetUnitId = castBar.unit .. \"target\"\n        \n        if not UnitExists(targetUnitId) then return end\n        \n        local isPlayer = UnitIsPlayer(targetUnitId)\n        if config.ignorePlayers and isPlayer then return end\n        if config.ignoreFriendlyNpcCastBar and not isPlayer and UnitIsFriend(\"player\", targetUnitId) then return end\n        \n        local targetName = castBar.FrameOverlay.TargetName\n        local oldName = targetName:GetText()\n        if not oldName then return end\n        \n        local newName = tryCache(unitId, oldName, config, config.castBarNameLength)\n        if oldName == newName then return end\n        \n        targetName:SetText(newName)\n    end\nend",
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.shortenCastBarName(unitId, unitFrame, modTable.config, envTable)\nend\n\n\n",
},
["Time"] = 1754710640,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/name-shortener-for-plater/18",
["Icon"] = 134331,
["Enabled"] = true,
["Revision"] = 1025,
["semver"] = "1.1.4",
["Author"] = "Linalori-Ragnaros",
["Desc"] = "Tries to make sense of long names",
["Prio"] = 99,
["Name"] = "Smart Name Shortener",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "The length of the name can be on nameplates before cutoff is applied",
["Min"] = 1,
["Key"] = "nameLength",
["Value"] = 18,
["Name"] = "Nameplate name length",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "The length of the name can be on the cast bar before cutoff is applied",
["Min"] = 1,
["Key"] = "castBarNameLength",
["Value"] = 15,
["Name"] = "Cast bar name length",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 4,
["Name"] = "Treat hyphens (-) as space",
["Value"] = true,
["Key"] = "hyphenAsSpace",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Also split names on hyphens instead of just the whole word",
},
{
["Type"] = 4,
["Name"] = "Keep hyphen in the last name",
["Value"] = true,
["Key"] = "keepHyphenInLastName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When hyphens are treated as spaces, keep the last part of the name intact",
},
{
["Type"] = 4,
["Name"] = "Cutoff when no split can be done",
["Value"] = true,
["Key"] = "noSplitCutoff",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When the smallest word is still longer than \"Name length\", cut it off to the name length. If unchecked, will return the full name",
},
{
["Type"] = 4,
["Name"] = "Abbreviate names (W.O. Warcraft)",
["Value"] = true,
["Key"] = "abbreviate",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If unchecked, nothing is shown instead",
},
{
["Type"] = 4,
["Name"] = "Abbreviate left to right",
["Value"] = false,
["Key"] = "abbreviateLeftToRight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Where to start abbreviation. (ltr) \"T. Best Linaori\" vs (rtl) \"The B. Linaori\"",
},
{
["Type"] = 4,
["Name"] = "Keep right side",
["Value"] = true,
["Key"] = "keepRightSide",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Keep the right side instead of left side of the name. Right side: \"T.B. Warrior\". Left side: \"The B.L.\"",
},
{
["Type"] = 4,
["Name"] = "Ignore Players",
["Value"] = false,
["Key"] = "ignorePlayers",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore player characters",
},
{
["Type"] = 4,
["Name"] = "Ignore Friendly NPC nameplate",
["Value"] = false,
["Key"] = "ignoreFriendlyNpcNameplate",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore friendly NPC on the nameplate",
},
{
["Type"] = 4,
["Name"] = "Ignore Object Nameplate",
["Value"] = true,
["Key"] = "ignoreObjectNameplate",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore nameplates from objects",
},
{
["Type"] = 4,
["Name"] = "Ignore Friendly NPC cast bar",
["Value"] = false,
["Key"] = "ignoreFriendlyNpcCastBar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore friendly NPC on the cast bar",
},
{
["Type"] = 7,
["Name"] = "Manual name overwrites",
["Value"] = {
{
"Mordretha, the Endless Empress",
"Mordretha",
},
},
["Key"] = "manualNameOverwrites",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "If a name matches the key, overwrite it with value and don't guess anything after",
},
},
["HooksTemp"] = {
},
["version"] = 18,
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)    \n    local inCombat = self.InCombat\n    local isTanking = self.namePlateThreatIsTanking\n    local isTapDenied = UnitIsTapDenied(unitId)\n    \n    if inCombat and not isTanking and not isTapDenied then\n        local exists = UnitExists(self.targetUnitID)\n        if exists then\n            local role = UnitGroupRolesAssigned(self.targetUnitID)\n            local isTank = (role == \"TANK\")\n            \n            if not isTank then\n                local guid = UnitGUID(self.targetUnitID)\n                if envTable.shallHighlight(self, guid) then\n                    Plater.SetNameplateColor(unitFrame, envTable.color)\n                end\n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    envTable.color = \"#57f609\"\n    \n    envTable.npcs = {\n        [61056] = \"Greater Earth Elemental\",\n        [61146] = \"Black Ox Statue\",\n        [95072] = \"Earth Elemental\",\n        [103822] = \"Treant\"\n    }\n    \n    envTable.rules = {\n        [\"Pet\"] = true,\n        [\"Creature\"] = function(npcID)\n            return (envTable.npcs[npcID] ~= nil)\n        end\n    }\n    \n    envTable.getTypeAndID = function(guid)\n        local unitType, _, _, _, _, npcID = strsplit(\"-\", guid)\n        return unitType, tonumber(npcID or \"0\") or 0\n    end\n    \n    envTable.shallHighlight = function(self, guid)\n        local unitType, npcID = envTable.getTypeAndID(guid)\n        if unitType then\n            local value = envTable.rules[unitType]\n            if value then\n                if type(value) == \"boolean\" then\n                    return value\n                elseif type(value) == \"function\" then\n                    return value(npcID)\n                end\n            end -- value\n        end -- unitType\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1754813607,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
["Enabled"] = true,
["TANK"] = true,
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 627607,
["Enabled"] = true,
["Revision"] = 174,
["semver"] = "",
["Author"] = "Brewdux-Tarren Mill",
["Desc"] = "Recolors the nameplate, if you the unit is tanked by a pet.",
["Prio"] = 50,
["Name"] = "Pet Threat Highlighter",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
},
["Options"] = {
},
},
{
["OptionsValues"] = {
["borderThickness"] = 1,
["readyColor"] = {
0,
1,
0,
1,
},
["defaultBorderToggle"] = true,
["interruptIndicatorColor"] = {
0,
1,
0,
1,
},
},
["LastHookEdited"] = "Cast Update",
["UID"] = "0x661711831a72796",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if(unitFrame.ActorType ~= \"friendlyplayer\" and unitFrame.ActorType ~= \"friendlynpc\"  ) then\n        \n        if self.IsInterrupted then\n            Plater.SetCastBarColor(unitFrame, modTable.config[\"interruptedColor\"])\n            return\n        end\n        \n        local interruptCooldownStart, duration = nil\n        local interruptEndTime = nil\n        \n        if envTable.kickId ~= nil then\n            local cd = C_Spell.GetSpellCooldown(envTable.kickId)\n            interruptCooldownStart, duration = cd.startTime,  cd.duration\n            interruptEndTime =  interruptCooldownStart + duration\n            local   interruptRemainingCooldown = max ( interruptEndTime - GetTime(), 0)\n            local  castRemainingCooldown = max (unitFrame.castBar.spellEndTime - GetTime(), 0)\n            \n            if interruptCooldownStart  ~= 0 then\n                if ( interruptRemainingCooldown + modTable.config[\"reactionTime\"] - castRemainingCooldown ) < 0 then\n                    interruptCooldownStart  = -1\n                end\n            end\n        else\n            interruptCooldownStart = 1\n        end\n        \n        envTable.updateBorder(interruptCooldownStart,  interruptEndTime)\n    end\n    \nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if unitFrame.castBar.interruptIsUpIndicator then\n        unitFrame.castBar. interruptIsUpIndicator:Hide()\n    end\n    envTable.removeBorder()\nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.spec = GetSpecialization()\nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Only proceed if the unit is an enemy\n    if unitFrame.ActorType ~= \"friendlyplayer\" and unitFrame.ActorType ~= \"friendlynpc\" then\n        envTable.spec = GetSpecialization()\n        \n        -- Check if the class is not Warlock (class ID 9)\n        if envTable.class ~= 9 then\n            -- Assign kick ability based on class and specialization\n            envTable.kickId = modTable.kickIndex[envTable.class][envTable.spec]\n        else\n            -- Warlock logic for interrupt abilities\n            if envTable.spec == 1 or envTable.spec == 3 then -- Affliction or Destruction\n                if IsSpellKnown(19647, true) then -- Felhunter present\n                    envTable.kickId = 119910 -- Spell Lock\n                else\n                    -- Check for Grimoire of Sacrifice\n                    local spellInfo = C_Spell.GetSpellInfo(108503) -- get SpellInfo for \"108503\" what is \"Grimoire of Sacrifice\"\n                    local spellName = spellInfo and spellInfo.name -- get \"localized\" name for \"Grimoire of Sacrifice\"\n                    if spellName then\n                        local auraData = C_UnitAuras.GetAuraDataBySpellName(\"player\", spellName)\n                        \n                        -- Confirm the player has the \"Grimoire of Sacrifice\" buff\n                        if auraData and auraData.isHelpful and auraData.sourceUnit == \"player\" then\n                            envTable.kickId = 132409 -- Spell Lock\n                        else\n                            envTable.kickId = nil\n                        end\n                    end\n                end\n                \n            elseif envTable.spec == 2 then -- Demonology\n                if IsSpellKnown(89766, true) then -- Felguard present\n                    envTable.kickId = 119914\n                elseif IsSpellKnown(19647, true) then -- Felhunter present\n                    envTable.kickId = 119910\n                else \n                    envTable.kickId = nil \n                end\n            end\n        end\n    end\nend",
["Initialization"] = "function (modTable)\n    modTable.kickIndex = {\n        [1] = {[1] = 6552, [2] = 6552, [3] = 6552}, -- Warrior\n        [2] = {[1] = 96231, [2] = 96231, [3] = 96231}, -- Paladin\n        [3] = {[1] = 147362, [2] = 147362, [3] = 187707}, -- Hunter\n        [4] = {[1] = 1766, [2] = 1766, [3] = 1766} ,-- Rogue\n        [5] = {[1] = nil, [2] = nil, [3] = 15487}, -- Priest\n        [6] = {[1] = 47528, [2] = 47528, [3] = 47528}, -- Death Knight\n        [7] = {[1] = 57994, [2] = 57994, [3] = 57994}, -- Shaman\n        [8] = {[1] = 2139, [2] = 2139, [3] = 2139}, -- Mage\n        [10] = {[1] = 116705, [2] = 116705, [3] = 116705}, -- Monk\n        [11] = {[1] = 78675, [2] = 106839, [3] = 106839, [4] = 106839}, -- Druid\n        [12] = {[1] = 183752, [2] = 183752}, -- Demon Hunter\n        [13] = {[1] = 351338, [2] = 351338, [3] = 351338} -- Evoker\n    }\n    \nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    self.ThrottleUpdate = 0.016\n    \n    local _, _, class = UnitClass(\"player\")\n    envTable.class = class\n    \n    local dummyFrame =  nil\n    if not dummyFrame then\n        dummyFrame = CreateFrame (\"frame\", nil, unitFrame.castBar)\n        dummyFrame:SetPoint(\"TOPLEFT\",0+modTable.config[\"borderThickness\"],0-modTable.config[\"borderThickness\"])\n        dummyFrame:SetPoint(\"BOTTOMRIGHT\",0-modTable.config[\"borderThickness\"],0+modTable.config[\"borderThickness\"])\n        dummyFrame:Show()\n    end\n    \n    function envTable.showBorder(r,g,b,a)\n        unitFrame.castBar.CastBarBorder:SetVertexColor (r, g, b, a)\n        unitFrame.castBar.CastBarBorder:Show()\n    end\n    \n    function envTable.removeBorder()\n        if modTable.config[\"defaultBorderToggle\"] then\n            local  r, g, b, a = Plater:ParseColors (modTable.config[\"defaultColor\"])\n            envTable.showBorder(r,g,b,a)\n        else\n            unitFrame.castBar.CastBarBorder:SetVertexColor (255, 255, 255, 0)\n        end\n    end\n    \n    \n    if not unitFrame.castBar.CastBarBorder then\n        unitFrame.castBar.CastBarBorder = CreateFrame (\"frame\", nil, dummyFrame, \"NamePlateFullBorderTemplate\")\n        \n        unitFrame.castBar.CastBarBorder:SetBorderSizes(modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"])\n        unitFrame.castBar.CastBarBorder:UpdateSizes()\n    end\n    \n    if modTable.config[\"defaultBorderToggle\"] then\n        local r, g, b, a = Plater:ParseColors (modTable.config[\"defaultColor\"])\n        envTable.showBorder(r,g,b,a)\n    else\n        unitFrame.castBar.CastBarBorder:SetVertexColor (255, 255, 255, 0)\n    end\n    \n    function envTable.showIndicatorWhenInterruptUp(interruptEndTime)\n        \n        if not unitFrame.castBar.interruptIsUpIndicator then\n            unitFrame.castBar.interruptIsUpIndicator = CreateFrame (\"frame\", nil, unitFrame.castBar)\n            unitFrame.castBar.interruptIsUpIndicator:SetWidth(1)\n            unitFrame.castBar.interruptIsUpIndicator:SetHeight(unitFrame.castBar:GetHeight() - (2*modTable.config[\"borderThickness\"]))\n            local t = unitFrame.castBar.interruptIsUpIndicator:CreateTexture(nil,\"OVERLAY\")\n            t:SetTexture(\"Interface\\\\AddOns\\\\Plater\\\\images\\\\regular_white.blp\")\n            t:SetAllPoints(unitFrame.castBar.interruptIsUpIndicator)\n            local r,g,b,a = Plater:ParseColors(modTable.config[\"interruptIndicatorColor\"])\n            t:SetVertexColor(r,g,b,a)\n            unitFrame.castBar.interruptIsUpIndicator.texture = t\n            \n        end\n        \n        local isUpIndicatorLocation = (interruptEndTime - unitFrame.castBar.spellStartTime) / unitFrame.castBar.maxValue\n        unitFrame.castBar.interruptIsUpIndicator:SetPoint(\"CENTER\", unitFrame.castBar.CastBarBorder, \"LEFT\", isUpIndicatorLocation *  unitFrame.castBar:GetWidth() , 0)\n        \n        if unitFrame.castBar.channeling then\n            isUpIndicatorLocation = 1 - isUpIndicatorLocation\n        end\n        \n        unitFrame.castBar. interruptIsUpIndicator:Show()\n        \n    end\n    \n    function envTable.updateBorder(interruptCooldownStart,  interruptEndTime)\n        \n        local r, g, b, a = nil\n        \n        if unitFrame.castBar.canInterrupt then\n            if  interruptCooldownStart > 0 then\n                envTable.removeBorder()\n            elseif  interruptCooldownStart < 0 then\n                r, g, b, a = DetailsFramework:ParseColors (modTable.config[\"willBeReadyColor\"])\n                envTable.showBorder(r,g,b,a)\n                \n                if modTable.config[\"castBarIndicatorToggle\"] then\n                    envTable.showIndicatorWhenInterruptUp(interruptEndTime)\n                end\n                \n            else\n                r, g, b, a = DetailsFramework:ParseColors (modTable.config[\"readyColor\"])\n                envTable.showBorder(r,g,b,a)\n                if unitFrame.castBar.interruptIsUpIndicator then\n                    unitFrame.castBar. interruptIsUpIndicator:Hide()\n                end\n            end\n        else\n            --if a spell would turn from interruptable to not interruptable\n            envTable.removeBorder()\n        end\n        \n    end\n    \nend",
},
["Time"] = 1755109654,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 608940,
["Enabled"] = false,
["Revision"] = 968,
["semver"] = "",
["Author"] = "Maeliin-Silvermoon",
["Desc"] = "Changes the color of the nameplate castbar border based on the current cooldown of the player's interrupt.",
["Prio"] = 35,
["Name"] = "Quazii Interrupt CD Indicator",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
},
["Options"] = {
{
["Type"] = 6,
["Name"] = "qwdqwd",
["Value"] = 0,
["Key"] = "qweqew",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 7",
["Value"] = "IMPORTANT: UI Reload is needed after changing settings below",
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank space",
["Value"] = 0,
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Interrupt ready color",
["Value"] = {
0,
1,
0,
1,
},
["Key"] = "readyColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The color of the cast bar border when your interrupt is ready.",
},
{
["Type"] = 1,
["Name"] = "Will be ready color",
["Value"] = {
1,
0.35686275362968,
0,
1,
},
["Key"] = "willBeReadyColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The color of the cast bar border when your interrupt will be ready intime.",
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Value of how many seconds the interrupt has to be off cooldown before the cast ends to indicate that it will be ready in time.",
["Min"] = 0,
["Name"] = "Reaction time",
["Value"] = 0.3,
["Key"] = "reactionTime",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Set border thickness in pixel",
["Min"] = 0,
["Name"] = "Border thickness",
["Value"] = 0.5,
["Key"] = "borderThickness",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Name"] = "blank space",
["Value"] = 0,
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Enable default border",
["Value"] = false,
["Key"] = "defaultBorderToggle",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Check to enable a border around your cast bar by default. This border is shown always, even when your interrupt is on cd.",
},
{
["Type"] = 1,
["Name"] = "Default Border Color",
["Value"] = {
0,
0,
0,
1,
},
["Key"] = "defaultColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The default border color",
},
{
["Type"] = 6,
["Name"] = "blank space",
["Value"] = 0,
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Exact indicator in cast bar",
["Value"] = true,
["Key"] = "castBarIndicatorToggle",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Activate to have an indicator inside the cast bar that shows the exact moment when your interrupt will come up.",
},
{
["Type"] = 1,
["Name"] = "Indicator color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "interruptIndicatorColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The color of the indicator inside the castbar for when the cast is going to be up.",
},
},
},
{
["OptionsValues"] = {
["debuff1"] = "207771",
["debuff2"] = "000000",
["borderWidth"] = 1,
["color1"] = {
1,
1,
1,
1,
},
},
["LastHookEdited"] = "",
["UID"] = "0x67dbf822de10633",
["Hooks"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if unitFrame.healthBar and unitFrame.healthBar.border then\n        unitFrame.healthBar.border:SetVertexColor(0, 0, 0, 1)\n    end\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Reset color if no debuffs are found\n    local foundDebuff = false\n    local highestPriorityColor = nil\n    local highestPriorityIndex = 0\n    \n    -- Check each buff/debuff on the unit\n    for i = 1, #unitFrame.BuffFrame.PlaterBuffList do\n        local auraIconFrame = unitFrame.BuffFrame.PlaterBuffList[i]\n        \n        if auraIconFrame:IsShown() then\n            local currentSpellId = auraIconFrame.SpellId\n            \n            -- Check each configured debuff\n            for index = 1, 7 do\n                local debuffKey = \"debuff\" .. index\n                local colorKey = \"color\" .. index\n                \n                local spellIdToCheck = tonumber(modTable.config[debuffKey])\n                \n                if spellIdToCheck and currentSpellId == spellIdToCheck then\n                    -- If this is a higher priority debuff (higher index), use its color\n                    if index > highestPriorityIndex then\n                        highestPriorityIndex = index\n                        highestPriorityColor = modTable.config[colorKey]\n                        foundDebuff = true\n                    end\n                end\n            end\n        end\n    end\n    \n    -- Update the nameplate border color if we found a matching debuff\n    if foundDebuff and highestPriorityColor then\n        modTable.UpdateColor(unitFrame, highestPriorityColor)\n        if unitFrame.healthBar and unitFrame.healthBar.border then\n            unitFrame.healthBar.border:SetBorderSizes(modTable.config.borderWidth)\n            unitFrame.healthBar.border:UpdateSizes()\n        end\n    else\n        -- Reset to default border color if no debuffs are found\n        if unitFrame.healthBar and unitFrame.healthBar.border then\n            unitFrame.healthBar.border:SetVertexColor(0, 0, 0, 1)\n            unitFrame.healthBar.border:SetBorderSizes(1.5)\n            unitFrame.healthBar.border:UpdateSizes()\n        end\n    end\nend",
["Initialization"] = "function (modTable)\n    -- Initialize tracking variables\n    modTable.debuffStates = {}\n    \n    -- Function to update the nameplate border color based on debuff ID\n    function modTable.UpdateColor(unitFrame, color)\n        if not unitFrame then return end\n        -- Unpack the color table into individual r,g,b,a values\n        local r, g, b, a = unpack(color)\n        if unitFrame.healthBar and unitFrame.healthBar.border then\n            unitFrame.healthBar.border:SetVertexColor(r, g, b, a)\n        end\n    end\n    \n    -- Setup the options panel\n    modTable.options = {\n       \n        -- Debuff-Color Pair 1\n        {\n            type = \"text\",\n            key = \"debuff1\",\n            name = \"Debuff ID #1\",\n            desc = \"Enter the spell ID of the first debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color1\",\n            name = \"Border Color #1\",\n            desc = \"Choose the border color for debuff #1\",\n            value = {1, 0, 0, 1}\n        },\n        -- Debuff-Color Pair 2\n        {\n            type = \"text\",\n            key = \"debuff2\",\n            name = \"Debuff ID #2\",\n            desc = \"Enter the spell ID of the second debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color2\",\n            name = \"Border Color #2\",\n            desc = \"Choose the border color for debuff #2\",\n            value = {0, 1, 0, 1}\n        },\n        -- Debuff-Color Pair 3\n        {\n            type = \"text\",\n            key = \"debuff3\",\n            name = \"Debuff ID #3\",\n            desc = \"Enter the spell ID of the third debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color3\",\n            name = \"Border Color #3\",\n            desc = \"Choose the border color for debuff #3\",\n            value = {0, 0, 1, 1}\n        },\n        -- Debuff-Color Pair 4\n        {\n            type = \"text\",\n            key = \"debuff4\",\n            name = \"Debuff ID #4\",\n            desc = \"Enter the spell ID of the fourth debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color4\",\n            name = \"Border Color #4\",\n            desc = \"Choose the border color for debuff #4\",\n            value = {1, 1, 0, 1}\n        },\n        -- Debuff-Color Pair 5\n        {\n            type = \"text\",\n            key = \"debuff5\",\n            name = \"Debuff ID #5\",\n            desc = \"Enter the spell ID of the fifth debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color5\",\n            name = \"Border Color #5\",\n            desc = \"Choose the border color for debuff #5\",\n            value = {1, 0, 1, 1}\n        },\n        -- Debuff-Color Pair 6\n        {\n            type = \"text\",\n            key = \"debuff6\",\n            name = \"Debuff ID #6\",\n            desc = \"Enter the spell ID of the sixth debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color6\",\n            name = \"Border Color #6\",\n            desc = \"Choose the border color for debuff #6\",\n            value = {0, 1, 1, 1}\n        },\n        -- Debuff-Color Pair 7\n        {\n            type = \"text\",\n            key = \"debuff7\",\n            name = \"Debuff ID #7\",\n            desc = \"Enter the spell ID of the seventh debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color7\",\n            name = \"Border Color #7\",\n            desc = \"Choose the border color for debuff #7\",\n            value = {0.5, 0, 1, 1}\n        }\n    }\nend",
},
["Time"] = 1754710674,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["url"] = "",
["Icon"] = 2065559,
["Enabled"] = false,
["Revision"] = 473,
["semver"] = "",
["Author"] = "Blindmonkas-Tichondrius",
["Desc"] = "When a tracked debuff is active on a target, their nameplate border will change to your chosen color.",
["Prio"] = 26,
["Name"] = "Quazii Debuff Border Color",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
},
["Options"] = {
{
["Type"] = 3,
["Key"] = "debuff1",
["Value"] = "000000",
["Name"] = "Debuff #1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #1",
},
{
["Type"] = 1,
["Key"] = "color1",
["Value"] = {
0.6666666865348816,
1,
0,
1,
},
["Name"] = "Color #1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #1",
},
{
["Type"] = 3,
["Key"] = "debuff2",
["Value"] = "000000",
["Name"] = "Debuff #2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #2",
},
{
["Type"] = 1,
["Name"] = "Color #2",
["Value"] = {
1,
0.501960813999176,
0,
1,
},
["Key"] = "color2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #2",
},
{
["Type"] = 3,
["Name"] = "Debuff #3",
["Value"] = "000000",
["Key"] = "debuff3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #3",
},
{
["Type"] = 1,
["Key"] = "color3",
["Value"] = {
0,
0.7019608020782471,
0.5254902243614197,
1,
},
["Name"] = "Color #3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #3",
},
{
["Type"] = 3,
["Key"] = "debuff4",
["Value"] = "000000",
["Name"] = "Debuff #4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #4",
},
{
["Type"] = 1,
["Name"] = "Color #4",
["Value"] = {
0.5882353186607361,
0.294117659330368,
0,
1,
},
["Key"] = "color4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #4",
},
{
["Type"] = 3,
["Name"] = "Debuff #5",
["Value"] = "000000",
["Key"] = "debuff5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #5",
},
{
["Type"] = 1,
["Key"] = "color5",
["Value"] = {
0.6901960968971252,
0.6901960968971252,
0.6901960968971252,
1,
},
["Name"] = "Color #5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #5",
},
{
["Type"] = 3,
["Key"] = "debuff6",
["Value"] = "000000",
["Name"] = "Debuff #6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #6",
},
{
["Type"] = 1,
["Name"] = "Color #6",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "color6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #6",
},
{
["Type"] = 3,
["Name"] = "Debuff #7",
["Value"] = "000000",
["Key"] = "debuff7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #7",
},
{
["Type"] = 1,
["Key"] = "color7",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Color #7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #7",
},
{
["Type"] = 2,
["Max"] = 15,
["Desc"] = "Increase size of colored border here.",
["Min"] = 1,
["Name"] = "Border Size",
["Value"] = 1,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "borderWidth",
},
},
},
{
["Enabled"] = false,
["Revision"] = 166,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["LastHookEdited"] = "",
["Author"] = "Deafndk-Tichondrius",
["PlaterCore"] = 1,
["UID"] = "0x67e3cb5c6e405d5",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.SetNameplateColors()\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --[[ ==== HOW TO USE THIS QUAZII  MOD ====\n    \n    This mod changes nameplate and border colors based on combinations of debuffs on the target.\n    \n    === BASIC SETUP ===\n    1. Add your debuff combinations to the \"matchMultipleBuffs\" table below\n    2. Each combo needs \"auras\" array with spell IDs to detect\n    3. You can use idTip like I recommended in the video to identify the debuff ID to track \n    \n    === CUSTOMIZATION OPTIONS ===\n    For each debuff combination, you can set:\n    \n    - nameplateColor: Changes the color of the entire nameplate\n                      Remove this line to keep default nameplate color\n    \n    - borderColor: Changes ONLY the border color\n                   Remove this line to keep default border color\n    \n    - textColor: Changes ONLY the name text color\n                 Remove this line to keep default text color (white)\n    \n    You can use any combination of these options. For example:\n    \n    -- Change only nameplate color:\n    { \n        auras = {34914, 589},\n        nameplateColor = \"blue\",\n    }\n    \n    -- Change only border color:\n    { \n        auras = {34914, 589},\n        borderColor = \"red\",\n    }\n    \n    -- Change only text color:\n    { \n        auras = {34914, 589},\n        textColor = \"yellow\",\n    }\n    \n    -- Change border and text to different colors:\n    { \n        auras = {34914, 589},\n        borderColor = \"red\",\n        textColor = \"yellow\",\n    }\n    \n    -- Change all three elements:\n    { \n        auras = {34914, 589},\n        nameplateColor = \"blue\",\n        borderColor = \"red\",\n        textColor = \"yellow\",\n    }\n    \n    === COLOR FORMATS ===\n    You can use any of these formats for colors:\n    \n    1. Plater color names: \"red\", \"blue\", \"violet\", etc.\n    2. Hex colors: \"#FF0000\" (red), \"#00FF00\" (green), etc.\n    3. RGB/RGBA tables: {1, 0, 0} (red), {0, 1, 0, 0.5} (semi-transparent green)\n    \n    === PRIORITY SYSTEM ===\n    The FIRST matching combination in the list is used! \n    Put more specific combinations (with more debuffs) at the TOP of the list.\n    \n    For example, if you want Moonfire + Sunfire + Solar Beam to be white, but Moonfire + Sunfire to be purple:\n    1. Put the Moonfire + Sunfire + Solar Beam combo FIRST\n    2. Put the Moonfire + Sunfire combo SECOND\n    \n    === EXAMPLES ===\n    Balance Example:\n    { \n        auras = {164812, 164815, 81261}, -- Moonfire + Sunfire + Solar Beam\n        nameplateColor = \"#ff8000\",    -- Orange Color\n        borderColor = \"violet\",        -- Purple border\n    }\n    \n    --]]\n    \n    envTable.matchMultipleBuffs = {\n        { \n            auras = {164812, 164815, 81261}, -- Moonfire + Sunfire + Solar Beam\n            nameplateColor = \"#ff8000\",    -- Orange Color\n            borderColor = \"violet\",        -- Purple border\n        },\n        { \n            auras = {164812, 164815},         -- Moonfire + Sunfire\n            nameplateColor = \"#b9a2ff\",    -- Light Purple Color\n            borderColor = \"#ff8000\",          -- Orange border\n        },\n        -- Add more combinations below\n    }\n    \n    -- DO NOT TOUCH\n    local DF = _G [\"DetailsFramework\"]\n    \n    -- Function to match multiple debuffs and set colors\n    function envTable.matchMultiple(unitFrame)\n        for _, v in ipairs(envTable.matchMultipleBuffs) do\n            local match = true\n            for _, aura in ipairs(v.auras) do\n                if not Plater.NameplateHasAura (unitFrame, aura) then\n                    match = false\n                    break\n                end\n            end\n            \n            if match then\n                if v.nameplateColor then\n                    Plater.SetNameplateColor (unitFrame, v.nameplateColor)\n                end\n                if v.borderColor then\n                    Plater.SetBorderColor (unitFrame, v.borderColor)\n                end\n                if v.textColor then\n                    local nameString = unitFrame.healthBar.unitName\n                    DF:SetFontColor (nameString, v.textColor)\n                end\n                return\n            else\n                -- Reset colors to default if no matches\n                local npcColor = Plater.GetNpcColor (unitFrame)\n                if npcColor then\n                    Plater.SetNameplateColor (unitFrame, npcColor)\n                elseif unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"enemyplayer\" then\n                    Plater.FindAndSetNameplateColor (unitFrame)\n                else\n                    Plater.RefreshNameplateColor (unitFrame)\n                end\n                \n                Plater.SetBorderColor (unitFrame)\n                \n                local nameString = unitFrame.healthBar.unitName\n                DF:SetFontColor (nameString, {1, 1, 1}) -- Reset name text to white\n            end\n        end\n    end\n    \n    -- Function to set Colors\n    function envTable.SetNameplateColors()\n        local raidMark = nil\n        if envTable.useRaidMarks and unitFrame.unit then\n            raidMark = Plater.GetRaidMark (unitFrame)\n        end\n        if (raidMark) then\n            Plater.SetNameplateColor (unitFrame, envTable.ColorByMark[raidMark])\n        else \n            envTable.matchMultiple(unitFrame) \n        end \n    end\n    \nend",
},
["Prio"] = 24,
["Time"] = 1754710675,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["Name"] = "Quazii Debuffs Combo Color",
["Desc"] = "If multiple debuffs are on nameplate at the same time, nameplate changes to your specified color.",
["Icon"] = 4728198,
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    local buffSpecialGlow = true\n    \n    -- functions --\n    local auraContainers = {unitFrame.BuffFrame.PlaterBuffList}\n    \n    if (Plater.db.profile.buffs_on_aura2) then\n        auraContainers [2] = unitFrame.BuffFrame2.PlaterBuffList\n    end\n    \n    for containerID = 1, #auraContainers do\n        local auraContainer = auraContainers [containerID]\n        for index, auraIcon in ipairs (auraContainer) do\n            if (auraIcon:IsShown() and auraIcon.CanStealOrPurge) then\n                local glowColorOverride = auraIcon.debuffType == \"\" and modTable.config.glowColorE or auraIcon.debuffType == \"Magic\" and modTable.config.glowColorM\n                if modTable.doDesaturate and auraIcon.isBuff then\n                    if not modTable.isPurgeUsable(unitId, auraIcon.AuraType == \"enrage\", auraIcon.AuraType == \"magic\") then\n                        auraIcon.Icon:SetDesaturated(true)\n                        --desatColor = \"dimgrey\"\n                    else\n                        auraIcon.Icon:SetDesaturated(false)\n                    end\n                end\n                Plater.StartGlow(auraIcon, glowColorOverride, modTable.options)\n                if modTable.config.outerGlow and auraIcon.__PlaterGlowFrame then\n                    auraIcon.__PlaterGlowFrame:ClearAllPoints()\n                    local offset = modTable.config.antsThickness\n                    auraIcon.__PlaterGlowFrame:SetPoint(\"topleft\", auraIcon, \"topleft\", -offset, offset)\n                    auraIcon.__PlaterGlowFrame:SetPoint(\"bottomright\", auraIcon, \"bottomright\", offset, -offset)\n                end\n                \n            else\n                Plater.StopGlow(auraIcon, modTable.options.glowType, modTable.options.key)\n            end\n        end\n    end\n    \n    if buffSpecialGlow then\n        for _, auraIcon in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n            if auraIcon:IsShown() then\n                if (auraIcon:IsShown() and auraIcon.canStealOrPurge) then\n                    local glowColorOverride = auraIcon.debuffType == \"\" and modTable.config.glowColorE or auraIcon.debuffType == \"Magic\" and modTable.config.glowColorM\n                    if modTable.doDesaturate and auraIcon.isBuff then\n                        if not modTable.isPurgeUsable(unitId, auraIcon.debuffType == \"\", auraIcon.debuffType == \"Magic\") then\n                            auraIcon.Texture:SetDesaturated(true)\n                        else\n                            auraIcon.Texture:SetDesaturated(false)\n                        end\n                    end\n                    Plater.StartGlow(auraIcon, glowColorOverride, modTable.options)\n                    if modTable.config.outerGlow and auraIcon.__PlaterGlowFrame then\n                        auraIcon.__PlaterGlowFrame:ClearAllPoints()\n                        local offset = modTable.config.antsThickness\n                        auraIcon.__PlaterGlowFrame:SetPoint(\"topleft\", auraIcon, \"topleft\", -offset, offset)\n                        auraIcon.__PlaterGlowFrame:SetPoint(\"bottomright\", auraIcon, \"bottomright\", offset, -offset)\n                    end\n                else\n                    Plater.StopGlow(auraIcon, modTable.options.glowType, modTable.options.key)\n                end                \n            end\n        end\n    end\n    \nend",
["Initialization"] = "function (modTable)\n    -- settings:\n    \n    -- for the LibCustomGlow implementation:\n    modTable.options = {\n        glowType = \"pixel\",\n        color = modTable.config.glowColorE,--\"red\", -- all plater color types accepted, from lib: {r,g,b,a}, color of lines and opacity, from 0 to 1. Defaul value is {0.95, 0.95, 0.32, 1}\n        N = modTable.config.antsAmount, --8, -- number of lines. Defaul value is 8;\n        frequency = modTable.config.frequency, -- frequency, set to negative to inverse direction of rotation. Default value is 0.25;\n        length = modTable.config.antsLength, -- length of lines. Default value depends on region size and number of lines;\n        th = modTable.config.antsThickness, -- thickness of lines. Default value is 2;\n        xOffset = 0,\n        yOffset = 0, -- offset of glow relative to region border;\n        border = modTable.config.antsBorder, -- set to true to create border under lines;\n        key = \"StealPurgeAuraGlow\", -- key of glow, allows for multiple glows on one frame;\n    }\n    \n    \n    local GetSpellCooldown = GetSpellCooldown or function(spellID)\n        local spellCooldownInfo = C_Spell.GetSpellCooldown(spellID)\n        if spellCooldownInfo then\n            return spellCooldownInfo.startTime, spellCooldownInfo.duration, spellCooldownInfo.isEnabled, spellCooldownInfo.modRate\n        end\n    end\n    local IsSpellInRange = IsSpellInRange and function(id) return IsSpellInRange(GetSpellInfo(id)) end or function(id, unit)\n        local result = C_Spell.IsSpellInRange(id, unit)\n        if result == true then\n            return 1\n        elseif result == false then\n            return 0\n        end\n        return nil\n    end\n    local GetSpellInfo = GetSpellInfo or function(spellID)\n        if not spellID then\n            return nil;\n        end\n        \n        local spellInfo = C_Spell.GetSpellInfo(spellID);\n        if spellInfo then\n            return spellInfo.name, nil, spellInfo.iconID, spellInfo.castTime, spellInfo.minRange, spellInfo.maxRange, spellInfo.spellID, spellInfo.originalIconID;\n        end\n    end\n    \n    modTable.doDesaturate = modTable.config.outOfRange or modTable.config.desaturate\n    -- functions:\n    function modTable.isPurgeUsable(unit, isEnrage, isMagic)\n        local purgeCD, purgeDur, purgeStart, spellOutOfRange, purgeID\n        for purgeSpellId, purgeSpellData in pairs(modTable.purgeSpellIDs or {}) do\n            \n            if (isEnrage and purgeSpellData.soothe) or (isMagic and purgeSpellData.purge) then\n                if not purgeSpellData.override then\n                    if modTable.isSpellOrTalentKnown(purgeSpellId) then\n                        local cdStart, cdDur =  GetSpellCooldown(purgeSpellId)\n                        local tmppurgeCD = (cdStart > 0 and  cdDur - (GetTime() - cdStart)) or 0\n                        if not purgeCD or (tmppurgeCD < purgeCD) then\n                            purgeID = purgeSpellId\n                            purgeCD = tmppurgeCD\n                            purgeDur = cdDur\n                            purgeStart = cdStart\n                            spellOutOfRange = unit and (IsSpellInRange(GetSpellInfo(purgeSpellId), unit) == 0) and true or false\n                        end\n                    end\n                else\n                    -- workaround for spell overrides (on WL command ability, etc.) or pet spells\n                    if FindSpellOverrideByID(purgeSpellData.override) == purgeSpellId then\n                        local cdStart, cdDur =  GetSpellCooldown(purgeSpellId)\n                        local tmppurgeCD = (cdStart > 0 and  cdDur - (GetTime() - cdStart)) or 0\n                        if not purgeCD or  (tmppurgeCD < purgeCD) then\n                            purgeID = purgeSpellId\n                            purgeCD = tmppurgeCD\n                            purgeDur = cdDur\n                            purgeStart = cdStart\n                            spellOutOfRange = unit and (IsSpellInRange(GetSpellInfo(purgeSpellId), unit) == 0) and true or false\n                        end \n                    end\n                end\n            end\n        end\n        \n        \n        \n        \n        if not purgeCD then\n            return true\n        elseif ((spellOutOfRange == true) and modTable.config.outOfRange) then\n            return false\n        elseif not (C_Spell.IsSpellUsable(purgeID) and (purgeCD == 0)) and modTable.config.desaturate then\n            return false\n        elseif GetSpellCooldown(61304) >= purgeCD then --GCD check necessary...\n            return false\n        else\n            return true\n        end\n    end\n    \n    function modTable.updatePurgeId ()\n        if not GetSpecializationInfo then return end --well, retail only.\n        local curSpec = GetSpecialization()\n        if not curSpec then return end\n        local specId = GetSpecializationInfo(curSpec)\n        if not modTable.interruptSpellIDs or modTable.knownSpecID ~= specId then\n            modTable.updatePurgeIDs()\n        end\n    end\n    \n    -- determine purge spell according to spec\n    function modTable.updatePurgeIDs ()\n        if not GetSpecializationInfo then return end --well, retail only.\n        local curSpec = GetSpecialization()\n        if not curSpec then return end\n        local specId = GetSpecializationInfo(curSpec)\n        modTable.knownSpecID = specId\n        local purgeIDs = {} -- contains: [spellID] = <is player ability>, false meaning pet or weird workarounds needed\n        if Plater.PlayerClass == \"ROGUE\" then\n            purgeIDs[5938] = {soothe = true, purge = false, override = nil} --Shiv\n        elseif Plater.PlayerClass == \"DEATHKNIGHT\" then\n            --\n        elseif Plater.PlayerClass == \"DEMONHUNTER\" then\n            purgeIDs[278326] = {soothe = false, purge = true, override = nil} -- Consume Magic\n        elseif Plater.PlayerClass == \"DRUID\" then\n            purgeIDs[2908] = {soothe = true, purge = false, override = nil} -- Soothe\n        elseif Plater.PlayerClass == \"HUNTER\" then\n            purgeIDs[19801] = {soothe = true, purge = true, override = nil} -- Tranquilizing Shot\n        elseif Plater.PlayerClass == \"MONK\" then\n            --\n        elseif Plater.PlayerClass == \"PALADIN\" then\n            --\n        elseif Plater.PlayerClass == \"SHAMAN\" then\n            purgeIDs[370] = {soothe = false, purge = true, override = nil} -- Purge\n            purgeIDs[378773] = {soothe = false, purge = true, override = nil} -- Greater Purge\n        elseif Plater.PlayerClass == \"WARRIOR\" then\n            --\n        elseif Plater.PlayerClass == \"MAGE\" then\n            purgeIDs[255361] = {soothe = false, purge = true, override = nil} -- Spellsteal\n        elseif Plater.PlayerClass == \"PRIEST\" then\n            purgeIDs[32375] = {soothe = false, purge = true, override = nil} -- Mass Dispel\n            purgeIDs[235101] = {soothe = false, purge = true, override = nil} -- Dispel Magic\n        elseif Plater.PlayerClass == \"WARLOCK\" then\n            purgeIDs[19505] = {soothe = false, purge = true, override = nil} -- Devour Magic (Pet)\n        elseif Plater.PlayerClass == \"EVOKER\" then\n            purgeIDs[372048] = {soothe = true, purge = false, override = nil} -- Oppressing Roar\n        end\n        purgeIDs[25046] = {soothe = false, purge = true, override = nil} -- Arcane Torrent\n        \n        modTable.purgeSpellIDs = purgeIDs\n    end\n    \n    function modTable.isTalentLearned(nodeID)\n        local talentConfig = C_ClassTalents.GetActiveConfigID()\n        local nodeInfo = talentConfig and nodeID and C_Traits.GetNodeInfo(talentConfig, nodeID)\n        return nodeInfo and nodeInfo.entryIDsWithCommittedRanks and nodeInfo.entryIDsWithCommittedRanks[1] and true or false\n    end\n    \n    function modTable.isSpellOrTalentKnown(spellId)\n        if IsSpellKnown(spellId) then\n            return true\n        elseif modTable.isTalentLearned(spellId) then\n            return true\n        end\n    end\n    \n    modTable.updatePurgeIDs()\n    \n    modTable.lastUpdateTime = time()\n    \nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updatePurgeId ()\nend\n\n\n",
},
["Time"] = 1754710639,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/turHC0a5k/13",
["Icon"] = "INTERFACE\\ICONS\\Ability_Creature_Cursed_04",
["Enabled"] = true,
["Revision"] = 543,
["semver"] = "1.0.12",
["Author"] = "Viash-Thrall",
["Desc"] = "Adds a glow to the aura if you can steal or purge the buff.",
["Prio"] = 99,
["Name"] = "Steal/Purge Aura Glow",
["PlaterCore"] = 1,
["version"] = 13,
["HooksTemp"] = {
},
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "@scriptname Options:",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 4",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "option16",
["Value"] = "Ants options:",
["Key"] = "option16",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color (Enrage)",
["Value"] = {
1,
0,
0,
1,
},
["Key"] = "glowColorE",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The color of the glow ants.",
},
{
["Type"] = 1,
["Name"] = "Glow Color (Magic)",
["Value"] = {
0,
0,
1,
1,
},
["Key"] = "glowColorM",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 16,
["Desc"] = "Amount of ants in the glow effect.",
["Min"] = 1,
["Name"] = "Ants Amount",
["Value"] = 6,
["Key"] = "antsAmount",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Ants move speed",
["Min"] = -1,
["Name"] = "Speed",
["Value"] = 0.25,
["Key"] = "frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "",
["Min"] = 1,
["Name"] = "Ants length",
["Value"] = 4,
["Key"] = "antsLength",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 4,
["Desc"] = "",
["Min"] = 1,
["Name"] = "Ants Thickness",
["Value"] = 2,
["Key"] = "antsThickness",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Option 14",
["Value"] = 0,
["Key"] = "option14",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Ants Border",
["Value"] = false,
["Key"] = "antsBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Outer Glow",
["Value"] = false,
["Key"] = "outerGlow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 17",
["Value"] = 0,
["Key"] = "option17",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 15",
["Value"] = "Desaturation (Retail only)",
["Key"] = "option15",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Desaturate if not usable",
["Value"] = false,
["Key"] = "desaturate",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Retail only.",
},
{
["Type"] = 4,
["Name"] = "Desaturate when out of range",
["Value"] = false,
["Key"] = "outOfRange",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Retail only.",
},
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["UID"] = "0x64123ca337069ce",
["Hooks"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not envTable.originalLevel then\n        envTable.originalLevel = unitFrame:GetFrameLevel()\n        envTable.originalAlpha = unitFrame:GetEffectiveAlpha()\n    end\n    \n    -- Create a unique identifier for this unitFrame if it doesn't exist\n    if not modTable.unitKeys[unitFrame] then\n        modTable.unitKeys[unitFrame] = #modTable.unitKeys + 1\n    end\n    \n    if not modTable.castingUnits[unitFrame] then\n        modTable.castCounter = modTable.castCounter + 1\n        envTable.castOrder = modTable.castCounter\n        \n        modTable.castingUnits[unitFrame] = envTable.castOrder\n    else\n        envTable.castOrder = modTable.castingUnits[unitFrame]\n    end\n    \n    -- Use original level as base and add a large offset for casting\n    -- Add unitKey to ensure uniqueness even for simultaneous casts\n    local castingOffset = 100\n    local frameLevel = envTable.originalLevel + castingOffset + (envTable.castOrder * 10) + modTable.unitKeys[unitFrame]\n    \n    if unitFrame.castBar and unitFrame.castBar.isSpecialCast then\n        frameLevel = frameLevel + 50\n    end\n    \n    unitFrame:SetFrameLevel(frameLevel)\n    \n    if modTable.config and modTable.config[\"fullOpacityOnCast\"] then\n        unitFrame:SetAlpha(1.0)\n    end\nend",
["Initialization"] = "function(modTable)\n    modTable.castingUnits = {}\n    modTable.castCounter = 0\n    modTable.unitKeys = {}  -- To store unique identifiers for each unitFrame\nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if envTable.originalLevel then\n        modTable.castingUnits[unitFrame] = nil\n        -- Don't remove from unitKeys to maintain consistent unique IDs\n        \n        unitFrame:SetFrameLevel(envTable.originalLevel)\n        unitFrame:SetAlpha(envTable.originalAlpha)\n        envTable.originalLevel = nil\n        envTable.originalAlpha = nil\n        envTable.castOrder = nil\n    end\nend",
},
["Time"] = 1754710657,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/L7KPSDPMK/15",
["Icon"] = 4640492,
["Enabled"] = false,
["Revision"] = 563,
["semver"] = "1.0.14",
["Author"] = "Ryowarsu-Sanguino",
["Desc"] = "",
["Prio"] = 31,
["Name"] = "Casting on top",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Name"] = "Force full opacity when casting",
["Value"] = true,
["Key"] = "fullOpacityOnCast",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["HooksTemp"] = {
},
["version"] = 15,
},
{
["Enabled"] = false,
["Revision"] = 392,
["OptionsValues"] = {
["threshold2"] = 5,
["debuff3"] = "",
["debuff2"] = "442624",
["color1"] = {
0.2980392277240753,
0.8509804606437683,
0.3921568989753723,
1,
},
["color2"] = {
0.6666666865348816,
1,
0,
1,
},
["low_time_color2"] = {
0.4549019932746887,
0.6784313917160034,
0,
1,
},
["low_time_color1"] = {
0.4549019932746887,
0.6784313917160034,
0,
1,
},
["debuff1"] = "",
["color3"] = {
1,
1,
1,
1,
},
["threshold1"] = 0,
["low_time_color3"] = {
1,
1,
1,
1,
},
},
["HooksTemp"] = {
},
["LastHookEdited"] = "",
["Author"] = "Blindmonkas-Tichondrius",
["PlaterCore"] = 1,
["UID"] = "0x6816fa86ef28426",
["Hooks"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Reset the nameplate color to default when removed\n    Plater.RefreshNameplateColor(unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Initialize variables\n    local foundDebuff = false\n    local highestPriorityColor = nil\n    local highestPriorityIndex = 0\n    \n    -- Track found debuff information\n    local foundDebuffId = nil\n    local foundRemainingTime = nil\n    \n    -- Check each buff/debuff on the unit\n    for i = 1, #unitFrame.BuffFrame.PlaterBuffList do\n        local auraIconFrame = unitFrame.BuffFrame.PlaterBuffList[i]\n        \n        if auraIconFrame:IsShown() then\n            local currentSpellId = auraIconFrame.SpellId\n            \n            -- Check each configured debuff\n            for index = 1, 3 do\n                local debuffKey = \"debuff\" .. index\n                local colorKey = \"color\" .. index\n                local thresholdKey = \"threshold\" .. index\n                local lowTimeColorKey = \"low_time_color\" .. index\n                \n                local spellIdToCheck = tonumber(modTable.config[debuffKey])\n                \n                if spellIdToCheck and currentSpellId == spellIdToCheck then\n                    -- This debuff is active, store info\n                    local remainingTime = nil\n                    if auraIconFrame.ExpirationTime then\n                        remainingTime = auraIconFrame.ExpirationTime - GetTime()\n                    end\n                    \n                    -- If this is a higher priority debuff (higher index), use it\n                    if index > highestPriorityIndex then\n                        highestPriorityIndex = index\n                        foundDebuff = true\n                        foundDebuffId = index\n                        foundRemainingTime = remainingTime\n                    end\n                end\n            end\n        end\n    end\n    \n    -- Apply color based on found debuff and its remaining time\n    if foundDebuff then\n        local debuffIndex = foundDebuffId\n        local remainingTime = foundRemainingTime\n        local threshold = tonumber(modTable.config[\"threshold\" .. debuffIndex]) or 5\n        \n        -- Check if we should use the normal color or low time color\n        if remainingTime and remainingTime < threshold then\n            -- Low time color\n            local lowTimeColorKey = \"low_time_color\" .. debuffIndex\n            if modTable.config[lowTimeColorKey] then\n                modTable.UpdateColor(unitFrame, modTable.config[lowTimeColorKey])\n            end\n        else\n            -- Normal color\n            local colorKey = \"color\" .. debuffIndex\n            if modTable.config[colorKey] then\n                modTable.UpdateColor(unitFrame, modTable.config[colorKey])\n            end\n        end\n    else\n        -- Reset to default color if no debuffs are found\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend",
["Initialization"] = "function (modTable)\n    -- Initialize tracking variables\n    modTable.debuffStates = {}\n    \n    -- Function to update the nameplate color based on debuff ID\n    function modTable.UpdateColor(unitFrame, color)\n        if not unitFrame or unitFrame.IsNpcWithoutHealthbar or unitFrame.IsFriendlyPlayerWithoutHealthbar then return end\n        Plater.SetNameplateColor(unitFrame, color)\n    end\n    \n    -- Setup the options panel\n    modTable.options = {\n        -- Debuff 1\n        {\n            type = \"text\",\n            key = \"debuff1\",\n            name = \"Debuff #1\",\n            desc = \"Enter the spell ID of the first debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color1\",\n            name = \"Normal Color #1\",\n            desc = \"Color when debuff #1 is active\",\n            value = {1, 0, 0, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold1\",\n            name = \"Time Threshold #1 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color1\",\n            name = \"Low Time Color #1\",\n            desc = \"Color when debuff #1 is about to expire\",\n            value = {1, 0.5, 0, 1},\n        },\n        \n        -- Debuff 2\n        {\n            type = \"text\",\n            key = \"debuff2\",\n            name = \"Debuff #2\",\n            desc = \"Enter the spell ID of the second debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color2\",\n            name = \"Normal Color #2\",\n            desc = \"Color when debuff #2 is active\",\n            value = {0, 1, 0, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold2\",\n            name = \"Time Threshold #2 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color2\",\n            name = \"Low Time Color #2\",\n            desc = \"Color when debuff #2 is about to expire\",\n            value = {0.5, 1, 0, 1},\n        },\n        \n        -- Debuff 3\n        {\n            type = \"text\",\n            key = \"debuff3\",\n            name = \"Debuff #3\",\n            desc = \"Enter the spell ID of the third debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color3\",\n            name = \"Normal Color #3\",\n            desc = \"Color when debuff #3 is active\",\n            value = {0, 0, 1, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold3\",\n            name = \"Time Threshold #3 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color3\",\n            name = \"Low Time Color #3\",\n            desc = \"Color when debuff #3 is about to expire\",\n            value = {0.5, 0, 1, 1},\n        }\n    }\nend",
},
["Prio"] = 25,
["Time"] = 1754813666,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["role"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Name"] = "Quazii Debuff Nameplate Colors",
["Desc"] = "When a tracked debuff is active on a target, their nameplate will change to your chosen color. Also changes color when debuff duration is low.",
["Icon"] = 4635182,
["Options"] = {
{
["Type"] = 3,
["Key"] = "debuff1",
["Value"] = "000000",
["Name"] = "Debuff #1 ID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter debuff ID of debuff you want to track",
},
{
["Type"] = 1,
["Key"] = "color1",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Color for Debuff #1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate changes to this color when Debuff #1 is active",
},
{
["Type"] = 2,
["Max"] = 60,
["Desc"] = "Debuff durationremaining in seconds, to trigger color change",
["Min"] = 0,
["Key"] = "threshold1",
["Value"] = 5,
["Name"] = "Low Time #1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "low_time_color1",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Low Time Color #1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color when debuff duration crosses the Low Time Threshold",
},
{
["Type"] = 3,
["Name"] = "Debuff #2 ID",
["Value"] = "000000",
["Key"] = "debuff2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter debuff ID of debuff you want to track",
},
{
["Type"] = 1,
["Name"] = "Color for Debuff #2",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "color2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate changes to this color when Debuff #1 is active",
},
{
["Type"] = 2,
["Max"] = 60,
["Desc"] = "Debuff durationremaining in seconds, to trigger color change",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 5,
["Key"] = "threshold2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Low Time #2",
},
{
["Type"] = 1,
["Name"] = "Low Time Color #2",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "low_time_color2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color when debuff duration crosses the Low Time Threshold",
},
{
["Type"] = 3,
["Key"] = "debuff3",
["Value"] = "000000",
["Name"] = "Debuff #3 ID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter debuff ID of debuff you want to track",
},
{
["Type"] = 1,
["Key"] = "color3",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Color for Debuff #3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate changes to this color when Debuff #1 is active",
},
{
["Type"] = 2,
["Max"] = 60,
["Desc"] = "Debuff durationremaining in seconds, to trigger color change",
["Min"] = 0,
["Name"] = "Low Time #3",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "threshold3",
},
{
["Type"] = 1,
["Key"] = "low_time_color3",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Low Time Color #3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color when debuff duration crosses the Low Time Threshold",
},
},
},
},
["last_news_time"] = 1743878608,
["auras_experimental_update_classic_era"] = true,
["aura_width2"] = 16,
["auras_per_row_amount2"] = 2,
["plater_resources_align"] = "horizontal",
["aura_width"] = 16,
["plater_resources_scale"] = 0.8,
["health_statusbar_bgcolor"] = {
0.04313725605607033,
0.04313725605607033,
0.04313725605607033,
1,
},
["buff_frame_anchor_and_size_migrated"] = true,
["cast_colors"] = {
[384524] = {
true,
"orangered",
"",
},
[376683] = {
true,
"orangered",
"",
},
[375727] = {
true,
"orangered",
"",
},
[411300] = {
false,
"blue",
},
[88308] = {
true,
"orangered",
"",
},
[265568] = {
false,
"white",
},
[372222] = {
true,
"orangered",
"",
},
[267354] = {
true,
"orchid",
"",
},
[427176] = {
false,
"orchid",
"",
},
[382233] = {
true,
"orangered",
"",
},
[323137] = {
true,
"orangered",
"",
},
[372735] = {
true,
"orchid",
"",
},
[266209] = {
true,
"white",
"",
},
[269843] = {
true,
"orangered",
"",
},
[283422] = {
true,
"orangered",
"",
},
[388801] = {
true,
"orchid",
"",
},
[340160] = {
true,
"orangered",
"",
},
[260894] = {
true,
"orangered",
"",
},
[461796] = {
true,
"orchid",
"",
},
[387910] = {
true,
"orchid",
"",
},
[226406] = {
true,
"orangered",
"",
},
[183088] = {
true,
"orangered",
"",
},
[267551] = {
true,
"orangered",
"",
},
[412200] = {
true,
"orchid",
"",
},
[197974] = {
true,
"orangered",
"",
},
[384597] = {
false,
"white",
},
[370764] = {
true,
"orchid",
"",
},
[323143] = {
true,
"orangered",
"",
},
[259940] = {
true,
"orangered",
},
[377204] = {
true,
"orangered",
"",
},
[412012] = {
true,
"orchid",
"",
},
[427376] = {
true,
"orchid",
},
[372615] = {
false,
"orangered",
"",
},
[465754] = {
true,
"orangered",
"",
},
[332708] = {
true,
"orangered",
"",
},
[413607] = {
false,
"white",
"",
},
[432031] = {
true,
"orchid",
"",
},
[447395] = {
true,
"orangered",
"",
},
[395184] = {
false,
"orangered",
"",
},
[372107] = {
true,
"orangered",
"",
},
[257870] = {
true,
"orchid",
"",
},
[256627] = {
true,
"orangered",
"",
},
[426860] = {
true,
"orangered",
"",
},
[200784] = {
true,
"orchid",
"",
},
[268260] = {
true,
"orangered",
"",
},
[434779] = {
true,
"orangered",
"",
},
[424958] = {
true,
"orangered",
"",
},
[472452] = {
true,
"orangered",
"",
},
[439621] = {
true,
"orangered",
"",
},
[451843] = {
true,
"orangered",
"",
},
[1225174] = {
true,
"orangered",
"",
},
[451543] = {
true,
"orangered",
"",
},
[376892] = {
true,
"orangered",
"",
},
[367521] = {
true,
"orchid",
"",
},
[340300] = {
true,
"orangered",
"",
},
[320729] = {
true,
"orangered",
"",
},
[257426] = {
true,
"orangered",
"",
},
[1214546] = {
true,
"orangered",
"",
},
[419351] = {
true,
"orangered",
"",
},
[473220] = {
true,
"orangered",
"",
},
[269029] = {
true,
"orangered",
"",
},
[369563] = {
true,
"orangered",
"",
},
[257862] = {
true,
"orangered",
"",
},
[253721] = {
true,
"orchid",
"",
},
[262377] = {
true,
"orangered",
"",
},
[333477] = {
true,
"orangered",
"",
},
[376170] = {
true,
"orangered",
"",
},
[200913] = {
true,
"orangered",
"",
},
[422541] = {
false,
"orchid",
"",
},
[448105] = {
true,
"orangered",
"",
},
[422414] = {
true,
"orangered",
"",
},
[427323] = {
true,
"orangered",
"",
},
[429427] = {
true,
"orchid",
"",
},
[381525] = {
true,
"orangered",
"",
},
[412215] = {
true,
"orangered",
"",
},
[257288] = {
true,
"orangered",
"",
},
[201226] = {
true,
"orangered",
"",
},
[1214315] = {
true,
"orangered",
"",
},
[322711] = {
true,
"orangered",
"",
},
[257397] = {
true,
"darkorange",
"",
},
[333294] = {
true,
"orangered",
"",
},
[375943] = {
true,
"orangered",
"",
},
[260793] = {
true,
"orangered",
"",
},
[333488] = {
true,
"orangered",
"",
},
[421910] = {
true,
"orangered",
"",
},
[448619] = {
true,
"orangered",
"",
},
[1222356] = {
true,
"orangered",
"",
},
[459779] = {
true,
"orangered",
"",
},
[317231] = {
true,
"orangered",
"",
},
[449130] = {
true,
"orangered",
"",
},
[437719] = {
true,
"orchid",
"",
},
[391118] = {
true,
"orangered",
"",
},
[427359] = {
true,
"orchid",
"",
},
[369061] = {
true,
"orangered",
"",
},
[396665] = {
true,
"orangered",
"",
},
[272609] = {
true,
"orangered",
"",
},
[323608] = {
true,
"orangered",
"",
},
[377732] = {
true,
"orchid",
"",
},
[408141] = {
true,
"orangered",
"",
},
[388060] = {
true,
"orangered",
"",
},
[450854] = {
true,
"orangered",
"",
},
[369573] = {
true,
"orangered",
"",
},
[444608] = {
false,
"gray",
"",
},
[474087] = {
true,
"orangered",
"",
},
[164357] = {
true,
"orangered",
"",
},
[375439] = {
true,
"orangered",
"",
},
[378818] = {
true,
"orchid",
"",
},
[411012] = {
true,
"orangered",
"",
},
[412129] = {
true,
"orangered",
"",
},
[386660] = {
true,
"orangered",
"",
},
[377034] = {
true,
"orangered",
"",
},
[382708] = {
true,
"orangered",
"",
},
[421277] = {
true,
"orangered",
"",
},
[200345] = {
true,
"orchid",
"",
},
[291865] = {
false,
"orangered",
"",
},
[188169] = {
true,
"orangered",
"",
},
[385578] = {
true,
"orangered",
"",
},
[411994] = {
true,
"darkorange",
"",
},
[451496] = {
true,
"orangered",
"",
},
[330614] = {
true,
"orangered",
"",
},
[268202] = {
true,
"orchid",
"",
},
[275907] = {
true,
"orangered",
"",
},
[375351] = {
true,
"orangered",
"",
},
[383823] = {
true,
"orchid",
"",
},
[279118] = {
false,
"blue",
},
[199805] = {
true,
"orangered",
"",
},
[428293] = {
true,
"orangered",
},
[382712] = {
true,
"orangered",
"",
},
[374361] = {
true,
"orangered",
"",
},
[265540] = {
true,
"orchid",
"",
},
[373742] = {
true,
"orangered",
"",
},
[375348] = {
true,
"orangered",
"",
},
[427869] = {
true,
"orangered",
"",
},
[465682] = {
true,
"orangered",
"",
},
[265721] = {
true,
"orangered",
"",
},
[384978] = {
true,
"orchid",
"",
},
[426893] = {
true,
"orangered",
"",
},
[326997] = {
true,
"orangered",
"",
},
[323236] = {
true,
"orangered",
"",
},
[434824] = {
true,
"orangered",
"",
},
[321834] = {
true,
"orangered",
"",
},
[440218] = {
true,
"orangered",
"",
},
[226296] = {
true,
"orangered",
"",
},
[427342] = {
true,
"orchid",
"",
},
[331718] = {
true,
"orangered",
"",
},
[397889] = {
true,
"mediumturquoise",
"",
},
[257756] = {
true,
"orchid",
"",
},
[1226111] = {
true,
"orangered",
"",
},
[453161] = {
true,
"orangered",
"",
},
[253517] = {
false,
"white",
},
[426260] = {
true,
"orangered",
"",
},
[324323] = {
true,
"orangered",
"",
},
[388392] = {
false,
"darkorange",
"",
},
[102569] = {
false,
"orangered",
"",
},
[427025] = {
true,
"orangered",
"",
},
[372201] = {
true,
"orangered",
"",
},
[323496] = {
true,
"orangered",
"",
},
[462216] = {
true,
"orangered",
"",
},
[426261] = {
true,
"orangered",
"",
},
[397931] = {
true,
"mediumturquoise",
"",
},
[367484] = {
true,
"orchid",
"",
},
[1236348] = {
true,
"orangered",
"",
},
[87618] = {
true,
"orangered",
"",
},
[426905] = {
false,
"white",
"",
},
[426645] = {
true,
"orangered",
},
[347149] = {
true,
"orangered",
"",
},
[321968] = {
true,
"orangered",
"",
},
[375327] = {
true,
"orangered",
"",
},
[436592] = {
true,
"orangered",
"",
},
[387950] = {
true,
"orangered",
"",
},
[377559] = {
true,
"orangered",
"",
},
[433662] = {
true,
"orchid",
"",
},
[320822] = {
true,
"orchid",
"",
},
[209628] = {
true,
"blue",
"",
},
[375251] = {
true,
"orangered",
"",
},
[441119] = {
true,
"orangered",
"",
},
[169179] = {
true,
"orangered",
"",
},
[382277] = {
true,
"orangered",
"",
},
[416139] = {
true,
"orangered",
"",
},
[369465] = {
true,
"orchid",
"",
},
[431494] = {
true,
"orangered",
"",
},
[393432] = {
true,
"orangered",
"",
},
[200768] = {
true,
"orangered",
"",
},
[293986] = {
true,
"orangered",
"",
},
[449090] = {
true,
"orangered",
"",
},
[448640] = {
true,
"orangered",
"",
},
[396812] = {
true,
"orchid",
"",
},
[445457] = {
true,
"orangered",
"",
},
[388911] = {
true,
"orangered",
"",
},
[432198] = {
true,
"orangered",
"",
},
[200291] = {
true,
"orchid",
"",
},
[474018] = {
true,
"orangered",
"",
},
[156718] = {
true,
"darkorange",
"",
},
[388976] = {
true,
"orangered",
"",
},
[473114] = {
true,
"orangered",
"",
},
[1227900] = {
true,
"orangered",
"",
},
[385958] = {
true,
"orangered",
"",
},
[257899] = {
false,
"lightslategray",
},
[372225] = {
true,
"orchid",
"",
},
[369828] = {
true,
"orchid",
"",
},
[188404] = {
true,
"orangered",
"",
},
[88194] = {
false,
"white",
},
[1217496] = {
true,
"orangered",
"",
},
[385536] = {
true,
"orchid",
"",
},
[432520] = {
true,
"orchid",
"",
},
[443500] = {
true,
"orangered",
"",
},
[200261] = {
true,
"orangered",
"",
},
[432967] = {
true,
"orchid",
"",
},
[1217294] = {
true,
"orangered",
"",
},
[384868] = {
true,
"orangered",
"",
},
[369409] = {
true,
"orangered",
"",
},
[265019] = {
true,
"orangered",
"",
},
[372087] = {
true,
"orangered",
"",
},
[1217653] = {
true,
"orangered",
"",
},
[412505] = {
true,
"orangered",
"",
},
[226304] = {
true,
"orangered",
"",
},
[391723] = {
true,
"orangered",
"",
},
[355577] = {
true,
"orangered",
"",
},
[193505] = {
true,
"orangered",
"",
},
[352390] = {
true,
"orangered",
"",
},
[372311] = {
true,
"orangered",
"",
},
[466124] = {
false,
"orangered",
"",
},
[265372] = {
true,
"orangered",
"",
},
[183465] = {
true,
"orangered",
"",
},
[1235368] = {
true,
"orangered",
"",
},
[425027] = {
true,
"orangered",
"",
},
[169929] = {
true,
"orangered",
"",
},
[435012] = {
true,
"orangered",
"",
},
[339706] = {
true,
"orangered",
"",
},
[255567] = {
true,
"orangered",
"",
},
[413529] = {
true,
"orangered",
"",
},
[377383] = {
true,
"orangered",
"",
},
[1215738] = {
true,
"orangered",
"",
},
[447270] = {
true,
"orangered",
"",
},
[199151] = {
true,
"blue",
"",
},
},
["pet_width_scale"] = 0.9999999403953552,
["castbar_target_anchor"] = {
["side"] = 11,
},
["quick_hide"] = true,
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
},
["extra_icon_timer_size"] = 10,
["target_highlight_color"] = {
nil,
0.52156862745098,
},
["extra_icon_anchor"] = {
["y"] = -8,
["x"] = 2,
["side"] = 7,
},
["range_check_alpha"] = 1,
["click_space"] = {
115,
},
["extra_icon_auras"] = {
277242,
},
["aura2_grow_direction"] = 3,
["semver"] = "1.0.2",
["bossmod_aura_glow_expiring"] = true,
["aura_frame2_anchor"] = {
["y"] = 0,
["x"] = 2.099990844726563,
["side"] = 6,
},
["extra_icon_show_enrage"] = true,
["aura_alpha"] = 0.84999996423721,
["auto_toggle_friendly"] = {
["cities"] = false,
["world"] = false,
},
["aura_cooldown_edge_texture"] = "Interface\\AddOns\\Plater\\images\\transparent",
["extra_icon_height"] = 10,
["plater_resources_show_number"] = false,
["first_run3"] = true,
["extra_icon_show_purge"] = true,
["ui_parent_scale_tune"] = 1.562500034924597,
["ui_parent_buff_strata"] = "LOW",
["healthbar_framelevel"] = 0,
["aura_consolidate"] = true,
["health_statusbar_bgtexture"] = "Quazii",
["indicator_raidmark_anchor"] = {
["side"] = 9,
["x"] = 0,
},
["extra_icon_width"] = 16,
["tank"] = {
["colors"] = {
["aggro"] = {
0.501960813999176,
0.501960813999176,
},
["noaggro"] = {
[3] = 0.1960784494876862,
},
["pulling"] = {
nil,
0,
0.77647058823529,
},
},
},
["health_statusbar_texture"] = "Quazii",
["hook_auto_imported"] = {
["Color Automation"] = 1,
["Blockade Encounter"] = 1,
["Cast Bar Icon Config"] = 2,
["Hide Neutral Units"] = 1,
["Aura Reorder"] = 3,
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Bwonsamdi Reaping"] = 1,
["Jaina Encounter"] = 6,
["Execute Range"] = 1,
["Attacking Specific Unit"] = 2,
["Combo Points"] = 6,
["Targetting Alpha"] = 3,
["Target Color"] = 3,
["Extra Border"] = 2,
["Monk Statue"] = 2,
},
["castbar_target_show"] = true,
["cast_statusbar_color"] = {
nil,
0.85882352941176,
nil,
0.96000000089407,
},
["update_throttle"] = 0.3499999940395355,
["minor_width_scale"] = 0.9999999403953552,
["color_override"] = false,
["indicator_pet"] = false,
["aura_frame1_anchor"] = {
["y"] = 2,
["side"] = 1,
},
["tocversion"] = 110200,
["castbar_icon_show"] = false,
["indicator_extra_raidmark"] = false,
["aura_timer_text_font"] = "Quazii",
["extra_icon_timer_font"] = "Quazii",
["indicator_rare"] = false,
["not_affecting_combat_alpha"] = 0.7999999523162842,
["first_run2"] = true,
["castbar_target_outline"] = "NONE",
["extra_icon_stack_font"] = "Quazii",
["cast_statusbar_texture"] = "Quazii",
["aura_height"] = 12,
["plater_resources_padding"] = 2,
["use_health_animation"] = true,
["cast_statusbar_bgtexture"] = "PlaterBackground",
["aura2_x_offset"] = 2.099990844726563,
["target_indicator"] = "Arrow Thin",
["castbar_target_font"] = "Quazii",
["script_auto_imported"] = {
["Cast - Important by Color [P]"] = 2,
["Aura - Buff Alert"] = 15,
["Cast - Effect After Cast [P]"] = 2,
["Explosion Affix M+"] = 14,
["Aura - Debuff Alert"] = 12,
["Fixate On You"] = 12,
["Cast - Ultra Important"] = 14,
["Cast - Castbar is Timer [P]"] = 2,
["Blink by Time Left"] = 1,
["Cast - Shining Green [P]"] = 3,
["Add - Health Markers [P]"] = 3,
["Cast - Small Alert"] = 12,
["Cast - Tank Interrupt"] = 12,
["Aura - Invalidate Unit"] = 1,
["Add - Important [P]"] = 4,
["Fixate"] = 11,
["Unit - Main Target"] = 11,
["Aura - Blink Time Left"] = 13,
["Cast - Voidzone [P]"] = 2,
["Add - Tag Number [P]"] = 2,
["Unit - Health Markers"] = 12,
["Fixate by Unit Buff [P]"] = 2,
["Cast - Special Ability [P]"] = 3,
["Cast - Glowing [P]"] = 10,
["Cast - On Going Cast [P]"] = 2,
["Cast - Spark Color [P]"] = 2,
["Cast - Heal Stun [P]"] = 2,
["Cast - Circular Swipe"] = 4,
["Cast - Tankbuster [P]"] = 1,
["Cast - Important Target [P]"] = 2,
["Aura - Is Cast Bar [P]"] = 1,
["Unit - Important"] = 11,
["Cast - Alert + Timer [P]"] = 4,
["Cast - Very Important"] = 15,
["Cast - AoE Hit All [P]"] = 3,
["Color Change"] = 1,
["Auto Set Skull"] = 11,
["Aura is Shield [P]"] = 5,
["Cast - Debuff [P]"] = 2,
["Cast - Simple Interrupt [P]"] = 2,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Cast - Ongoing Cast [P]"] = 4,
["Cast - Shield Interrupt"] = 2,
["Cast - Heal Cut [P]"] = 3,
["Add - Warning [P]"] = 5,
["Spiteful Affix"] = 3,
["Cast - Quick Flash"] = 2,
["Add - Non Elite Trash [P]"] = 4,
["Relics 9.2 M Dungeons"] = 2,
["Aura Border Color"] = 1,
["Cast - Stop Casting"] = 4,
["Cast - AoE With Range [P]"] = 2,
["Cast - Frontal Cone"] = 17,
["Add - Explode on Die [P]"] = 1,
["Cast - Heroic Leap [P]"] = 3,
["Unit Power"] = 1,
["Countdown"] = 12,
["Unit - Show Energy"] = 11,
},
["ui_parent_cast_strata"] = "DIALOG",
["cast_audiocues"] = {
[384524] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[376683] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[375727] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[412129] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[372222] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[267354] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Stop.ogg",
[372223] = "nil",
[382233] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[323137] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[372735] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[266209] = "nil",
[269843] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[283422] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[388801] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[340160] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[260894] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[461796] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Stop.ogg",
[387910] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[226406] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[183088] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[267551] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[412200] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[197974] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[370764] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[201226] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[259940] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[377204] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[412012] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[427376] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[465754] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[332708] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[275907] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[447395] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[395184] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[372107] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[257870] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[256627] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[447270] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[424958] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[472452] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[439621] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[451543] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[376892] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[367521] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[340300] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[320729] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[257426] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[1214546] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[397931] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[473220] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[434779] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[369563] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[200913] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[422414] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[427323] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[429427] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[412215] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[375348] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[322711] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[257397] = "nil",
[333294] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[375943] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[426860] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[268202] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[451843] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[448619] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[1225174] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[1215738] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[372311] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[449130] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[437719] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[391118] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[257288] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[369061] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[421910] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[262377] = "Interface\\AddOns\\WeakAuras\\Media\\Sounds\\RunAway.ogg",
[323608] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[377732] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[408141] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[388060] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[450854] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[369828] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[443500] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[272609] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[164357] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[375439] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[385958] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[411012] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[1235368] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[386660] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[377034] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[382708] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[421277] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[200345] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[1217653] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[188169] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[385578] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[255567] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[451496] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[384868] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[333477] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[378818] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[1222356] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[260793] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[268260] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[226304] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[428293] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[382712] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[374361] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[265540] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[381525] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[369573] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[474087] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[375351] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[369409] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[396665] = "nil",
[426893] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[326997] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[323236] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[253721] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[321834] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[440218] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[374839] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[169929] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[465682] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[397889] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[257756] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[1226111] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[453161] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[473114] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[324323] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[1227900] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[373742] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[383823] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[426260] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[226296] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[265019] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[372201] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[323496] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[426261] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[387629] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[427025] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[416139] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[209628] = "nil",
[426645] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[87618] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[321968] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[393432] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[320822] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[387950] = "nil",
[377559] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[374563] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[396812] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[448640] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[432198] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[169179] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[462216] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[436592] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[425027] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[369465] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[431494] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[441119] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[200768] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[293986] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[449090] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[1236348] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[382277] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[445457] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[388911] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[367484] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[265721] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[200291] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[156718] = "nil",
[388976] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[375327] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[347149] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[200784] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[199151] = "nil",
[188404] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[88308] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[434824] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[331718] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[1217496] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[385536] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[432520] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Stop.ogg",
[375251] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[200261] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[432967] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Stop.ogg",
[1214315] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[1217294] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[411994] = "nil",
[330614] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[372087] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[199805] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[412505] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[427869] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[391723] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[355577] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[193505] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[352390] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[459779] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[317231] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[265372] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[183465] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[376170] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[419351] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[269029] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[435012] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[339706] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[257862] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[413529] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[377383] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[333488] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[372225] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[323143] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
},
["ghost_auras"] = {
["auras"] = {
["WARLOCK"] = {
{
[172] = true,
[980] = true,
},
},
["PRIEST"] = {
[3] = {
[589] = true,
[34914] = true,
},
},
},
},
["aura_height2"] = 12,
["cast_statusbar_fadeout_time"] = 0.4899999797344208,
["target_shady_alpha"] = 0.59999996423721,
["news_frame"] = {
["PlaterNewsFrame"] = {
["scale"] = 1,
},
},
["show_healthbars_on_not_attackable"] = true,
["bossmod_icons_anchor"] = {
["y"] = 30,
["x"] = 0,
["side"] = 8,
},
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"gray\"\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --only change the nameplate color in combat\n    if (InCombatLockdown()) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n\n\n",
["Time"] = 1745120820,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"gray\"\n    \nend\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_invalid",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Revision"] = 119,
["Options"] = {
},
["Author"] = "Izimode-Azralon",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["NpcNames"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --only change the nameplate color in combat\n    if (InCombatLockdown()) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n\n\n",
["Name"] = "Aura - Invalidate Unit [Plater]",
["PlaterCore"] = 1,
["Enabled"] = true,
["Desc"] = "When an aura makes the unit invulnarable and you don't want to attack it. Add spell in the Add Trigger field.",
["Prio"] = 99,
["SpellIds"] = {
261265,
261266,
271590,
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
["ScriptType"] = 1,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1754310589,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["url"] = "",
["NpcNames"] = {
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["Revision"] = 639,
["semver"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
["Name"] = "Aura - Buff Alert [Plater]",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["SpellIds"] = {
398151,
375596,
377738,
378149,
},
["Desc"] = "Add the buff name in the trigger box.",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Time"] = 1745120821,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 374,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
["NpcNames"] = {
},
["Author"] = "Tercioo-Sylvanas",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
["semver"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Name"] = "Aura - Debuff Alert [Plater]",
["Desc"] = "Add the debuff name in the trigger box.",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);\nend\n\n--[=[\n\n\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount.text = \"\" .. UnitPower (unitId);\nend\n\n\n",
["Time"] = 1743564548,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);\nend\n\n--[=[\n\n\n--]=]",
["Icon"] = 136048,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["Revision"] = 145,
["Options"] = {
},
["Author"] = "Celian-Sylvanas",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["NpcNames"] = {
"Guardian of Yogg-Saron",
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount.text = \"\" .. UnitPower (unitId);\nend\n\n\n",
["Name"] = "UnitPower [Plater]",
["PlaterCore"] = 1,
["Enabled"] = false,
["Desc"] = "Show the energy amount above the nameplate",
["Prio"] = 99,
["SpellIds"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
["Time"] = 1743564605,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
["Icon"] = 136048,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Enabled"] = false,
["Revision"] = 254,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Show the power of the unit above the nameplate.",
["Name"] = "script desc",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Add the unit name or unitId in the \"Add Trigger\" field and press \"Add\".",
["Name"] = "add trigger",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showLater",
["Value"] = true,
["Name"] = "Show at 80% of Energy",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the energy won't start showing until the unit has 80% energy.",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Text size.",
["Min"] = 8,
["Fraction"] = false,
["Value"] = 16,
["Key"] = "fontSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Text Size",
},
{
["Type"] = 1,
["Key"] = "fontColor",
["Value"] = {
0.80392156862745,
0.80392156862745,
0.80392156862745,
1,
},
["Name"] = "Font Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the text.",
},
{
["Type"] = 4,
["Key"] = "outline",
["Value"] = true,
["Name"] = "Enable Text Outline",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the text uses outline.",
},
},
["NpcNames"] = {
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Prio"] = 99,
["Name"] = "Unit - Show Energy [Plater]",
["Desc"] = "Show the energy amount above the nameplate.",
["semver"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1743574570,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["url"] = "",
["Icon"] = 610472,
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Enabled"] = true,
["Revision"] = 93,
["semver"] = "",
["NpcNames"] = {
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
343470,
423228,
},
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Name"] = "Aura is Shield [P]",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["Options"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1743992662,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Enabled"] = true,
["Revision"] = 161,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "indicatorColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Vertical Line Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Name"] = "Vertical Line Alpha",
["Value"] = 0.79,
["Key"] = "indicatorAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Fill Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "fillColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Fill Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "fillAlpha",
},
},
["NpcNames"] = {
"214840",
"197697",
"59544",
"186227",
"184020",
"91005",
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["version"] = -1,
["Prio"] = 99,
["Name"] = "Add - Health Markers [P]",
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["SpellIds"] = {
},
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["semver"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 1,
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1743574568,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
["Enabled"] = true,
["Revision"] = 28,
["semver"] = "",
["Icon"] = 236209,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
["Author"] = "Tiranaa-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
372743,
372749,
384933,
},
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
["Name"] = "Aura While Casting [P]",
["Desc"] = "Highlight the nameplate of a unit when has a certain Buff (trigger) and start to cast a spell",
["Options"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local auraDuration = envTable._Duration\n    local altCastId = 1\n    \n    ---@class plater_altcastbarconfig : table\n    ---@field iconTexture string\n    ---@field iconTexcoord table\n    ---@field iconAlpha number\n    ---@field text string\n    ---@field texture any\n    ---@field color any\n    ---@field isChanneling boolean\n    ---@field canInterrupt boolean\n    ---@field height number\n    ---@field iconSize number\n    ---@field textSize number\n    ---@field spellNameAnchor df_anchor\n    ---@field timerAnchor df_anchor\n    ---@field iconAnchor df_anchor\n    \n    local configTable = {\n        iconTexture = envTable._Texture,\n        text = envTable._SpellName,\n        color = \"gray\",\n        isChanneling = true,\n        canInterrupt = false,\n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        \n    }\n    \n    Plater.SetAltCastBar(unitFrame.PlateFrame, configTable, auraDuration, envTable._StartTime, altCastId)\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1745120819,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Enabled"] = true,
["Revision"] = 32,
["semver"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\aura_castbar.png",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend\n\n\n",
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show a castbar for the aura duration.",
["SpellIds"] = {
438494,
335141,
},
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Name"] = "Aura - Is Cast Bar [P]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local auraDuration = envTable._Duration\n    local altCastId = 1\n    \n    ---@class plater_altcastbarconfig : table\n    ---@field iconTexture string\n    ---@field iconTexcoord table\n    ---@field iconAlpha number\n    ---@field text string\n    ---@field texture any\n    ---@field color any\n    ---@field isChanneling boolean\n    ---@field canInterrupt boolean\n    ---@field height number\n    ---@field iconSize number\n    ---@field textSize number\n    ---@field spellNameAnchor df_anchor\n    ---@field timerAnchor df_anchor\n    ---@field iconAnchor df_anchor\n    \n    local configTable = {\n        iconTexture = envTable._Texture,\n        text = envTable._SpellName,\n        color = \"gray\",\n        isChanneling = true,\n        canInterrupt = false,\n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        \n    }\n    \n    Plater.SetAltCastBar(unitFrame.PlateFrame, configTable, auraDuration, envTable._StartTime, altCastId)\n    \nend\n\n\n",
["Options"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --save current cast bar color before changing it later\n    envTable.OldCastbarColor = unitFrame.castBar:GetColor()\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.ActorType == \"enemyplayer\" or unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"friendlynpc\" ) then\n        return\n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    --set color back to what it was before\n    unitFrame.castBar:SetColor(Plater:ParseColors(envTable.OldCastbarColor))\n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
["interruptSoundToggle"] = false,
["interruptSound"] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
["castbarColor"] = {
1,
0.4313725829124451,
0,
1,
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (unitFrame.ActorType == \"enemyplayer\" or unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"friendlynpc\" ) then\n        return\n    end\n    \n    if scriptTable.config.interruptSoundToggle then\n        PlaySoundFile(scriptTable.config.interruptSound, \"Master\")\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    --Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    unitFrame.castBar:SetColor(Plater:ParseColors(scriptTable.config.castbarColor))\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Time"] = 1755077802,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --save current cast bar color before changing it later\n    envTable.OldCastbarColor = unitFrame.castBar:GetColor()\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["NpcNames"] = {
},
["url"] = "",
["Enabled"] = true,
["Revision"] = 2024,
["semver"] = "",
["Icon"] = 1305153,
["SpellIds"] = {
387955,
387615,
387606,
225100,
211401,
211470,
192563,
152818,
156776,
398206,
153524,
396073,
396018,
345202,
263365,
395859,
395872,
397914,
209410,
392924,
153395,
265089,
278755,
266106,
272183,
265523,
202181,
374080,
400386,
209413,
207980,
257397,
257736,
382787,
369602,
369465,
381593,
265091,
265433,
382791,
376780,
257784,
88010,
410870,
266209,
342797,
413044,
204243,
279118,
255041,
259572,
200630,
225562,
201399,
264390,
265346,
263959,
278444,
265876,
264407,
266225,
415770,
415437,
412922,
417481,
418200,
411300,
412378,
412233,
407891,
416139,
227913,
164965,
164887,
168082,
427460,
429176,
271174,
165213,
169839,
413607,
388392,
388863,
396640,
377389,
387975,
387564,
375596,
386546,
384365,
386025,
386024,
386015,
387125,
387411,
387596,
384808,
373395,
397394,
372743,
384194,
373017,
367500,
367503,
377950,
372711,
374544,
385029,
384633,
374339,
374045,
395694,
374563,
374699,
376171,
377341,
377402,
395427,
372223,
384161,
378282,
369675,
369365,
369411,
436841,
392451,
434802,
434793,
436322,
448248,
448047,
433841,
443430,
443433,
442536,
452162,
453840,
431309,
451097,
431333,
429545,
445207,
429109,
322938,
324914,
326046,
340544,
337235,
322450,
335143,
324293,
327130,
256957,
275826,
272571,
454440,
451871,
76711,
324776,
427356,
432959,
426145,
427157,
338353,
442210,
449455,
377488,
386549,
1214468,
1214780,
462771,
471733,
428019,
425536,
424322,
426295,
422541,
427176,
424420,
424419,
444743,
441627,
440687,
341902,
330868,
342675,
341969,
341977,
280604,
269302,
263202,
271579,
268702,
293729,
301088,
441351,
268797,
437721,
463058,
465595,
430109,
326450,
325700,
314488,
1229510,
355934,
355642,
350922,
357260,
357284,
351119,
423051,
325701,
355057,
},
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (unitFrame.ActorType == \"enemyplayer\" or unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"friendlynpc\" ) then\n        return\n    end\n    \n    if scriptTable.config.interruptSoundToggle then\n        PlaySoundFile(scriptTable.config.interruptSound, \"Master\")\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    --Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    unitFrame.castBar:SetColor(Plater:ParseColors(scriptTable.config.castbarColor))\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Name"] = "Quazii MUST INTERRUPT",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["Options"] = {
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "interruptSoundToggle",
["Value"] = false,
["Name"] = "Play Sound On Spell Cast",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Plays \"Interrupt\" Sound When Spell Casted",
},
{
["Type"] = 8,
["Key"] = "interruptSound",
["Value"] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
["Name"] = "Choose Sound",
["Icon"] = "Interface\\AddOns\\Plater\\images\\options_audio_dropdown.png",
["Desc"] = "Choose The Sound Played",
},
{
["Type"] = 6,
["Key"] = "option11",
["Value"] = 0,
["Name"] = "blank space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.ActorType == \"enemyplayer\" or unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"friendlynpc\" ) then\n        return\n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    --set color back to what it was before\n    unitFrame.castBar:SetColor(Plater:ParseColors(envTable.OldCastbarColor))\n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1754311039,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
["Enabled"] = true,
["Revision"] = 1038,
["semver"] = "",
["Icon"] = 1958262,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["SpellIds"] = {
388623,
384699,
153501,
153686,
154442,
192018,
219488,
387067,
391136,
382233,
209027,
212031,
207261,
207979,
198888,
199050,
191508,
152792,
265540,
226304,
375327,
372202,
209495,
260894,
226406,
193505,
375348,
257426,
255952,
257870,
413147,
383107,
377559,
390111,
369791,
369335,
375727,
265016,
265019,
260793,
260292,
272457,
272609,
269843,
183465,
226296,
188169,
183088,
410873,
411012,
88308,
373742,
374533,
377204,
204667,
255567,
201226,
200768,
265372,
413529,
408141,
412215,
412129,
412505,
419351,
200261,
200345,
197974,
200913,
164357,
169179,
426645,
428293,
169929,
388976,
385958,
377383,
377034,
374361,
370764,
386660,
391118,
372222,
385578,
384696,
384868,
387629,
382277,
376892,
375943,
376683,
372087,
391726,
391723,
381525,
388060,
376170,
393432,
384524,
375351,
382708,
375251,
375439,
372311,
372201,
369563,
369573,
369409,
369061,
382712,
434824,
453161,
443500,
434779,
451496,
451543,
439621,
440218,
431494,
450854,
449130,
448640,
321968,
331718,
340160,
324323,
333488,
333477,
256627,
269029,
257862,
462216,
447395,
448105,
432198,
441119,
448619,
449090,
427323,
422414,
425027,
340300,
427025,
257288,
268260,
426261,
321834,
427869,
465754,
472452,
465682,
1217653,
459779,
473114,
1217496,
421910,
421277,
447270,
436592,
426893,
1214315,
424958,
451843,
1214546,
445457,
317231,
320729,
333294,
330614,
323608,
339706,
267551,
1217294,
275907,
259940,
283422,
293986,
291865,
466124,
468813,
473220,
332708,
1215738,
474087,
426260,
322711,
323236,
323143,
1226111,
1235368,
1227900,
1227918,
352390,
199805,
355577,
347149,
1236348,
326997,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
["Name"] = "Quazii FRONTALS",
["PlaterCore"] = 1,
["Prio"] = 67,
["version"] = -1,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 0.73,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Key"] = "animSpeed",
["Value"] = 0.2,
["Name"] = "Animation Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 4,
["Key"] = "desaturateArrow",
["Value"] = false,
["Name"] = "Use White Arrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1741042861,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_tankbuster.png",
["Enabled"] = false,
["Revision"] = 1285,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Abilities casted on the tank.",
["NpcNames"] = {
},
["SpellIds"] = {
280604,
1215411,
1215065,
331316,
320644,
330586,
323515,
324079,
434773,
432229,
439031,
473351,
459799,
469478,
465666,
466190,
448485,
424414,
448515,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.1098039299249649,
0.1137254983186722,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.1,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 0,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.1,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 2,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 10,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --don't execute if the player is not the tank\n    if (not Plater.IsPlayerTank()) then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["version"] = -1,
["Name"] = "Cast - Tankbuster [P]",
},
},
["plater_resources_anchor"] = {
["y"] = 40,
["x"] = 0,
["side"] = 8,
},
["saved_cvars"] = {
["nameplateShowOnlyNames"] = "1",
["nameplateOverlapV"] = "1.1000000238419",
["ShowNamePlateLoseAggroFlash"] = "1",
["nameplateShowEnemyMinus"] = "1",
["NamePlateClassificationScale"] = "1",
["nameplateShowFriendlyTotems"] = "0",
["nameplatePersonalHideDelaySeconds"] = "0.2",
["nameplateShowFriendlyPets"] = "0",
["nameplatePersonalShowInCombat"] = "1",
["nameplateTargetRadialPosition"] = "1",
["nameplateMinAlpha"] = "0.90135484",
["nameplateResourceOnTarget"] = "0",
["nameplateShowAll"] = "1",
["nameplateMaxDistance"] = "100",
["nameplateShowFriendlyMinions"] = "0",
["nameplateSelfScale"] = "1.0",
["nameplateTargetBehindMaxDistance"] = "30",
["SoftTargetInteract"] = "3",
["nameplateShowEnemies"] = "1",
["NamePlateVerticalScale"] = "1",
["nameplateSelectedAlpha"] = "1",
["nameplateShowSelf"] = "0",
["nameplateShowPersonalCooldowns"] = "0",
["nameplatePersonalShowAlways"] = "0",
["nameplateMotionSpeed"] = "0.05",
["nameplateGlobalScale"] = "1.0",
["nameplateShowEnemyMinions"] = "1",
["nameplateShowFriendlyNPCs"] = "0",
["nameplateSelectedScale"] = "1.15",
["nameplateShowFriends"] = "0",
["nameplateMotion"] = "1",
["nameplateShowFriendlyBuffs"] = "0",
["nameplateMinScale"] = "1",
["nameplatePersonalShowWithTarget"] = "0",
["nameplateOtherTopInset"] = "0.085",
["NamePlateHorizontalScale"] = "1",
["nameplateSelfBottomInset"] = "0.2",
["nameplateOccludedAlphaMult"] = "1",
["nameplateShowFriendlyGuardians"] = "0",
["nameplateSelfAlpha"] = "0.75",
["nameplateSelfTopInset"] = "0.5",
["ShowClassColorInNameplate"] = "1",
["nameplateLargeTopInset"] = "0.085",
["nameplateMinAlphaDistance"] = "-158489.31924611",
},
["color_override_colors"] = {
[3] = {
nil,
0.2784313,
0.2078431,
},
[4] = {
1,
0.83921568627451,
0,
},
[5] = {
0.29019607843137,
1,
0.19607843137255,
},
},
["extra_icon_caster_name"] = false,
["login_counter"] = 27141,
["version"] = 3,
["aura_cooldown_show_swipe"] = false,
["extra_icon_caster_size"] = 10,
["target_shady_enabled"] = false,
["blizzard_nameplate_font_size"] = 10,
["extra_icon_auras_mine"] = {
["277242"] = false,
["224991"] = true,
},
["plater_resources_show"] = false,
["bossmod_aura_height"] = 32,
["no_spellname_length_limit"] = true,
["aura_stack_font"] = "Quazii",
["patch_version"] = 39,
["blizzard_nameplate_font"] = "Quazii",
["target_highlight_height"] = 18,
["aura_timer_text_size"] = 10,
["extra_icon_show_timer"] = false,
["auto_toggle_combat"] = {
["blizz_healthbar_ic"] = true,
["blizz_healthbar_ooc"] = true,
},
["number_region_first_run"] = true,
["target_highlight_alpha"] = 1,
["click_space_friendly"] = {
92,
1,
},
["extra_icon_caster_font"] = "Quazii",
["aura_tracker"] = {
["debuff_banned"] = {
[458478] = false,
[449217] = true,
[447513] = true,
[1490] = false,
["284678"] = true,
[273977] = false,
[391568] = false,
["340007"] = true,
[376084] = true,
["330911"] = true,
[440340] = true,
[394933] = true,
[452229] = true,
[206930] = false,
["327980"] = true,
["331653"] = true,
["281242"] = true,
[452545] = false,
["299151"] = true,
},
["buff_banned"] = {
["206150"] = true,
[442624] = false,
["333553"] = true,
["61574"] = true,
["281242"] = true,
["61573"] = true,
},
["debuff_tracked"] = {
["341408"] = true,
["324652"] = false,
["281242"] = true,
},
["buff_tracked"] = {
["280001"] = true,
["328501"] = false,
[233210] = true,
[297133] = true,
["329181"] = false,
[163689] = true,
[227931] = true,
},
["debuff"] = {
224991,
277950,
},
},
["plater_resources_personal_bar"] = false,
["aura_x_offset"] = 0,
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1.200000047683716,
},
},
["pet_height_scale"] = 0.9999999403953552,
["cast_statusbar_spark_color"] = {
0.98823529411765,
[3] = 0.94117647058823,
},
["cast_statusbar_spark_offset"] = -13,
["dps"] = {
["colors"] = {
["aggro"] = {
nil,
0.0470588281750679,
},
["pulling"] = {
nil,
0.96078431372549,
0.95294117647059,
},
},
},
["resources"] = {
["scale"] = 0.79999995231628,
["y_offset"] = 1,
["y_offset_target"] = 9,
},
["cast_statusbar_bgcolor"] = {
0,
0,
0,
0.79781,
},
["aura_show_tooltip"] = true,
["aura_cooldown_reverse"] = false,
["npc_colors"] = {
[0] = {
true,
false,
"fuchsia",
},
[190404] = {
true,
false,
"aqua",
},
[196798] = {
true,
false,
"fuchsia",
},
[231197] = {
true,
false,
"aqua",
},
[231325] = {
true,
false,
"orange",
},
[196671] = {
true,
false,
"aqua",
},
[211121] = {
true,
false,
"orange",
},
[216364] = {
true,
false,
"fuchsia",
},
[195265] = {
true,
false,
"fuchsia",
},
[180432] = {
true,
false,
"fuchsia",
},
[173655] = {
true,
false,
"aqua",
},
[173016] = {
true,
false,
"fuchsia",
},
[129602] = {
true,
false,
"aqua",
},
[229537] = {
true,
false,
"orange",
},
[131585] = {
false,
false,
"navajowhite",
},
[120651] = {
true,
false,
"darkorange",
},
[212786] = {
true,
false,
"aqua",
},
[213937] = {
true,
false,
"aqua",
},
[197697] = {
true,
false,
"aqua",
},
[40633] = {
true,
false,
"aqua",
},
[135167] = {
false,
false,
"peru",
},
[214066] = {
true,
false,
"fuchsia",
},
[131587] = {
true,
false,
"fuchsia",
},
[126918] = {
false,
false,
"lightskyblue",
},
[196548] = {
true,
false,
"fuchsia",
},
[218671] = {
true,
false,
"fuchsia",
},
[236190] = {
true,
false,
"aqua",
},
[186191] = {
true,
false,
"fuchsia",
},
[206140] = {
true,
false,
"fuchsia",
},
[208698] = {
true,
false,
"fuchsia",
},
[221102] = {
true,
false,
"fuchsia",
},
[127111] = {
false,
false,
"fuchsia",
},
[168418] = {
true,
false,
"fuchsia",
},
[213942] = {
true,
false,
"fuchsia",
},
[199748] = {
true,
false,
"fuchsia",
},
[165222] = {
true,
false,
"fuchsia",
},
[199749] = {
true,
false,
"aqua",
},
[199877] = {
true,
false,
"fuchsia",
},
[168420] = {
true,
false,
"fuchsia",
},
[212793] = {
true,
false,
"fuchsia",
},
[178139] = {
true,
false,
"fuchsia",
},
[187602] = {
true,
false,
"dodgerblue",
},
[184022] = {
true,
false,
"fuchsia",
},
[128967] = {
false,
false,
"palegreen",
},
[210109] = {
true,
false,
"aqua",
},
[212411] = {
true,
false,
"orange",
},
[184023] = {
true,
false,
"fuchsia",
},
[134024] = {
true,
false,
"fuchsia",
},
[178141] = {
true,
false,
"palegreen",
},
[212412] = {
true,
false,
"fuchsia",
},
[83892] = {
true,
false,
"fuchsia",
},
[178142] = {
true,
false,
"fuchsia",
},
[98406] = {
false,
false,
"transparent",
},
[137478] = {
false,
false,
"lightskyblue",
},
[132491] = {
false,
false,
"palegreen",
},
[200137] = {
true,
false,
"fuchsia",
},
[135049] = {
true,
false,
"fuchsia",
},
[211263] = {
true,
false,
"aqua",
},
[164461] = {
true,
false,
"fuchsia",
},
[83893] = {
true,
false,
"fuchsia",
},
[128969] = {
true,
false,
"fuchsia",
},
[99366] = {
true,
false,
"fuchsia",
},
[220599] = {
true,
false,
"fuchsia",
},
[207940] = {
true,
false,
"fuchsia",
},
[223541] = {
true,
false,
"aqua",
},
[217531] = {
true,
false,
"fuchsia",
},
[98280] = {
true,
false,
"fuchsia",
},
[225204] = {
true,
false,
"fuchsia",
},
[205384] = {
true,
false,
"fuchsia",
},
[212673] = {
true,
false,
"aqua",
},
[136076] = {
false,
false,
"lightcoral",
},
[134158] = {
false,
false,
"navajowhite",
},
[172265] = {
true,
false,
"fuchsia",
},
[217533] = {
true,
false,
"fuchsia",
},
[220730] = {
true,
false,
"aqua",
},
[165872] = {
true,
false,
"fuchsia",
},
[214209] = {
true,
false,
"fuchsia",
},
[131858] = {
false,
false,
"dodgerblue",
},
[129547] = {
false,
false,
"fuchsia",
},
[45912] = {
true,
false,
"fuchsia",
},
[127757] = {
false,
false,
"lightcoral",
},
[208456] = {
true,
false,
"fuchsia",
},
[189531] = {
true,
false,
"fuchsia",
},
[137486] = {
false,
false,
"lightskyblue",
},
[219454] = {
true,
false,
"fuchsia",
},
[137103] = {
false,
false,
"lightsalmon",
},
[207946] = {
true,
false,
"fuchsia",
},
[162039] = {
true,
false,
"fuchsia",
},
[75713] = {
true,
false,
"fuchsia",
},
[138255] = {
false,
false,
"maroon",
},
[162040] = {
true,
false,
"fuchsia",
},
[195927] = {
true,
false,
"fuchsia",
},
[181861] = {
true,
false,
"aqua",
},
[195928] = {
true,
false,
"fuchsia",
},
[97197] = {
true,
false,
"fuchsia",
},
[126928] = {
false,
false,
"navajowhite",
},
[203857] = {
true,
false,
"fuchsia",
},
[195929] = {
true,
false,
"fuchsia",
},
[221760] = {
true,
false,
"fuchsia",
},
[131864] = {
true,
false,
"fuchsia",
},
[231223] = {
true,
false,
"fuchsia",
},
[186339] = {
true,
false,
"fuchsia",
},
[223423] = {
true,
false,
"aqua",
},
[195930] = {
true,
false,
"fuchsia",
},
[104295] = {
true,
false,
"fuchsia",
},
[193373] = {
true,
false,
"fuchsia",
},
[228539] = {
true,
false,
"fuchsia",
},
[133912] = {
true,
false,
"fuchsia",
},
[136214] = {
false,
false,
"plum",
},
[136470] = {
true,
false,
"fuchsia",
},
[90997] = {
true,
false,
"aqua",
},
[173044] = {
true,
false,
"fuchsia",
},
[214348] = {
true,
false,
"fuchsia",
},
[90998] = {
true,
false,
"fuchsia",
},
[224962] = {
true,
false,
"fuchsia",
},
[168058] = {
true,
false,
"fuchsia",
},
[105704] = {
true,
false,
"fuchsia",
},
[127315] = {
false,
false,
"plum",
},
[129553] = {
true,
false,
"fuchsia",
},
[174197] = {
true,
false,
"magenta",
},
[214350] = {
true,
false,
"fuchsia",
},
[168443] = {
true,
false,
"fuchsia",
},
[84989] = {
true,
false,
"fuchsia",
},
[196576] = {
true,
false,
"fuchsia",
},
[180336] = {
true,
false,
"fuchsia",
},
[170490] = {
true,
false,
"fuchsia",
},
[168572] = {
true,
false,
"fuchsia",
},
[134174] = {
false,
false,
"honeydew",
},
[225605] = {
true,
false,
"fuchsia",
},
[91000] = {
true,
false,
"aqua",
},
[84990] = {
true,
false,
"fuchsia",
},
[81985] = {
true,
false,
"fuchsia",
},
[122969] = {
true,
false,
"fuchsia",
},
[100527] = {
true,
false,
"fuchsia",
},
[197985] = {
true,
false,
"fuchsia",
},
[163459] = {
true,
false,
"fuchsia",
},
[178165] = {
true,
false,
"orange",
},
[104300] = {
true,
false,
"fuchsia",
},
[233152] = {
true,
false,
"orange",
},
[131492] = {
true,
false,
"fuchsia",
},
[76104] = {
true,
false,
"fuchsia",
},
[135329] = {
false,
false,
"plum",
},
[210264] = {
true,
false,
"aqua",
},
[219983] = {
true,
false,
"aqua",
},
[136353] = {
false,
false,
"royalblue",
},
[123227] = {
true,
false,
"fuchsia",
},
[219984] = {
true,
false,
"fuchsia",
},
[228424] = {
true,
false,
"fuchsia",
},
[162057] = {
true,
false,
"fuchsia",
},
[211289] = {
true,
false,
"orange",
},
[207453] = {
true,
false,
"fuchsia",
},
[186226] = {
true,
false,
"fuchsia",
},
[135204] = {
false,
false,
"honeydew",
},
[122972] = {
true,
false,
"fuchsia",
},
[205152] = {
true,
false,
"aqua",
},
[129366] = {
false,
false,
"goldenrod",
},
[170882] = {
true,
false,
"magenta",
},
[178171] = {
true,
false,
"aqua",
},
[139425] = {
false,
false,
"honeydew",
},
[218324] = {
true,
false,
"aqua",
},
[207199] = {
true,
false,
"fuchsia",
},
[196202] = {
true,
false,
"fuchsia",
},
[212826] = {
true,
false,
"orange",
},
[122973] = {
true,
false,
"fuchsia",
},
[100531] = {
true,
false,
"aqua",
},
[210269] = {
true,
false,
"orange",
},
[236995] = {
true,
false,
"aqua",
},
[207456] = {
true,
false,
"fuchsia",
},
[186229] = {
true,
false,
"aqua",
},
[129559] = {
false,
false,
"navajowhite",
},
[186741] = {
true,
false,
"fuchsia",
},
[174210] = {
true,
false,
"magenta",
},
[100532] = {
true,
false,
"fuchsia",
},
[207202] = {
true,
false,
"fuchsia",
},
[165515] = {
false,
false,
"aqua",
},
[229069] = {
true,
false,
"fuchsia",
},
[137511] = {
false,
false,
"navajowhite",
},
[217561] = {
true,
false,
"fuchsia",
},
[91006] = {
true,
false,
"fuchsia",
},
[40484] = {
true,
false,
"aqua",
},
[205158] = {
true,
false,
"fuchsia",
},
[195696] = {
true,
false,
"magenta",
},
[213343] = {
true,
false,
"aqua",
},
[171656] = {
true,
false,
"fuchsia",
},
[138281] = {
true,
false,
"aqua",
},
[213216] = {
true,
false,
"aqua",
},
[187897] = {
true,
false,
"aqua",
},
[129370] = {
true,
false,
"fuchsia",
},
[213217] = {
true,
false,
"fuchsia",
},
[207207] = {
true,
false,
"fuchsia",
},
[144293] = {
true,
false,
"orange",
},
[165137] = {
true,
false,
"fuchsia",
},
[234957] = {
true,
false,
"fuchsia",
},
[206697] = {
true,
false,
"fuchsia",
},
[137517] = {
false,
false,
"peru",
},
[130011] = {
true,
false,
"aqua",
},
[242631] = {
true,
false,
"orange",
},
[105715] = {
true,
false,
"fuchsia",
},
[212453] = {
true,
false,
"fuchsia",
},
[144296] = {
true,
false,
"aqua",
},
[179334] = {
true,
false,
"aqua",
},
[132532] = {
false,
false,
"palegreen",
},
[234960] = {
true,
false,
"aqua",
},
[164501] = {
false,
false,
"fuchsia",
},
[224219] = {
true,
false,
"fuchsia",
},
[191739] = {
true,
false,
"aqua",
},
[224731] = {
false,
false,
"fuchsia",
},
[168594] = {
true,
false,
"fuchsia",
},
[144298] = {
true,
false,
"orange",
},
[176395] = {
true,
false,
"fuchsia",
},
[234962] = {
true,
false,
"fuchsia",
},
[167956] = {
true,
false,
"fuchsia",
},
[184580] = {
true,
false,
"fuchsia",
},
[129374] = {
true,
false,
"aqua",
},
[190207] = {
true,
false,
"fuchsia",
},
[169875] = {
true,
false,
"magenta",
},
[184581] = {
true,
false,
"aqua",
},
[104247] = {
true,
false,
"fuchsia",
},
[130909] = {
true,
false,
"aqua",
},
[186116] = {
true,
false,
"fuchsia",
},
[220003] = {
true,
false,
"aqua",
},
[206065] = {
true,
false,
"fuchsia",
},
[165529] = {
true,
false,
"magenta",
},
[98813] = {
true,
false,
"fuchsia",
},
[231385] = {
true,
false,
"aqua",
},
[45922] = {
true,
false,
"fuchsia",
},
[206066] = {
true,
false,
"fuchsia",
},
[214762] = {
true,
false,
"orange",
},
[186246] = {
true,
false,
"fuchsia",
},
[92612] = {
true,
false,
"aqua",
},
[166299] = {
true,
false,
"fuchsia",
},
[190340] = {
true,
false,
"aqua",
},
[136249] = {
false,
false,
"plum",
},
[204918] = {
true,
false,
"fuchsia",
},
[223844] = {
true,
false,
"fuchsia",
},
[171799] = {
true,
false,
"fuchsia",
},
[167963] = {
true,
false,
"fuchsia",
},
[180495] = {
true,
false,
"aqua",
},
[199037] = {
true,
false,
"fuchsia",
},
[206710] = {
true,
false,
"orange",
},
[101437] = {
false,
false,
"fuchsia",
},
[122984] = {
false,
false,
"peru",
},
[41096] = {
true,
false,
"fuchsia",
},
[166302] = {
true,
false,
"fuchsia",
},
[167965] = {
true,
false,
"fuchsia",
},
[226404] = {
true,
false,
"aqua",
},
[195842] = {
true,
false,
"fuchsia",
},
[163618] = {
true,
false,
"fuchsia",
},
[186125] = {
true,
false,
"fuchsia",
},
[190345] = {
true,
false,
"fuchsia",
},
[167967] = {
true,
false,
"fuchsia",
},
[137405] = {
true,
false,
"fuchsia",
},
[206074] = {
true,
false,
"fuchsia",
},
[205691] = {
true,
false,
"fuchsia",
},
[98370] = {
true,
false,
"fuchsia",
},
[239834] = {
true,
false,
"orange",
},
[163621] = {
true,
false,
"aqua",
},
[168992] = {
true,
false,
"fuchsia",
},
[134338] = {
false,
false,
"navajowhite",
},
[45477] = {
true,
false,
"aqua",
},
[196102] = {
true,
false,
"fuchsia",
},
[177816] = {
false,
false,
"fuchsia",
},
[98243] = {
true,
false,
"aqua",
},
[190348] = {
true,
false,
"fuchsia",
},
[239836] = {
true,
false,
"orange",
},
[177817] = {
true,
false,
"fuchsia",
},
[135235] = {
false,
false,
"goldenrod",
},
[165414] = {
true,
false,
"magenta",
},
[151476] = {
true,
false,
"aqua",
},
[136643] = {
true,
false,
"orange",
},
[165415] = {
false,
false,
"aqua",
},
[194315] = {
true,
false,
"fuchsia",
},
[130661] = {
true,
false,
"fuchsia",
},
[214264] = {
true,
false,
"aqua",
},
[168357] = {
true,
false,
"fuchsia",
},
[187155] = {
true,
false,
"fuchsia",
},
[210812] = {
true,
false,
"fuchsia",
},
[163882] = {
true,
false,
"fuchsia",
},
[195851] = {
false,
false,
"white",
},
[134599] = {
false,
false,
"lightskyblue",
},
[194317] = {
true,
false,
"fuchsia",
},
[169893] = {
true,
false,
"aqua",
},
[224240] = {
true,
false,
"aqua",
},
[134600] = {
false,
false,
"peru",
},
[201223] = {
true,
false,
"fuchsia",
},
[135240] = {
true,
false,
"fuchsia",
},
[217208] = {
true,
false,
"fuchsia",
},
[59545] = {
true,
false,
"fuchsia",
},
[135241] = {
true,
false,
"fuchsia",
},
[133835] = {
true,
false,
"fuchsia",
},
[222964] = {
true,
false,
"fuchsia",
},
[100485] = {
true,
false,
"aqua",
},
[133836] = {
true,
false,
"fuchsia",
},
[187160] = {
true,
false,
"aqua",
},
[187033] = {
true,
false,
"aqua",
},
[210818] = {
true,
false,
"fuchsia",
},
[192788] = {
true,
false,
"fuchsia",
},
[59546] = {
true,
false,
"fuchsia",
},
[102788] = {
true,
false,
"fuchsia",
},
[189464] = {
true,
false,
"fuchsia",
},
[76446] = {
true,
false,
"dodgerblue",
},
[198927] = {
true,
false,
"aqua",
},
[134990] = {
false,
false,
"honeydew",
},
[138187] = {
true,
false,
"fuchsia",
},
[197905] = {
true,
false,
"fuchsia",
},
[131666] = {
true,
false,
"fuchsia",
},
[212739] = {
true,
false,
"orange",
},
[163891] = {
true,
false,
"fuchsia",
},
[45928] = {
true,
false,
"aqua",
},
[144071] = {
true,
false,
"fuchsia",
},
[190362] = {
true,
false,
"fuchsia",
},
[224249] = {
true,
false,
"aqua",
},
[223994] = {
true,
false,
"fuchsia",
},
[213892] = {
true,
false,
"fuchsia",
},
[220158] = {
true,
false,
"aqua",
},
[163126] = {
true,
false,
"fuchsia",
},
[193944] = {
true,
false,
"fuchsia",
},
[81819] = {
true,
false,
"fuchsia",
},
[213893] = {
true,
false,
"fuchsia",
},
[131670] = {
false,
false,
"palegreen",
},
[189470] = {
true,
false,
"fuchsia",
},
[163128] = {
true,
false,
"fuchsia",
},
[168627] = {
true,
false,
"fuchsia",
},
[186658] = {
true,
false,
"fuchsia",
},
[206351] = {
true,
false,
"fuchsia",
},
[164920] = {
true,
false,
"aqua",
},
[216326] = {
true,
false,
"fuchsia",
},
[131545] = {
true,
false,
"fuchsia",
},
[190368] = {
true,
false,
"fuchsia",
},
[164921] = {
true,
false,
"fuchsia",
},
[167607] = {
true,
false,
"aqua",
},
[168886] = {
true,
false,
"fuchsia",
},
[134232] = {
true,
false,
"fuchsia",
},
[45930] = {
true,
false,
"fuchsia",
},
[180431] = {
true,
false,
"fuchsia",
},
[40943] = {
true,
false,
"fuchsia",
},
[176396] = {
false,
false,
"fuchsia",
},
[89] = {
true,
false,
"fuchsia",
},
[208450] = {
true,
false,
"orange",
},
[179841] = {
true,
false,
"fuchsia",
},
[192800] = {
true,
false,
"fuchsia",
},
[180429] = {
true,
false,
"aqua",
},
[151657] = {
true,
false,
"fuchsia",
},
[190403] = {
true,
false,
"aqua",
},
[213806] = {
true,
false,
"fuchsia",
},
[98275] = {
true,
false,
"aqua",
},
[212827] = {
true,
false,
"fuchsia",
},
[211087] = {
true,
false,
"fuchsia",
},
[180091] = {
true,
false,
"aqua",
},
[234872] = {
false,
false,
"fuchsia",
},
[131677] = {
false,
false,
"lightskyblue",
},
[134157] = {
false,
false,
"peru",
},
[206064] = {
true,
false,
"fuchsia",
},
[133463] = {
true,
false,
"orange",
},
[135258] = {
false,
false,
"peru",
},
[130404] = {
false,
false,
"peru",
},
[220423] = {
true,
false,
"aqua",
},
[213934] = {
true,
false,
"aqua",
},
[164414] = {
true,
false,
"fuchsia",
},
[133852] = {
false,
false,
"olivedrab",
},
[128434] = {
true,
false,
"fuchsia",
},
[190373] = {
true,
false,
"fuchsia",
},
[134364] = {
false,
false,
"honeydew",
},
[211089] = {
true,
false,
"aqua",
},
[205363] = {
true,
false,
"fuchsia",
},
[234955] = {
true,
false,
"orange",
},
[210539] = {
true,
false,
"orange",
},
[167612] = {
true,
false,
"orange",
},
[84957] = {
true,
false,
"fuchsia",
},
[197535] = {
true,
false,
"fuchsia",
},
[208193] = {
true,
false,
"fuchsia",
},
[230740] = {
true,
false,
"aqua",
},
[197912] = {
true,
false,
"fuchsia",
},
[198047] = {
true,
false,
"fuchsia",
},
[207198] = {
true,
false,
"fuchsia",
},
[137484] = {
false,
false,
"lightskyblue",
},
[128435] = {
false,
false,
"aqua",
},
[223776] = {
true,
false,
"fuchsia",
},
[136186] = {
false,
false,
"honeydew",
},
[224732] = {
true,
false,
"fuchsia",
},
[133007] = {
true,
false,
"aqua",
},
[176565] = {
true,
false,
"fuchsia",
},
[205337] = {
true,
false,
"fuchsia",
},
[153292] = {
false,
false,
"fuchsia",
},
[231075] = {
true,
false,
"aqua",
},
[165824] = {
true,
false,
"fuchsia",
},
[164929] = {
true,
false,
"aqua",
},
[212403] = {
true,
false,
"fuchsia",
},
[43873] = {
true,
false,
"aqua",
},
[139422] = {
false,
false,
"lightskyblue",
},
[196115] = {
true,
false,
"fuchsia",
},
[214673] = {
true,
false,
"fuchsia",
},
[135007] = {
false,
false,
"lightskyblue",
},
[190377] = {
true,
false,
"fuchsia",
},
[135263] = {
false,
false,
"maroon",
},
[177716] = {
true,
false,
"fuchsia",
},
[195876] = {
true,
false,
"fuchsia",
},
[45919] = {
true,
false,
"aqua",
},
[196044] = {
true,
false,
"fuchsia",
},
[199368] = {
true,
false,
"DEATHKNIGHT",
},
[188067] = {
true,
false,
"fuchsia",
},
[229252] = {
true,
false,
"fuchsia",
},
[210966] = {
true,
false,
"fuchsia",
},
[134150] = {
false,
false,
"navajowhite",
},
[195877] = {
true,
false,
"fuchsia",
},
[216293] = {
true,
false,
"fuchsia",
},
[98706] = {
true,
false,
"aqua",
},
[179893] = {
true,
false,
"aqua",
},
[163086] = {
true,
false,
"orange",
},
[164804] = {
true,
false,
"aqua",
},
[190294] = {
true,
false,
"fuchsia",
},
[213338] = {
true,
false,
"fuchsia",
},
[195878] = {
true,
false,
"fuchsia",
},
[137521] = {
false,
false,
"cornflowerblue",
},
[131685] = {
true,
false,
"fuchsia",
},
[102287] = {
true,
false,
"aqua",
},
[163503] = {
true,
false,
"fuchsia",
},
[189247] = {
true,
false,
"fuchsia",
},
[194894] = {
true,
false,
"fuchsia",
},
[223773] = {
true,
false,
"fuchsia",
},
[216339] = {
true,
false,
"fuchsia",
},
[214421] = {
true,
false,
"orange",
},
[168318] = {
true,
false,
"fuchsia",
},
[220815] = {
true,
false,
"fuchsia",
},
[122971] = {
true,
false,
"fuchsia",
},
[95766] = {
true,
false,
"aqua",
},
[200126] = {
true,
false,
"fuchsia",
},
[192333] = {
true,
false,
"fuchsia",
},
[176564] = {
true,
false,
"aqua",
},
[166275] = {
true,
false,
"fuchsia",
},
[104270] = {
true,
false,
"fuchsia",
},
[189265] = {
true,
false,
"fuchsia",
},
[205727] = {
true,
false,
"fuchsia",
},
[167876] = {
true,
false,
"orange",
},
[199717] = {
true,
false,
"fuchsia",
},
[138465] = {
true,
false,
"aqua",
},
[134629] = {
false,
false,
"navajowhite",
},
[59552] = {
true,
false,
"fuchsia",
},
[167493] = {
true,
false,
"fuchsia",
},
[170690] = {
true,
false,
"magenta",
},
[192789] = {
true,
false,
"aqua",
},
[131586] = {
false,
false,
"peru",
},
[138338] = {
true,
false,
"fuchsia",
},
[216338] = {
true,
false,
"orange",
},
[216342] = {
true,
false,
"fuchsia",
},
[219040] = {
true,
false,
"aqua",
},
[136549] = {
true,
false,
"aqua",
},
[131817] = {
true,
false,
"aqua",
},
[220946] = {
true,
false,
"orange",
},
[213913] = {
true,
false,
"fuchsia",
},
[224271] = {
true,
false,
"fuchsia",
},
[167111] = {
true,
false,
"fuchsia",
},
[211228] = {
true,
false,
"fuchsia",
},
[206704] = {
true,
false,
"orange",
},
[144295] = {
true,
false,
"fuchsia",
},
[131818] = {
false,
false,
"plum",
},
[204206] = {
true,
false,
"fuchsia",
},
[229251] = {
true,
false,
"orange",
},
[163458] = {
true,
false,
"fuchsia",
},
[179388] = {
true,
false,
"fuchsia",
},
[196045] = {
true,
false,
"fuchsia",
},
[168578] = {
true,
false,
"fuchsia",
},
[75979] = {
true,
false,
"fuchsia",
},
[131819] = {
true,
false,
"fuchsia",
},
[189235] = {
true,
false,
"fuchsia",
},
[131436] = {
true,
false,
"aqua",
},
[136295] = {
false,
false,
"peru",
},
[95769] = {
true,
false,
"fuchsia",
},
[133482] = {
true,
false,
"aqua",
},
[41139] = {
true,
false,
"fuchsia",
},
[137830] = {
true,
false,
"fuchsia",
},
[96664] = {
true,
false,
"fuchsia",
},
[59555] = {
true,
false,
"fuchsia",
},
[141283] = {
false,
false,
"navajowhite",
},
[190342] = {
true,
false,
"fuchsia",
},
[185528] = {
true,
false,
"fuchsia",
},
[185656] = {
true,
false,
"fuchsia",
},
[126919] = {
true,
false,
"fuchsia",
},
[102232] = {
true,
false,
"fuchsia",
},
[164557] = {
true,
false,
"orange",
},
[113537] = {
true,
false,
"aqua",
},
[193457] = {
true,
false,
"aqua",
},
[134251] = {
false,
false,
"honeydew",
},
[185529] = {
true,
false,
"fuchsia",
},
[141284] = {
false,
false,
"lightskyblue",
},
[134331] = {
false,
false,
"lightskyblue",
},
[169927] = {
true,
false,
"fuchsia",
},
[133432] = {
true,
false,
"fuchsia",
},
[206696] = {
true,
false,
"orange",
},
[129529] = {
false,
false,
"goldenrod",
},
[223253] = {
true,
false,
"fuchsia",
},
[45935] = {
true,
false,
"fuchsia",
},
[228540] = {
true,
false,
"fuchsia",
},
[194316] = {
true,
false,
"fuchsia",
},
[193462] = {
true,
false,
"fuchsia",
},
[242209] = {
true,
false,
"fuchsia",
},
[95834] = {
true,
false,
"fuchsia",
},
[95842] = {
true,
false,
"fuchsia",
},
[164506] = {
true,
false,
"fuchsia",
},
[133430] = {
true,
false,
"orange",
},
[208165] = {
true,
false,
"fuchsia",
},
[134144] = {
false,
false,
"lightgreen",
},
[220141] = {
true,
false,
"fuchsia",
},
[133870] = {
true,
false,
"fuchsia",
},
[141285] = {
false,
false,
"lightgreen",
},
[95771] = {
true,
false,
"fuchsia",
},
[193293] = {
true,
false,
"aqua",
},
[220314] = {
true,
false,
"fuchsia",
},
[81820] = {
true,
false,
"fuchsia",
},
[190405] = {
true,
false,
"fuchsia",
},
[189266] = {
true,
false,
"aqua",
},
[186220] = {
true,
false,
"fuchsia",
},
[207459] = {
true,
false,
"fuchsia",
},
[231312] = {
true,
false,
"fuchsia",
},
[131821] = {
true,
false,
"fuchsia",
},
[207969] = {
true,
false,
"fuchsia",
},
[98521] = {
true,
false,
"fuchsia",
},
[135474] = {
true,
false,
"fuchsia",
},
[170572] = {
true,
false,
"fuchsia",
},
[164562] = {
true,
false,
"fuchsia",
},
[134701] = {
false,
false,
"maroon",
},
[220060] = {
true,
false,
"fuchsia",
},
[137516] = {
false,
false,
"lightsalmon",
},
[130435] = {
false,
false,
"magenta",
},
[133685] = {
true,
false,
"fuchsia",
},
[135239] = {
false,
false,
"paleturquoise",
},
[190407] = {
true,
false,
"fuchsia",
},
[135365] = {
true,
false,
"fuchsia",
},
[221979] = {
true,
false,
"fuchsia",
},
[139949] = {
false,
false,
"honeydew",
},
[179269] = {
true,
false,
"fuchsia",
},
[190381] = {
true,
false,
"fuchsia",
},
[163157] = {
true,
false,
"fuchsia",
},
[212389] = {
true,
false,
"fuchsia",
},
[223770] = {
true,
false,
"fuchsia",
},
[235151] = {
true,
false,
"fuchsia",
},
[136934] = {
true,
false,
"lightgreen",
},
[144294] = {
true,
false,
"fuchsia",
},
[134139] = {
false,
false,
"lightskyblue",
},
[165076] = {
true,
false,
"magenta",
},
[134514] = {
false,
false,
"lightgreen",
},
[129788] = {
true,
false,
"fuchsia",
},
[207468] = {
true,
false,
"fuchsia",
},
[197698] = {
true,
false,
"aqua",
},
[184130] = {
true,
false,
"aqua",
},
[199603] = {
true,
false,
"fuchsia",
},
[186420] = {
true,
false,
"fuchsia",
},
[131318] = {
false,
false,
"fuchsia",
},
[98691] = {
false,
false,
"aqua",
},
[164552] = {
true,
false,
"fuchsia",
},
[223772] = {
true,
false,
"fuchsia",
},
[191164] = {
true,
false,
"fuchsia",
},
[212775] = {
true,
false,
"fuchsia",
},
[47238] = {
true,
false,
"fuchsia",
},
[144303] = {
false,
false,
"fuchsia",
},
[165919] = {
true,
false,
"fuchsia",
},
[125977] = {
false,
false,
"plum",
},
[196043] = {
true,
false,
"fuchsia",
},
[104278] = {
true,
false,
"fuchsia",
},
[164567] = {
true,
false,
"fuchsia",
},
[184132] = {
true,
false,
"fuchsia",
},
[168942] = {
true,
false,
"fuchsia",
},
[134284] = {
true,
false,
"fuchsia",
},
[194895] = {
true,
false,
"fuchsia",
},
[231496] = {
true,
false,
"fuchsia",
},
[214439] = {
true,
false,
"fuchsia",
},
[131812] = {
true,
false,
"fuchsia",
},
[231380] = {
true,
false,
"fuchsia",
},
[230748] = {
true,
false,
"fuchsia",
},
[128455] = {
true,
false,
"aqua",
},
[153285] = {
false,
false,
"no color",
},
[149740] = {
true,
false,
"aqua",
},
[98792] = {
true,
false,
"aqua",
},
[132126] = {
false,
false,
"honeydew",
},
[223775] = {
true,
false,
"fuchsia",
},
[130635] = {
true,
false,
"fuchsia",
},
[208438] = {
true,
false,
"aqua",
},
[229686] = {
true,
false,
"fuchsia",
},
[220195] = {
true,
false,
"fuchsia",
},
[40167] = {
true,
false,
"fuchsia",
},
[184301] = {
true,
false,
"fuchsia",
},
[191847] = {
true,
false,
"fuchsia",
},
[113998] = {
true,
false,
"aqua",
},
[214697] = {
true,
false,
"orange",
},
[189340] = {
true,
false,
"aqua",
},
[190401] = {
true,
false,
"aqua",
},
[220196] = {
true,
false,
"fuchsia",
},
[134417] = {
false,
false,
"lightskyblue",
},
[91001] = {
true,
false,
"aqua",
},
[134418] = {
false,
false,
"dodgerblue",
},
[223777] = {
true,
false,
"fuchsia",
},
[75459] = {
true,
false,
"fuchsia",
},
[177998] = {
true,
false,
"fuchsia",
},
[134137] = {
false,
false,
"dodgerblue",
},
[220197] = {
true,
false,
"aqua",
},
[127106] = {
false,
false,
"peru",
},
[206698] = {
true,
false,
"fuchsia",
},
[231839] = {
true,
false,
"orange",
},
[101991] = {
true,
false,
"fuchsia",
},
[174802] = {
true,
false,
"fuchsia",
},
[177999] = {
true,
false,
"fuchsia",
},
[213932] = {
true,
false,
"fuchsia",
},
[129600] = {
true,
false,
"fuchsia",
},
[44404] = {
true,
false,
"fuchsia",
},
[209801] = {
true,
false,
"aqua",
},
[40634] = {
true,
false,
"fuchsia",
},
[129367] = {
true,
false,
"fuchsia",
},
[160495] = {
true,
false,
"magenta",
},
[205151] = {
true,
false,
"aqua",
},
},
["aura_timer_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["auras_per_row_amount"] = 4,
["border_color"] = {
nil,
nil,
nil,
0.8352941870689392,
},
["cast_statusbar_spark_width"] = 25,
["indicator_elite"] = false,
},
["Default"] = {
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage(unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    self.BigSparkle = self.BigSparkle or Plater:CreateImage(self.FrameOverlay)\n    self.BigSparkle.texture = [[Interface\\AddOns\\Plater\\images\\cast_bar_vertical_spark.png]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    self.BigSparkle:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    self.BigSparkle:ClearAllPoints()\n    self.BigSparkle:SetPoint (\"topleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 0)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\nend\n\n\n\n\n",
["Time"] = 1719711112,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_important_bycolor.png",
["Enabled"] = true,
["Revision"] = 831,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Used on casts that make the mob explode, summon or transform if the cast passes.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    self.BigSparkle:Show()\n    self.BigSparkle:SetWidth(8)\n    self.BigSparkle:SetHeight(self:GetHeight() + unitFrame.healthBar:GetHeight())\n    self.BigSparkle:SetScale(1)\n    self.BigSparkle:SetVertexColor(1,1, 1, 1)\n    envTable.overlaySpark:Hide()\n    \n    self.Spark:Hide()\n    \n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.dotAnimation:SetPoint(\"bottomright\", self, \"bottomright\", scriptTable.config.xOffset, -scriptTable.config.yOffset)\n    \n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["SpellIds"] = {
432967,
446717,
451379,
451067,
448013,
448057,
322486,
341709,
321226,
429428,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation changing the cast bar color.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "To get a list of color names, use: /plater colors",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Health Bar Height Mod",
},
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = false,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.431372,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 6,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
},
["Name"] = "Color List by SpellId",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["version"] = -1,
["Name"] = "Cast - Important by Color [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["Time"] = 1669327144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 632,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Add the buff name in the trigger box.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
["SpellIds"] = {
398151,
377738,
378149,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Aura - Buff Alert [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    --set the castbar config\n    envTable.configAltCastBar = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end    \n        \n        \n    end\nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable._SpellID == 191284) then\n        Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.70, GetTime(), 191284)\n        \n        C_Timer.After(4.75, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 5.30, GetTime(), 191284)\n        end)\n        \n        C_Timer.After(4.75 + 5.30, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.30, GetTime(), 191284)\n                C_Timer.After(4.50, function() unitFrame.castBar2:Hide() end)\n        end)\n    end\n    \nend",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1671066705,
["url"] = "",
["Icon"] = 134229,
["Enabled"] = false,
["Revision"] = 37,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Start extra cast bars for effects after the cast is done. Setup the effect on On Hide script.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
191284,
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Cast - Effect After Cast [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Time"] = 1670201853,
["url"] = "",
["Icon"] = 2175503,
["Enabled"] = false,
["Revision"] = 533,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Apply several animations when the explosion orb cast starts on a Mythic Dungeon with Explosion Affix",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
["SpellIds"] = {
240446,
385339,
198077,
210261,
360857,
389446,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Name"] = "Arrow Width",
["Value"] = 8,
["Key"] = "arrowWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Arrow Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowHeight",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "Option 18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Nameplate Color",
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = false,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.1843137294054031,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Health Bar Color",
},
},
["version"] = -1,
["Name"] = "Explosion Affix M+ [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Time"] = 1669327144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 368,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Desc"] = "Add the debuff name in the trigger box.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Aura - Debuff Alert [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1719711125,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_shining_green.png",
["Enabled"] = true,
["Revision"] = 873,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\n    \nend",
["SpellIds"] = {
434802,
448248,
453840,
337249,
324293,
49184,
449455,
268702,
268797,
330562,
330868,
341969,
440687,
1214780,
1214468,
426295,
422541,
427011,
427157,
427601,
424420,
444743,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a big animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 4",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Flash",
["Value"] = "Flash:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Key"] = "flashDuration",
["Value"] = 0.8,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shake:",
["Name"] = "Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Key"] = "shakeAmplitude",
["Value"] = 5,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation",
["Value"] = "Dot Animation:",
["Key"] = "option14",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 19",
["Value"] = "Cast Bar",
["Key"] = "option19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["version"] = -1,
["Name"] = "Cast - Shining Green [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1670790652,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_red",
["Enabled"] = false,
["Revision"] = 694,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Used on casts that make the mob explode or transform if the cast passes.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    else\n        envTable.topArrow:Hide()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["SpellIds"] = {
383823,
382670,
388537,
372851,
200682,
192307,
196838,
193827,
194043,
209410,
211464,
361180,
156718,
395859,
358320,
374045,
386757,
367500,
370225,
376200,
372107,
388923,
376934,
384899,
373960,
374724,
385551,
259732,
373424,
373084,
87618,
255041,
428926,
76634,
200050,
197546,
198079,
199193,
266181,
253544,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation showing the explosion time.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Health Bar Height Mod",
},
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.431372,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Arrow:",
["Name"] = "Arrow:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Arrow Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowWidth",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Key"] = "arrowHeight",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Height",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"200682",
"darkslateblue",
},
{
"192307",
"goldenrod",
},
{
"196838",
"maroon",
},
{
"193827",
"darkgreen",
},
{
"194043",
"darkgreen",
},
{
"156718",
"DRUID",
},
{
"395859",
"ROGUE",
},
},
["Name"] = "Color List by SpellId",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["version"] = -1,
["Name"] = "Cast - Ultra Important [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1719452142,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Enabled"] = true,
["Revision"] = 156,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "indicatorColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Vertical Line Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Name"] = "Vertical Line Alpha",
["Value"] = 0.79,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "indicatorAlpha",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Fill Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "fillColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "fillAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Fill Alpha",
},
},
["version"] = -1,
["Name"] = "Add - Health Markers [P]",
["NpcNames"] = {
"214840",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --flash duration\n    local CONFIG_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --manually create a new texture for the flash animation\n    if (not envTable.SmallFlashTexture) then\n        envTable.SmallFlashTexture = envTable.SmallFlashTexture or Plater:CreateImage (unitFrame.castBar)\n        envTable.SmallFlashTexture:SetColorTexture (1, 1, 1)\n        envTable.SmallFlashTexture:SetAllPoints()\n    end\n    \n    --manually create a flash animation using the framework\n    if (not envTable.SmallFlashAnimationHub) then \n        \n        local onPlay = function()\n            envTable.SmallFlashTexture:Show()\n        end\n        \n        local onFinished = function()\n            envTable.SmallFlashTexture:Hide()\n        end\n        \n        local animationHub = Plater:CreateAnimationHub (envTable.SmallFlashTexture, onPlay, onFinished)\n        envTable.flashIn = Plater:CreateAnimation (animationHub, \"Alpha\", 1, CONFIG_FLASH_DURATION/2, 0, .6)\n        envTable.flashOut = Plater:CreateAnimation (animationHub, \"Alpha\", 2, CONFIG_FLASH_DURATION/2, 1, 0)\n        \n        envTable.SmallFlashAnimationHub = animationHub\n    end\n    \n    envTable.flashIn:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.flashOut:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.SmallFlashTexture:SetColorTexture (Plater:ParseColors(scriptTable.config.flashColor))\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Stop()\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    \nend\n\n\n",
["Time"] = 1669325410,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar",
["Enabled"] = true,
["Revision"] = 662,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Flashes the Cast Bar when a spell in the trigger list is Cast. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Play()\n    \nend\n\n\n",
["SpellIds"] = {
376851,
396044,
381517,
373932,
397801,
208165,
392576,
198750,
387843,
387411,
211299,
198595,
198934,
198962,
156722,
350554,
348513,
351779,
328180,
319898,
281420,
274383,
259092,
367521,
374544,
385039,
382474,
369823,
377500,
260879,
186269,
378818,
371875,
372225,
200658,
266036,
265407,
164965,
429176,
428526,
418200,
407124,
200630,
415437,
264050,
267824,
271579,
301088,
423479,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a small animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.6,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
},
["version"] = -1,
["Name"] = "Cast - Small Alert [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.NameplateColor = scriptTable.config.nameplateColor\n    envTable.NameplateSizeOffset = scriptTable.config.nameplateSizeOffset\n    \n    unitFrame.UnitImportantSkullTexture = unitFrame.UnitImportantSkullTexture or unitFrame:CreateTexture(nil, \"background\")\n    \n    unitFrame.UnitImportantSkullTexture:Hide()\nend\n\n--[=[\n\n154564 - debug\n\nUsing spellIDs for multi-language support\n\n196548 = ancient branch (academy dungeon)\n195580, 195821, 195820 = nokhub saboteur\n189886 = blazebound firestorm\n75966 = Defiled Spirit\n102019 = Stormforged Obliterator\n    187159 = Shrieking Whelp\n194897 = stormsurge totem\n104251 = duskwatch sentry\n101326 = honored ancestor\n189669 = binding speakl netharius\n192464 = raging ember neltharius\n--]=]\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)   \n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \n    unitFrame.UnitImportantSkullTexture:Hide()\n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    if (scriptTable.config.changeNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1670423785,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\skullbones_64",
["Enabled"] = true,
["Revision"] = 572,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Change the color and highlight a nameplate of an important Add. Add the unit name or NpcID into the trigger box to add more.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable.dotAnimation) then\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    end\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    unitFrame.UnitImportantSkullTexture:Show()\n    \n    --color priority:\n    local npcIdString = tostring(envTable._NpcID)\n    envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)    \n    \n    if (scriptTable.config.showExtraTexture) then\n        unitFrame.UnitImportantSkullTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.skullColor))\n        unitFrame.UnitImportantSkullTexture:SetAlpha(scriptTable.config.skullAlpha)\n        unitFrame.UnitImportantSkullTexture:SetScale(scriptTable.config.skullScale)\n        unitFrame.UnitImportantSkullTexture:SetTexture([[Interface/AddOns/Plater/media/x_64]])\n        unitFrame.UnitImportantSkullTexture:ClearAllPoints()\n        unitFrame.UnitImportantSkullTexture:SetPoint(\"right\", unitFrame.healthBar, \"left\", -2, 0)\n        unitFrame.UnitImportantSkullTexture:SetSize(28, 28)\n        unitFrame.UnitImportantSkullTexture:Show()\n    else\n        unitFrame.UnitImportantSkullTexture:Hide()\n    end\n    \n    --rules for some npcs\n    if (envTable._NpcID == 194895) then --unstable squall (explode at dying\n        unitFrame.UnitImportantSkullTexture:Hide()\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation) \n    end\n    \n    if (scriptTable.config.changeNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        \n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)        \n        \n        Plater.DenyColorChange(unitFrame, true)\n    end\n    \nend\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "change to true to change the color",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
1,
0,
0.5254901960784314,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "increase the nameplate height by this value",
["Min"] = 0,
["Name"] = "Nameplate Size Offset",
["Value"] = 3,
["Key"] = "nameplateSizeOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.7137255072593689,
0,
0.5631310641765594,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dot Color",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option10",
["Value"] = "Extra Texture",
["Name"] = "Extra Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Extra Texture",
},
{
["Type"] = 4,
["Name"] = "Show Extra Texture",
["Value"] = false,
["Key"] = "showExtraTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Extra Texture",
},
{
["Type"] = 1,
["Key"] = "skullColor",
["Value"] = {
1,
0.4627450980392157,
0,
1,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Alpha",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "skullAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Alpha",
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Scale",
["Min"] = 0.4,
["Name"] = "Scale",
["Value"] = 0.6,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "skullScale",
},
{
["Type"] = 7,
["Name"] = "Npc Color By NpcID",
["Value"] = {
{
"196548",
"forestgreen",
},
{
"195580",
"forestgreen",
},
{
"195820",
"forestgreen",
},
{
"195821",
"forestgreen",
},
{
"189886",
"forestgreen",
},
{
"75966",
"forestgreen",
},
{
"102019 ",
"forestgreen",
},
{
"187159",
"forestgreen",
},
{
"194897",
"forestgreen",
},
{
"104251",
"forestgreen",
},
},
["Key"] = "npcColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the npcID, value is the color name",
},
},
["version"] = -1,
["Name"] = "Add - Important [P]",
["NpcNames"] = {
"196548",
"195580",
"195820",
"195821",
"189886",
"75966",
"102019",
"187159",
"194897",
"104251",
"101326",
"189669",
"192464",
190381,
92538,
192464,
131009,
127315,
133361,
136330,
214117,
212483,
101008,
194745,
190426,
152033,
170234,
220368,
231176,
213751,
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (require a /reload after editing any setting)\n    do\n        --blink and glow\n        envTable.BlinkEnabled = scriptTable.config.blinkEnabled\n        envTable.GlowEnabled = scriptTable.config.glowEnabled \n        envTable.ChangeNameplateColor = scriptTable.config.changeNameplateColor;\n        envTable.TimeLeftToBlink = scriptTable.config.timeleftToBlink;\n        envTable.BlinkSpeed = scriptTable.config.blinkSpeed; \n        envTable.BlinkColor = scriptTable.config.blinkColor; \n        envTable.BlinkMaxAlpha = scriptTable.config.blinkMaxAlpha; \n        envTable.NameplateColor = scriptTable.config.nameplateColor; \n        \n        --text color\n        envTable.TimerColorEnabled = scriptTable.config.timerColorEnabled \n        envTable.TimeLeftWarning = scriptTable.config.timeLeftWarning;\n        envTable.TimeLeftCritical = scriptTable.config.timeLeftCritical;\n        envTable.TextColor_Warning = scriptTable.config.warningColor; \n        envTable.TextColor_Critical = scriptTable.config.criticalColor; \n        \n        --list of spellIDs to ignore\n        envTable.IgnoredSpellID = {\n            [12] = true, --use a simple comma here\n            [13] = true,\n        }\n    end\n    \n    \n    --private\n    do\n        --if not envTable.blinkTexture then\n        envTable.blinkTexture = Plater:CreateImage (self, \"\", 1, 1, \"overlay\")\n        envTable.blinkTexture:SetPoint ('center', 0, 0)\n        envTable.blinkTexture:Hide()\n        \n        local onPlay = function()\n            envTable.blinkTexture:Show() \n            envTable.blinkTexture.color = envTable.BlinkColor\n        end\n        local onStop = function()\n            envTable.blinkTexture:Hide()  \n        end\n        envTable.blinkAnimation = Plater:CreateAnimationHub (envTable.blinkTexture, onPlay, onStop)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 1, envTable.BlinkSpeed / 2, 0, envTable.BlinkMaxAlpha)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 2, envTable.BlinkSpeed / 2, envTable.BlinkMaxAlpha, 0)\n        --end\n        \n        envTable.glowEffect = envTable.glowEffect or self.overlay or Plater.CreateIconGlow (self)\n        --envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n        --envTable.glowEffect:Show() --envTable.glowEffect:Hide()\n        \n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.blinkAnimation:Stop()\n    envTable.blinkTexture:Hide()\n    envTable.blinkAnimation:Stop()\n    envTable.glowEffect:Stop()\n    Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --check if the spellID isn't being ignored\n    if (envTable.IgnoredSpellID [envTable._SpellID]) then\n        return\n    end\n    \n    --check the time left and start or stop the blink animation and also check if the time left is > zero\n    if ((envTable.BlinkEnabled or envTable.GlowEnabled) and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftToBlink) then\n            --blink effect\n            if (envTable.BlinkEnabled) then\n                if (not envTable.blinkAnimation:IsPlaying()) then\n                    envTable.blinkAnimation:Play()\n                end\n            end\n            --glow effect\n            if (envTable.GlowEnabled) then\n                envTable.glowEffect:Show()\n            end\n            --nameplate color\n            if (envTable.ChangeNameplateColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n            end\n        else\n            --blink effect\n            if (envTable.blinkAnimation:IsPlaying()) then\n                envTable.blinkAnimation:Stop()\n            end\n            --glow effect\n            if (envTable.GlowEnabled and envTable.glowEffect:IsShown()) then\n                envTable.glowEffect:Hide()\n            end\n        end\n    end\n    \n    --timer color\n    if (envTable.TimerColorEnabled and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftCritical) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Critical)\n        elseif (timeLeft < envTable.TimeLeftWarning) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Warning)        \n        else\n            Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\n        end\n    end\n    \nend",
["Time"] = 1626382829,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_blink",
["Enabled"] = true,
["Revision"] = 375,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Blink, change the number and nameplate color. Add the debuffs int he trigger box. Set settings on constructor script.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.blinkTexture:SetSize (self:GetSize())\n    \nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option10",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Enter the spell name or spellID in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 17",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "blinkEnabled",
["Value"] = true,
["Name"] = "Blink Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable blink",
},
{
["Type"] = 4,
["Key"] = "glowEnabled",
["Value"] = true,
["Name"] = "Glow Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable glows",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = false,
["Name"] = "Change NamePlate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'true' to enable nameplate color change",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the blink effect only",
["Min"] = 1,
["Fraction"] = true,
["Value"] = 3,
["Name"] = "Timeleft to Blink",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "timeleftToBlink",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "time to complete a blink loop",
["Min"] = 0.5,
["Fraction"] = true,
["Value"] = 1,
["Name"] = "Blink Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "blinkSpeed",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "max transparency in the animation loop (1.0 is full opaque)",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.6,
["Name"] = "Blink Max Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "blinkMaxAlpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color of the blink",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
0.2862745098039216,
0.00392156862745098,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "nameplate color if ChangeNameplateColor is true",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "timerColorEnabled",
["Value"] = true,
["Name"] = "Timer Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable changes in the color of the time left text",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Name"] = "Time Left Warning",
["Value"] = 8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "timeLeftWarning",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Name"] = "Time Left Critical",
["Value"] = 3,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "timeLeftCritical",
},
{
["Type"] = 1,
["Key"] = "warningColor",
["Value"] = {
1,
0.8705882352941177,
0,
1,
},
["Name"] = "Warning Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left entered in a warning zone",
},
{
["Type"] = 1,
["Key"] = "criticalColor",
["Value"] = {
1,
0.07450980392156863,
0,
1,
},
["Name"] = "Critical Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left is critical",
},
},
["version"] = -1,
["Name"] = "Aura - Blink by Time Left [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1670428019,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
["Enabled"] = false,
["Revision"] = 162,
["semver"] = "",
["Author"] = "Butazzul-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
["SpellIds"] = {
385916,
386063,
388822,
373087,
397785,
106864,
193660,
198263,
387910,
370766,
375591,
384336,
209404,
209378,
210875,
396001,
397899,
386559,
382555,
258672,
258777,
257756,
257784,
256405,
256589,
393793,
388046,
375079,
390290,
369811,
369703,
226287,
410999,
372561,
256882,
172578,
412063,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "Rotation Duration",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.15,
["Key"] = "rotationDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Rotation Duration",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Name"] = "Animation Start Duration",
["Value"] = 0.3,
["Key"] = "animStartDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Key"] = "textureStartAlpha",
["Value"] = 1,
["Name"] = "Texture Start Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Fraction"] = true,
["Value"] = 0.8,
["Key"] = "textureScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Key"] = "textureAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Alpha",
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textureColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["version"] = -1,
["Name"] = "Cast - Circle AoE [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \nend\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1669340442,
["url"] = "",
["Icon"] = "interface/addons/plater/images/add_id_icon",
["Enabled"] = false,
["Revision"] = 161,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    \n    scriptTable.allAdds = {} \n    scriptTable.nextAddWave = 0\n    scriptTable.waveTime = 20\n    \n    function scriptTable.ArrangeNpcNumbers(GUID)\n        local spawnId = select(7, strsplit (\"-\", GUID))\n        spawnId = tonumber(spawnId, 16)\n        \n        if (spawnId) then\n            --check if this is a new wave of adds\n            if (GetTime() > scriptTable.nextAddWave) then\n                scriptTable.nextAddWave = GetTime() + scriptTable.waveTime\n                scriptTable.allAdds = {}\n            end\n            \n            local bIsAlreadyOnTheList = false\n            \n            for o = 1, #scriptTable.allAdds do\n                if (scriptTable.allAdds[o][1] == GUID) then\n                    bIsAlreadyOnTheList = true\n                end\n            end\n            \n            if (not bIsAlreadyOnTheList) then\n                scriptTable.allAdds[#scriptTable.allAdds+1] = {GUID, spawnId}\n            end\n        end\n        \n        table.sort(scriptTable.allAdds, function(t1, t2) return t1[2] < t2[2] end)\n        \n        --this is a \"loop\" because this is running each time a nameplate is added!\n        \n        for namePlateIndex, plateFrame in ipairs(Plater.GetAllShownPlates()) do\n            local unitFrame = plateFrame.unitFrame\n            \n            --get the unit GUID\n            local unitGUID = unitFrame.namePlateUnitGUID\n            \n            for addId = 1, #scriptTable.allAdds do\n                local addTable = scriptTable.allAdds[addId]\n                local addGUID = addTable[1]\n                \n                if (unitGUID == addGUID) then\n                    scriptTable.TagNameplate(unitFrame, unitGUID, addId)\n                    break\n                end\n            end\n            \n        end\n    end\n    \n    function scriptTable.TagNameplate(unitFrame, GUID, addId)\n        scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        \n        if (addId and addId >= 1 and addId <= 8) then\n            unitFrame.AddSpawnIDTexture:Show()\n            unitFrame.AddIcon:Show()\n            unitFrame.AddNumber:Show()\n            \n            local addTexture = \"Interface\\\\TargetingFrame\\\\UI-RaidTargetingIcon_\" .. addId\n            \n            unitFrame.AddIcon:SetTexture(addTexture)\n            unitFrame.AddNumber:SetText(addId)\n        end\n    end\n    \n    function scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        if (not unitFrame.AddSpawnIDTexture) then\n            local healthBar = unitFrame.healthBar\n            \n            local textureBackground = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n            local addIcon = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 6)\n            local addNumber = healthBar.FrameOverlay:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)           \n            \n            unitFrame.AddSpawnIDTexture = textureBackground\n            unitFrame.AddIcon = addIcon\n            unitFrame.AddNumber = addNumber\n        end\n    end    \nend\n\n--Creature-0-2085-1-11042-153285-0002F8DB2B --training dummy for testing\n--195138 Detonating Crystal\n--192955 dracomoc illusion\n--190294 nokhub stormcaster\n--76518 ritual of bones\n\n\n\n\n",
["Desc"] = "Put a number above multiples adds, numbers follow their respawn id.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \n    scriptTable.ArrangeNpcNumbers(unitFrame.namePlateUnitGUID)\n    \n    local textureBackground = unitFrame.AddSpawnIDTexture\n    textureBackground:SetSize(22, 10)\n    textureBackground:ClearAllPoints()\n    textureBackground:SetPoint(\"bottomright\", unitFrame.healthBar, \"topright\", 0, 1)\n    \n    textureBackground:SetMask([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetTexture([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetVertexColor(0.1215, 0.1176, 0.1294, 1)\n    \n    \n    --textureBackground:SetMask([[Interface/ChatFrame/UI-ChatIcon-HotS]])\n    --    \"Interface/ChatFrame/UI-ChatIcon-HotS\"\n    \n    local addIcon = unitFrame.AddIcon\n    addIcon:ClearAllPoints()\n    addIcon:SetPoint(\"left\", textureBackground, \"left\", 2, 0)\n    addIcon:SetSize(10, 10)\n    \n    local addNumber = unitFrame.AddNumber\n    addNumber:ClearAllPoints()\n    addNumber:SetPoint(\"right\", textureBackground, \"right\", -2, 0)\n    DetailsFramework:SetFontSize(addNumber, 10)\n    \nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Add - Tag Number [P]",
["NpcNames"] = {
"195138",
"192955",
"190294",
"76518",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    --local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    --envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Time"] = 1719788204,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_special_ability.png",
["Enabled"] = true,
["Revision"] = 613,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "For unique abilities that are an important part of the fight against a bosses or mini bosse.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
["SpellIds"] = {
451026,
452127,
446615,
433766,
432117,
448560,
440218,
441289,
447146,
438860,
448847,
449687,
456751,
449939,
336499,
322550,
320208,
321894,
276068,
423200,
282801,
1215412,
474298,
339573,
468841,
444034,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Arrow Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowWidth",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Key"] = "arrowHeight",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Height",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "Option 18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Nameplate Color",
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = false,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.1843137294054031,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Health Bar Color",
},
},
["version"] = -1,
["Name"] = "Cast - Special Ability [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not self.FrameOverlay.LeapArrow1) then\n        \n        self.FrameOverlay.LeapArrow1 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow2 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow3 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        \n        local onPlayFunc = function()\n            --self.FrameOverlay.LeapArrow1:Show()\n            --self.FrameOverlay.LeapArrow2:Show()\n            --self.FrameOverlay.LeapArrow3:Show()            \n        end\n        local onStopFunc = function()\n            self.FrameOverlay.LeapArrow1:Hide()\n            self.FrameOverlay.LeapArrow2:Hide()\n            self.FrameOverlay.LeapArrow3:Hide()\n        end\n        \n        --first arrow animation\n        local animHub1 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow1, onPlayFunc, onStopFunc)\n        animHub1.alpha1 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub1.trans1 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub1.alpha2 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub1.trans2 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 2, 0.3, 8, 8)        \n        \n        self.FrameOverlay.LeapArrow1.animation = animHub1\n        \n        --second arrow animation\n        local animHub2 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow2, onPlayFunc, onStopFunc)\n        animHub2.alpha1 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub2.trans1 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub2.alpha2 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub2.trans2 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow2.animation = animHub2\n        \n        --third arrow animation\n        local animHub3 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow3, onPlayFunc, onStopFunc)\n        animHub3.alpha1 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub3.trans1 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub3.alpha2 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub3.trans2 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow3.animation = animHub3\n        \n        self.FrameOverlay.LeapArrowTextures = {\n            self.FrameOverlay.LeapArrow1,\n            self.FrameOverlay.LeapArrow2,\n            self.FrameOverlay.LeapArrow3\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations = {\n            alpha1Anim = {},\n            alpha2Anim = {},\n            trans1Anim = {},\n            trans2Anim = {},\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations.alpha1Anim = {animHub1.alpha1, animHub2.alpha1, animHub3.alpha1}\n        self.FrameOverlay.LeapArrowAnimations.alpha2Anim = {animHub1.alpha2, animHub2.alpha2, animHub3.alpha2}\n        self.FrameOverlay.LeapArrowAnimations.trans1Anim = {animHub1.trans1, animHub2.trans1, animHub3.trans1}\n        self.FrameOverlay.LeapArrowAnimations.trans2Anim = {animHub1.trans2, animHub2.trans2, animHub3.trans2}        \n        \n    end\n    \nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    \n    for i, texture in ipairs(leapTextures) do\n        texture:Hide()\n        local animation = texture.animation\n        animation:Stop()\n    end    \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1724073562,
["url"] = "",
["Icon"] = 236171,
["Enabled"] = true,
["Revision"] = 139,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Modify a cast bar when the unit casts a spell with the same effect of the Warrior's Heroic Leap spell.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.bUseCastbarColor) then\n        Plater.SetCastBarColor (unitFrame, DetailsFramework:ParseColors(scriptTable.config.castbarColor))\n    end\n    \n    \n    if (scriptTable.config.bRenameSpell) then\n        self.Text:SetText(scriptTable.config.spellName) \n    end\n    \n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    for i, texture in ipairs(leapTextures) do\n        texture:SetTexture([[Interface\\AddOns\\Plater\\media\\arrow_right_64.tga]])\n        texture:ClearAllPoints()\n        texture:SetSize(self:GetHeight()*1.5, self:GetHeight()*1.5)\n        texture:SetRotation(math.pi - math.pi*0.75)        \n    end\n    \n    local startX = -10\n    leapTextures[1]:SetPoint(\"left\", self, \"left\", startX, -8)\n    leapTextures[2]:SetPoint(\"center\", self, \"center\", startX, -8)\n    leapTextures[3]:SetPoint(\"right\", self, \"right\", startX, -8)\n    \n    local animations = self.FrameOverlay.LeapArrowAnimations\n    local alpha1Animations = animations.alpha1Anim\n    local alpha2Animations = animations.alpha2Anim    \n    local trans1Animations = animations.trans1Anim\n    local trans2Animations = animations.trans2Anim    \n    \n    local castTime = envTable._Duration\n    \n    --on fade in\n    local fadeInDuration =  castTime/6\n    \n    C_Timer.After(fadeInDuration, function()\n            for i, texture in ipairs(leapTextures) do\n                texture:SetRotation(-math.pi*0.25)\n                --texture:Show()\n            end            \n    end)\n    \n    for i, alphaAnim in ipairs(alpha1Animations) do\n        alphaAnim:SetDuration(fadeInDuration)\n        alphaAnim:SetFromAlpha(0.3)\n        alphaAnim:SetToAlpha(1)\n    end\n    \n    for i, transAnim in ipairs(trans1Animations) do\n        transAnim:SetDuration(fadeInDuration)\n        transAnim:SetOffset(8, 20)\n    end\n    \n    --on fade out\n    local fadeOutDuration = castTime/2\n    \n    for i, alphaAnim in ipairs(alpha2Animations) do\n        alphaAnim:SetDuration(fadeOutDuration)\n        alphaAnim:SetFromAlpha(1)\n        alphaAnim:SetToAlpha(0.3)\n    end\n    \n    for i, transAnim in ipairs(trans2Animations) do\n        transAnim:SetDuration(fadeOutDuration)\n        transAnim:SetOffset(8, -16)\n    end    \n    \n    for i, texture in ipairs(leapTextures) do\n        texture:Show()\n        local animation = texture.animation\n        animation:Play()\n    end\n    \n    \n    --DetailsFramework:DebugVisibility(self.FrameOverlay.LeapArrow1)\nend",
["SpellIds"] = {
447141,
432967,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Play an animation when the cast is a Heroic Leap",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bRenameSpell",
["Value"] = true,
["Name"] = "Rename Spell",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Rename the name of the spell.",
},
{
["Type"] = 3,
["Key"] = "spellName",
["Value"] = "Heroic Leap",
["Name"] = "Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Name to show in the spell cast bar.",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bUseCastbarColor",
["Value"] = false,
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change the cast bar color to the color selected below.",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
0.364705890417099,
0.1058823615312576,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
},
["version"] = -1,
["Name"] = "Cast - Heroic Leap [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.Spark:SetVertexColor( unpack(Plater.db.profile.cast_statusbar_spark_color) )\n    PixelUtil.SetSize( self.Spark, Plater.db.profile.cast_statusbar_spark_width, self:GetHeight() )\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1719711134,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_spark.png",
["Enabled"] = true,
["Revision"] = 75,
["semver"] = "",
["Author"] = "Tennah-These Go To Eleven",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Change the spark color to differentiate a cast from another.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --get the spark color\n    local sparkColor = scriptTable.config.sparkColor[tostring(envTable._SpellID)]\n    \n    self.Spark:SetVertexColor(DetailsFramework:ParseColors(sparkColor))\n    \n    self.Spark:SetWidth( self.Spark:GetWidth() * scriptTable.config.sparkWithScale )\n    self.Spark:SetHeight( self.Spark:GetHeight() * scriptTable.config.sparkHeightScale )\n    \nend\n\n\n",
["SpellIds"] = {
453140,
456713,
450088,
322614,
323730,
257348,
272422,
429427,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "In the box at right, add the spell id and the color.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "To get a list of colors, use: /plater colors",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Spark Scale",
["Min"] = 1,
["Fraction"] = true,
["Value"] = 1,
["Name"] = "Spark Width Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "sparkWithScale",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Spark Scale",
["Min"] = 1,
["Name"] = "Spark Height Scale",
["Value"] = 1,
["Key"] = "sparkHeightScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 7,
["Key"] = "sparkColor",
["Value"] = {
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Cast - Spark Color [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1719679972,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["Enabled"] = true,
["Revision"] = 551,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Healing effect that cannot be interrupted.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion + 5, castBar:GetHeight() + math.random(1, 5))\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        \n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2 + math.random(-2, 2))\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(1)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration + 0.5) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(1)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
432520,
320822,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Fraction"] = false,
["Value"] = 20,
["Key"] = "segmentsAmount",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Cast - Heal Stun [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1669324381,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_quickflash.tga",
["Enabled"] = false,
["Revision"] = 887,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Play a very fast flash when the cast start",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
392640,
397888,
209033,
385029,
374563,
377341,
369675,
369365,
369411,
278961,
202108,
88186,
255824,
252781,
250096,
200248,
197797,
264520,
418202,
201839,
412012,
411958,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable but fast effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.1,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "How strong is the shake.",
["Min"] = 10,
["Name"] = "Shake Amplitude",
["Value"] = 25,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 30,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
},
["version"] = -1,
["Name"] = "Cast - Quick Flash [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1741042861,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_tankbuster.png",
["Enabled"] = true,
["Revision"] = 1285,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Abilities casted on the tank.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --don't execute if the player is not the tank\n    if (not Plater.IsPlayerTank()) then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
280604,
1215411,
1215065,
331316,
320644,
330586,
323515,
324079,
434773,
432229,
439031,
473351,
459799,
469478,
465666,
466190,
448485,
424414,
448515,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.1098039299249649,
0.1137254983186722,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.1,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.1,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Name"] = "Shake Amplitude",
["Value"] = 2,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 10,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
},
["version"] = -1,
["Name"] = "Cast - Tankbuster [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a texture to use for a flash behind the cast bar\n    \n    if (not unitFrame.backGroundFlashTextureImpTarget) then\n        unitFrame.backGroundFlashTextureImpTarget =  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    end\n    \n    local backGroundFlashTexture = unitFrame.backGroundFlashTextureImpTarget\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    --create the target unit name box\n    if (not unitFrame.targetBox) then\n        unitFrame.targetBox = CreateFrame(\"frame\", unitFrame:GetName() .. \"ScriptImportantTarget\", unitFrame, \"BackdropTemplate\")\n        unitFrame.targetBox:SetSize(80, 20)\n        unitFrame.targetBox:SetFrameStrata(\"TOOLTIP\")\n        unitFrame.targetBox:Hide()\n        unitFrame.targetBox:SetPoint(\"left\", unitFrame, \"right\", 0, 0)\n        \n        unitFrame.targetBox:SetBackdrop({edgeFile = [[Interface\\Buttons\\WHITE8X8]], edgeSize = 1, bgFile = [[Interface\\AddOns\\Details\\images\\background]], tile = true, tileSize = 16})\n        unitFrame.targetBox:SetBackdropColor(.2, .2, .2, .8)\n        unitFrame.targetBox:SetBackdropBorderColor(0, 0, 0, 1)\n        \n        unitFrame.targetBoxName = unitFrame.targetBox:CreateFontString(nil, \"artwork\", \"GameFontNormal\")\n        unitFrame.targetBoxName:SetPoint(\"center\")\n    end\n    \n    function envTable.UpdateTargetBox(unitFrame, unitId)\n        local targetUnitId = unitId .. \"target\"\n        local unitName = UnitName(targetUnitId)\n        \n        if (unitName) then\n            if (scriptTable.config.colorByClass) then\n                Plater:SetFontColor(unitFrame.targetBoxName, \"white\")\n                unitName = Plater.SetTextColorByClass(targetUnitId, unitName)\n            else\n                Plater:SetFontColor(unitFrame.targetBoxName, scriptTable.config.textColor)\n            end\n            \n            unitFrame.targetBoxName:SetText(unitName)\n            Plater:SetFontSize(unitFrame.targetBoxName, scriptTable.config.targetNameSize)\n            unitFrame.targetBox:SetBackdropColor(Plater:ParseColors(scriptTable.config.targetBgColor))\n            unitFrame.targetBox:SetBackdropBorderColor(Plater:ParseColors(scriptTable.config.targetBgBorderColor))\n            unitFrame.targetBox:Show()\n            \n            unitFrame.targetBox:SetWidth(scriptTable.config.targetFrameWidth)\n            unitFrame.targetBox:SetHeight(scriptTable.config.targetFrameHeight)\n            \n            if (not Plater.HasDotAnimationPlaying(unitFrame.targetBox)) then\n                envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.targetBox, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n            end\n            \n            unitFrame.backGroundFlashTextureImpTarget:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n            \n            return true\n            \n        end\n    end\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.targetBox, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \n    unitFrame.targetBox:Hide()\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.UpdateTargetBox(unitFrame, unitId) \n    \nend\n\n\n",
["Time"] = 1669339628,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_target",
["Enabled"] = true,
["Revision"] = 878,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight the target name",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable.UpdateTargetBox(unitFrame, unitId)) then\n        \n        envTable.BackgroundFlash:Play()\n        \n        Plater.FlashNameplateBorder (unitFrame, 0.05)   \n        Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n        \n        unitFrame:PlayFrameShake (envTable.FrameShake)\n        \n        if (envTable._CanInterrupt) then\n            if (scriptTable.config.useCastbarColor) then\n                self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n            end\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n",
["SpellIds"] = {
270042,
260813,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shows the target name in a separate box",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.8,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Name"] = "Shake Amplitude",
["Value"] = 5,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
{
["Type"] = 6,
["Name"] = "Option 27",
["Value"] = 0,
["Key"] = "option27",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 28",
["Value"] = "Target Options",
["Key"] = "option28",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Name"] = "Text Size",
["Value"] = 14,
["Key"] = "targetNameSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 4,
["Name"] = "Use Class Color",
["Value"] = true,
["Key"] = "colorByClass",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Text Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Background Color",
["Value"] = {
0,
0,
0,
0.9846720322966576,
},
["Key"] = "targetBgColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Border Color",
["Value"] = {
0,
0,
0,
1,
},
["Key"] = "targetBgBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 160,
["Desc"] = "",
["Min"] = 30,
["Name"] = "Frame Width",
["Value"] = 90,
["Key"] = "targetFrameWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Key"] = "targetFrameHeight",
["Value"] = 20,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Frame Height",
},
},
["version"] = -1,
["Name"] = "Cast - Important Target [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1625793282,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1154,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Player an animation when the cast start. Start a timer when the cast finishes. Set the time in the options.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
350421,
355787,
348513,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Cast start animation settings",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 7,
["Name"] = "Timer (Key is SpellId and Value is Time)",
["Value"] = {
{
"350421",
"5",
},
{
"355787",
"15",
},
{
"348513",
"14",
},
{
"348513",
"14",
},
},
["Key"] = "timerList",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the spellId and value is the amount of time of the Timer",
},
},
["version"] = -1,
["Name"] = "Cast - Alert + Timer [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then --eeror here, compare with nil\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1672514190,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
["Enabled"] = false,
["Revision"] = 547,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show a different animation for the cast bar.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
376644,
386781,
384823,
385536,
392398,
375596,
387135,
360850,
212784,
199033,
199034,
200969,
394512,
397881,
396020,
374430,
384353,
265376,
193941,
411002,
169445,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Key"] = "segmentsAmount",
["Value"] = 7,
["Name"] = "Amount of Segments",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"385536",
"maroon",
},
{
"198750",
"midnightblue",
},
{
"360850",
"lime",
},
{
"212784",
"deepskyblue",
},
{
"207980",
"midnightblue",
},
{
"199033",
"gold",
},
{
"199034",
"gold",
},
{
"200969",
"orange",
},
{
"394512",
"indigo",
},
{
"397881",
"deepskyblue",
},
{
"396020",
"khaki",
},
},
["Name"] = "Cast Color by SpellID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the Spell ID in the to Key and a color name into the Value",
},
},
["version"] = -1,
["Name"] = "Cast - Glowing [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1673994690,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
["Enabled"] = false,
["Revision"] = 828,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
["SpellIds"] = {
373046,
372863,
164686,
153072,
153680,
196497,
388886,
387145,
384365,
152964,
398150,
152801,
397878,
397914,
183263,
3636,
376171,
350687,
372735,
373017,
350687,
392488,
257732,
256060,
257899,
384633,
374339,
395694,
391634,
372701,
369328,
265487,
413044,
183526,
88194,
87762,
413385,
411001,
378282,
384161,
259572,
255371,
427460,
429172,
426500,
413607,
412922,
417481,
201399,
411994,
415770,
260907,
260703,
260741,
265876,
263959,
266225,
253517,
377488,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a big animation when the cast start.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.8,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 5,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 8,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["version"] = -1,
["Name"] = "Cast - Very Important [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (not healthBar.absorbBar) then\n        healthBar.absorbBar = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n        healthBar.absorbBar:Hide()\n    end\n    \n    if (not healthBar.absorbSpark) then\n        healthBar.absorbSpark = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbSpark:SetTexture([[Interface\\CastingBar\\UI-CastingBar-Spark]])\n        healthBar.absorbSpark:SetBlendMode(\"ADD\")\n        healthBar.absorbSpark:Hide()\n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Hide()    \n    healthBar.absorbSpark:Hide()\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    local maxValue = healthBar.absorbBar.MaxValue\n    local currentValue = UnitGetTotalAbsorbs(unitId) or 0\n    \n    if (currentValue > 0) then\n        local minValue = 0\n        \n        local percent = currentValue / maxValue\n        healthBar.absorbBar:SetTexCoord(0, percent, 0, 1)\n        healthBar.absorbBar:SetWidth(percent * healthBar:GetWidth())\n        \n        healthBar.absorbSpark:SetPoint(\"left\", healthBar, \"left\", percent * healthBar:GetWidth() - 16, 0)\n        \n    else\n        healthBar.absorbBar:Hide()    \n        healthBar.absorbSpark:Hide()\n    end\n    \n    self.ThrottleUpdate = 0\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1669325411,
["url"] = "",
["Icon"] = "interface/addons/plater/images/cast_bar - absorb",
["Enabled"] = true,
["Revision"] = 101,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "When the caster has a shield and only when the shield is removed the cast can be interrupted",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n    \n    healthBar.absorbBar:ClearAllPoints()    \n    healthBar.absorbBar:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n    healthBar.absorbBar:SetPoint(\"bottomleft\", healthBar, \"bottomleft\", 0, 0)\n    \n    healthBar.absorbBar:SetAlpha(1)\n    \n    healthBar.absorbBar.MaxValue = UnitGetTotalAbsorbs(unitId) or 0\n    healthBar.absorbBar.MinValue = 0\nend\n\n\n",
["SpellIds"] = {
373688,
391050,
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Cast - Shield Interrupt [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local DF = DetailsFramework\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture2:Show()\n        unitFrame.CastSwipeAnimation2:Play()\n        unitFrame.StartSwipeAnimation2:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation2:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation2:Stop()\n                unitFrame.CastSwipeTexture2:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture2) then\n            return\n        end\n        \n        local circularTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        circularTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2.png]])\n        circularTexture:SetPoint(\"center\", 0, 0)\n        circularTexture:SetSize(64, 64)\n        circularTexture:Hide()\n        \n        unitFrame.CastSwipeTexture2 = circularTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation2 = DF:CreateAnimationHub(circularTexture)\n        unitFrame.CastSwipeAnimation2:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation2.Rotation = DF:CreateAnimation(unitFrame.CastSwipeAnimation2, \"rotation\", 1, 1, 360)\n        unitFrame.CastSwipeAnimation2.Trans = DF:CreateAnimation(unitFrame.CastSwipeAnimation2, \"TRANSLATION\", 1, 1, 2, 2)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation2 = DF:CreateAnimationHub(circularTexture, function()circularTexture:Show() end)\n        \n        unitFrame.StartSwipeAnimation2.Alpha = DF:CreateAnimation(unitFrame.StartSwipeAnimation2, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation2.Scale = DF:CreateAnimation(unitFrame.StartSwipeAnimation2, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation2 = DF:CreateAnimationHub(circularTexture, nil, function()circularTexture:Hide() end)\n        \n        unitFrame.EndSwipeAnimation2.Alpha = DF:CreateAnimation(unitFrame.EndSwipeAnimation2, \"alpha\", 1, 0.2, 1, 0)\n        \n        unitFrame.EndSwipeAnimation2.Scale = DF:CreateAnimation(unitFrame.EndSwipeAnimation2, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n        \n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1719757483,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2_icon.png",
["Enabled"] = true,
["Revision"] = 318,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = options.textureScale\n    \n    local circularTexture = unitFrame.CastSwipeTexture2\n    \n    --texture settings\n    circularTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2.png]])\n    circularTexture:SetPoint(\"center\", 0, 0)\n    circularTexture:SetSize(64, 64)    \n    circularTexture:SetBlendMode(\"ADD\")\n    circularTexture:SetVertexColor(DetailsFramework:ParseColors(options.textureColor))\n    circularTexture:SetScale(targetScale)\n    circularTexture:SetAlpha(options.textureAlpha)\n    \n    --animations    \n    unitFrame.CastSwipeAnimation2.Rotation:SetDuration(options.rotationDuration)\n    unitFrame.CastSwipeAnimation2.Trans:SetDuration(options.rotationDuration)\n    \n    local randomOffset = 5\n    unitFrame.CastSwipeAnimation2.Trans:SetOffset(math.random(-randomOffset, randomOffset), math.random(-randomOffset, randomOffset))\n    \n    \n    unitFrame.StartSwipeAnimation2.Alpha:SetDuration(options.animStartDuration)\n    unitFrame.StartSwipeAnimation2.Alpha:SetFromAlpha(options.textureStartAlpha)\n    unitFrame.StartSwipeAnimation2.Alpha:SetToAlpha(options.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation2.Scale:SetDuration(options.animStartDuration)\n    unitFrame.StartSwipeAnimation2.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation2.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation2.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)     \n    \nend\n\n\n\n\n",
["SpellIds"] = {
451102,
426787,
448888,
439811,
434796,
434793,
438879,
438473,
434252,
434829,
440468,
436205,
436246,
441395,
437533,
451965,
456902,
456900,
451996,
451939,
450077,
450079,
324909,
324922,
460092,
272711,
269266,
425974,
424879,
426771,
426786,
423324,
428879,
258622,
269429,
271456,
1215102,
1215409,
291946,
297128,
1215741,
330716,
463206,
442995,
435622,
465827,
460156,
1218117,
428266,
427404,
1214628,
424431,
448791,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "How much time takes for one revolution.",
["Min"] = 0.1,
["Key"] = "rotationDuration",
["Value"] = 0.2,
["Name"] = "Rotation Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Key"] = "animStartDuration",
["Value"] = 0.05,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Animation Start Duration",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Name"] = "Texture Start Alpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureStartAlpha",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Key"] = "textureScale",
["Value"] = 0.9,
["Name"] = "Texture Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 1,
["Name"] = "Texture Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "textureColor",
["Value"] = {
0.6392157077789307,
0.6392157077789307,
0.6392157077789307,
1,
},
["Name"] = "Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["version"] = -1,
["Name"] = "Cast - AoE Hit All [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1676905232,
["url"] = "",
["Icon"] = 4038101,
["Enabled"] = false,
["Revision"] = 73,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.3\n    \n    envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \nend",
["SpellIds"] = {
388886,
209676,
377912,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
1,
1,
0.4166216850280762,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dots Color",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 0,
["Name"] = "Dots X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 0,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dots Y Offset",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust how fast the blinking occurs",
["Min"] = 0.2,
["Name"] = "Blink Speed",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "speed",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Min amount of transparency the blink can have",
["Min"] = 0,
["Name"] = "Blink Min Alpha",
["Value"] = 0,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "minAlpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Max amount of transparency the blink can have",
["Min"] = 0,
["Key"] = "maxAlpha",
["Value"] = 0.5,
["Name"] = "Blink Max Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
0.01960784383118153,
0,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the blinking texture",
},
},
["version"] = -1,
["Name"] = "Cast - On Going Cast [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1725033998,
["url"] = "",
["Icon"] = 610472,
["Enabled"] = true,
["Revision"] = 83,
["semver"] = "",
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
343470,
423228,
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Aura is Shield [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n--190187 draconic image\n--189893 infused whelp\n--99922 Ebonclaw Packmate\n--104822 flames of woe",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.onShowAddToKillFlash:Stop()\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\nend\n\n\n\n\n",
["Time"] = 1670427654,
["url"] = "",
["Icon"] = "interface/addons/plater/media/exclamation_64",
["Enabled"] = true,
["Revision"] = 162,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Change the color of  add",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame.onShowAddToKillFlash = unitFrame.onShowAddToKillFlash or Plater.CreateFlash (unitFrame.healthBar, 0.25, 1, \"white\")\n    \n    if (scriptTable.config.useFlash) then\n        unitFrame.onShowAddToKillFlash:Play()\n    end\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end\nend\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0.4392157196998596,
0.458823561668396,
1,
},
["Key"] = "healthBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Flash Nameplate",
["Value"] = true,
["Key"] = "useFlash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Flash Nameplate",
},
{
["Type"] = 7,
["Name"] = "NpcID to Color",
["Value"] = {
{
"189893",
"olivedrab",
},
{
"190187",
"olivedrab",
},
{
"99922",
"olivedrab",
},
{
"153285",
"olivedrab",
},
{
"104822",
"olivedrab",
},
},
["Key"] = "npcColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "If the npc isn't on this list, use the default color set in the Health Bar Color",
},
},
["version"] = -1,
["Name"] = "Add - Warning [P]",
["NpcNames"] = {
"190187",
"189893",
"99922",
"104822",
129758,
186696,
101075,
100818,
98081,
52019,
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    self.simpleInterruptFlash = self.simpleInterruptFlash or  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    \n    self.simpleInterruptFlash:SetBlendMode (\"ADD\")\n    self.simpleInterruptFlash:SetDrawLayer(\"OVERLAY\", 7)\n    self.simpleInterruptFlash:SetPoint (\"center\", self, \"center\")\n    self.simpleInterruptFlash:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    self.simpleInterruptFlashAnimHub = self.simpleInterruptFlashAnimHub or Plater:CreateAnimationHub (self.simpleInterruptFlash, \n        function()\n            self.simpleInterruptFlash:Show()\n        end,\n        function()\n            self.simpleInterruptFlash:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    self.simpleInterruptFlashAnimHub.fadeIn = self.simpleInterruptFlashAnimHub.fadeIn or Plater:CreateAnimation (self.simpleInterruptFlashAnimHub, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    self.simpleInterruptFlashAnimHub.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    self.simpleInterruptFlashAnimHub.fadeOut = self.simpleInterruptFlashAnimHub.fadeOut or Plater:CreateAnimation (self.simpleInterruptFlashAnimHub, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    self.simpleInterruptFlashAnimHub.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if ( not envTable._CanInterrupt ) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    self.simpleInterruptFlashAnimHub:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1719711128,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_quickflash.tga",
["Enabled"] = true,
["Revision"] = 958,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Play a very fast flash when the cast start.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if ( not envTable._CanInterrupt ) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    self.simpleInterruptFlash:SetHeight(self:GetHeight() * 2.5 )\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    self.simpleInterruptFlashAnimHub:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
431333,
442210,
443430,
443433,
451871,
76711,
334748,
334749,
328667,
338353,
445207,
269302,
263215,
342675,
453909,
462771,
424322,
426145,
427260,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable but fast effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.1,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "How strong is the shake.",
["Min"] = 10,
["Name"] = "Shake Amplitude",
["Value"] = 25,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 30,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
},
["version"] = -1,
["Name"] = "Cast - Simple Interrupt [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
["Time"] = 1673726734,
["url"] = "",
["Icon"] = 236209,
["Enabled"] = true,
["Revision"] = 18,
["semver"] = "",
["Author"] = "Tiranaa-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Highlight the nameplate of a unit when has a certain Buff (trigger) and start to cast a spell",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
372743,
372749,
384933,
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Aura While Casting [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1670203603,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = false,
["Revision"] = 1194,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
396640,
372743,
377389,
396812,
388392,
387955,
386546,
377503,
384808,
386024,
387615,
387606,
225100,
211401,
211470,
215433,
192563,
198959,
152818,
156776,
398206,
153524,
396073,
396018,
345202,
377950,
372223,
350421,
352158,
349985,
329239,
328400,
384194,
392451,
392924,
397889,
209413,
207980,
257397,
257736,
382787,
374699,
377402,
369602,
369465,
369400,
381593,
265091,
265433,
382791,
376780,
225573,
278444,
164887,
168082,
76813,
227913,
265368,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Name"] = "Flash Duration",
["Value"] = 0.4,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 5,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
},
["version"] = -1,
["Name"] = "Cast - Big Alert [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    --self.Text:Hide() \nend\n\n\n",
["Time"] = 1723155144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_ongoing.png",
["Enabled"] = true,
["Revision"] = 158,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.9\n    \n    envTable.dotAnimation1.dotTexture:SetVertexColor(unpack(scriptTable.config.dotColor))\n    \n    \n    envTable.dotAnimation1.dotTexture:Show()\n    \n    --envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    --envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \n    \n    \nend",
["SpellIds"] = {
431364,
423327,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
1,
1,
0.4166216850280762,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dots Color",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots X Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 0,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dots X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots Y Offset",
["Min"] = -10,
["Name"] = "Dots Y Offset",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust how fast the blinking occurs",
["Min"] = 0.2,
["Key"] = "speed",
["Value"] = 0.4,
["Name"] = "Blink Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Min amount of transparency the blink can have",
["Min"] = 0,
["Key"] = "minAlpha",
["Value"] = 0,
["Name"] = "Blink Min Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Max amount of transparency the blink can have",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.5,
["Key"] = "maxAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Max Alpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
0.5254902243614197,
0.5137255191802979,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the blinking texture",
},
},
["version"] = -1,
["Name"] = "Cast - Ongoing Cast [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.spitefulTexture) then\n        unitFrame.spitefulTexture = unitFrame.healthBar:CreateTexture(nil, \"overlay\", nil, 6)\n        unitFrame.spitefulTexture:SetPoint('right', 0, 0)\n        unitFrame.spitefulTexture:SetSize(27, 14)\n        unitFrame.spitefulTexture:SetColorTexture(.3, .3, 1, .7)\n        \n        unitFrame.spitefulText = unitFrame.healthBar:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)\n        DetailsFramework:SetFontFace (unitFrame.spitefulText, \"2002\")\n        unitFrame.spitefulText:SetPoint(\"right\", unitFrame.spitefulTexture, \"right\", -2, 0)\n        unitFrame.spitefulText:SetJustifyH(\"right\")\n        \n        unitFrame.roleIcon = unitFrame:CreateTexture(nil, \"overlay\")\n        unitFrame.roleIcon:SetPoint(\"left\", unitFrame.healthBar, \"left\", 2, 0)\n        unitFrame.targetName = unitFrame:CreateFontString(nil, \"overlay\", \"GameFontNormal\")\n        unitFrame.targetName:SetPoint(\"left\", unitFrame.roleIcon, \"right\", 2, 0)\n        \n        unitFrame.spitefulTexture:Hide()\n        unitFrame.spitefulText:Hide()\n    end\n    \n    function envTable.UpdateSpitefulWidget(unitFrame)\n        \n        local r, g, b, a = Plater:ParseColors(scriptTable.config.bgColor)\n        unitFrame.spitefulTexture:SetColorTexture(r, g, b, a)\n        unitFrame.spitefulTexture:SetSize(scriptTable.config.bgWidth, unitFrame.healthBar:GetHeight())   \n        Plater:SetFontSize(unitFrame.spitefulText, scriptTable.config.textSize)\n        Plater:SetFontColor(unitFrame.spitefulText, scriptTable.config.textColor)\n        \n        local currentHealth = unitFrame.healthBar.CurrentHealth\n        local maxHealth = unitFrame.healthBar.CurrentHealthMax\n        \n        local healthPercent = currentHealth / maxHealth * 100\n        local timeToDie = format(\"%.1fs\", healthPercent / 8)\n        unitFrame.spitefulText:SetText(timeToDie)\n        \n        unitFrame.spitefulText:Show()\n        unitFrame.spitefulTexture:Show()\n        \n        if scriptTable.config.switchTargetName then\n            local plateFrame = unitFrame.PlateFrame\n            \n            local target = UnitName(unitFrame.namePlateUnitToken .. \"target\") or UnitName(unitFrame.namePlateUnitToken)\n            \n            if (target and target ~= \"\") then\n                local _, class = UnitClass(unitFrame.namePlateUnitToken .. \"target\")\n                if (class) then\n                    target = DetailsFramework:AddClassColorToText(target, class)\n                end\n                \n                local role = UnitGroupRolesAssigned(unitFrame.namePlateUnitToken .. \"target\")\n                if (role and role ~= \"NONE\") then\n                    target = DetailsFramework:AddRoleIconToText(target, role)\n                end\n                \n                plateFrame.namePlateUnitName = target\n                Plater.UpdateUnitName(plateFrame)\n            end\n        end\n        \n        if scriptTable.config.useTargetingColor then\n            local targeted = UnitIsUnit(unitFrame.namePlateUnitToken .. \"target\", \"player\")\n            if targeted then\n                Plater.SetNameplateColor (unitFrame, scriptTable.config.targetingColor)\n            else\n                Plater.RefreshNameplateColor(unitFrame)\n            end\n        end\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    if (unitFrame.spitefulTexture) then\n        unitFrame.spitefulText:Hide()\n        unitFrame.spitefulTexture:Hide()    \n        unitFrame.roleIcon:Hide()\n        unitFrame.targetName:Hide()\n    end\nend\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["Time"] = 1611844883,
["url"] = "",
["Icon"] = 135945,
["Enabled"] = true,
["Revision"] = 186,
["semver"] = "",
["Author"] = "Symantec-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Time to die Spiteful affix",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Time to Die",
["Name"] = "Time to Die",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 50,
["Desc"] = "",
["Min"] = 10,
["Key"] = "bgWidth",
["Value"] = 27,
["Name"] = "Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "bgColor",
["Value"] = {
0.5058823529411764,
0.07058823529411765,
1,
1,
},
["Name"] = "Background Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 24,
["Desc"] = "",
["Min"] = 7,
["Key"] = "textSize",
["Value"] = 8,
["Name"] = "Text Size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "textColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Text Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option11",
["Value"] = "Targeting",
["Name"] = "Targeting",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Target instead of Name",
["Value"] = true,
["Key"] = "switchTargetName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Color if targeting You",
["Value"] = true,
["Key"] = "useTargetingColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Color if targeting You",
["Value"] = {
0.07058823529411765,
0.6196078431372549,
0,
1,
},
["Key"] = "targetingColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option11",
["Value"] = 0,
["Name"] = "Option 11",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "M+ Spiteful",
["NpcNames"] = {
"174773",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1722866303,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_healalert.png",
["Enabled"] = true,
["Revision"] = 1254,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
450756,
452162,
322938,
322939,
324776,
324914,
326046,
340544,
335143,
327130,
256957,
275826,
429109,
451097,
293729,
341902,
341977,
441351,
441627,
463058,
471733,
425536,
427356,
424419,
423051,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["version"] = -1,
["Name"] = "Cast - Heal Cut [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
["Time"] = 1604357453,
["url"] = "",
["Icon"] = 136048,
["Enabled"] = true,
["Revision"] = 233,
["semver"] = "",
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show the energy amount above the nameplate.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Show the power of the unit above the nameplate.",
["Name"] = "script desc",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "add trigger",
["Value"] = "Add the unit name or unitId in the \"Add Trigger\" field and press \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showLater",
["Value"] = true,
["Name"] = "Show at 80% of Energy",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the energy won't start showing until the unit has 80% energy.",
},
{
["Type"] = 6,
["Name"] = "Option 2",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Text size.",
["Min"] = 8,
["Name"] = "Text Size",
["Value"] = 16,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "fontSize",
},
{
["Type"] = 1,
["Key"] = "fontColor",
["Value"] = {
0.803921568627451,
0.803921568627451,
0.803921568627451,
1,
},
["Name"] = "Font Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the text.",
},
{
["Type"] = 4,
["Key"] = "outline",
["Value"] = true,
["Name"] = "Enable Text Outline",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the text uses outline.",
},
},
["version"] = -1,
["Name"] = "Unit - Show Energy [Plater]",
["NpcNames"] = {
"164406",
"164407",
"162100",
"162099",
"162329",
"164558",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    --check for marks\n    function  envTable.CheckMark (unitId, unitFrame)\n        if (not GetRaidTargetIndex(unitId)) then\n            if (scriptTable.config.onlyInCombat) then\n                if (not UnitAffectingCombat(unitId)) then\n                    return\n                end                \n            end\n            \n            SetRaidTarget(unitId, 8)\n        end       \n    end\nend\n\n\n--163520 - forsworn squad-leader\n--163618 - zolramus necromancer - The Necrotic Wake\n--164506 - anciet captain - theater of pain\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n",
["Time"] = 1604696441,
["url"] = "",
["Icon"] = "Interface\\Worldmap\\GlowSkull_64Grey",
["Enabled"] = false,
["Revision"] = 63,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Auto set skull marker",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Auto set a raid target Skull on the unit.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "onlyInCombat",
["Value"] = false,
["Name"] = "Only in Combat",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Set the mark only if the unit is in combat.",
},
},
["version"] = -1,
["Name"] = "Auto Set Skull",
["NpcNames"] = {
"163520",
"163618",
"164506",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", 0, 10);    \n    \n    envTable.FixateIcon = Plater:CreateImage (unitFrame, 236188, 16, 16, \"overlay\");\n    envTable.FixateIcon:SetPoint (\"bottom\", envTable.FixateTarget, \"top\", 0, 4);    \n    \n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n--165560 = Gormling Larva - MTS\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    local targetName = UnitName (unitId .. \"target\");\n    if (targetName) then\n        local _, class = UnitClass (unitId .. \"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        \n        envTable.FixateTarget:Show();\n        envTable.FixateIcon:Show();\n    end    \nend\n\n\n",
["Time"] = 1604239880,
["url"] = "",
["Icon"] = 1029718,
["Enabled"] = true,
["Revision"] = 269,
["semver"] = "",
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n\n\n\n\n",
["Desc"] = "Show above the nameplate who is the player fixated",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Fixate [Plater]",
["NpcNames"] = {
"165560",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n\n--Scorchling 194622\n--Scorchling 190205\n--197398  Hungry Lasher\n--77006 corpse skitterling\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --restoring and color state and scale even if disabled, maybe the player disabled during the combat\n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.healthBar:SetScale(unitFrame.healthBar._savedOriginalScale)\n    \nend\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n",
["Time"] = 1670427838,
["url"] = "",
["Icon"] = "interface/addons/plater/media/duck_64",
["Enabled"] = true,
["Revision"] = 111,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.nameplateColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end    \n    \n    unitFrame.healthBar._savedOriginalScale = unitFrame.healthBar:GetScale()\n    \n    if (scriptTable.config.useNameplateScale) then\n        unitFrame.healthBar:SetScale(scriptTable.config.scale)\n    end\n    \nend\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = false,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0.062745101749897,
0.062745101749897,
0.0941176563501358,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Scale",
["Value"] = true,
["Key"] = "useNameplateScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Nameplate Scale",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.8,
["Name"] = "Nameplate Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "scale",
},
},
["version"] = -1,
["Name"] = "Add - Non Elite Trash [P]",
["NpcNames"] = {
"194622",
"190205",
"197398",
"77006",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1672514185,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["Enabled"] = true,
["Revision"] = 506,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Just stop casting",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
377004,
381516,
196543,
199726,
200291,
268202,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Fraction"] = false,
["Value"] = 20,
["Key"] = "segmentsAmount",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Cast - Stop Casting [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local GetSpellInfo = GetSpellInfo or function(spellID) if not spellID then return nil end local si = C_Spell.GetSpellInfo(spellID) if si then return si.name, nil, si.iconID, si.castTime, si.minRange, si.maxRange, si.spellID, si.originalIconID end end --compatibility\n    \n    envTable.npcInfo = {\n        [164427] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"1\", name = \"Boom!\"}, --reanimated warrior - plaguefall\n        \n        [164414] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"2\", name = \"Boom!\"}, --reanimated mage - plaguefall\n        \n        [164185] = {secondCastBar = true, timer = 20, timerId = 319941, altCastId = \"3\", remaining = 5, name = GetSpellInfo(319941)}, --Echelon - Halls of Atonement\n        \n        [164567] = {secondCastBar = true, altCastId = \"dromanswrath\", debuffTimer = 323059, name = GetSpellInfo(323059), spellIcon = 323059}, --Ingra Maloch -- tirna scythe\n        \n        [165408] = {secondCastBar = true, timer = 20, timerId = 322711, altCastId = \"4\", remaining = 5, name = GetSpellInfo(322711)}, --Halkias - Refracted Sinlight - Halls of Atonement\n        \n        --[225976] = {secondCastBar = true, altCastId = \"Uber Strike\",  debuffTimer = 167385, name = GetSpellInfo(167385), spellIcon = 167385}, --tank dummy        \n        --[154564] = {secondCastBar = true, timerId = \"Test Bar\", altCastId = \"debugcast\", remaining = 5, name = GetSpellInfo(319941), spellIcon = 319941}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n        --[154580] = {secondCastBar = true, altCastId = \"debugcast\", debuffTimer = 204242, name = GetSpellInfo(81297), spellIcon = 81297}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n    }\n    \n    --set the castbar config\n    local config = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        config.text = npcInfo.name\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end\n        \n        DetailsFramework:TruncateText(unitFrame.castBar2.Text, unitFrame.castBar2:GetWidth() - 16)\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                if (altCastId ~= npcInfo.altCastId or not unitFrame.castBar2:IsShown()) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n                end\n            end \n            \n        elseif (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                --get the debuff timeleft\n                local name = npcInfo.name\n                local auras = Plater.GetUnitAuras(unitFrame)\n                local duration, expirationTime\n                for _, aura in pairs(auras) do\n                    if aura.name == name then\n                        duration = aura.duration\n                        expirationTime = aura.expirationTime\n                        break\n                    end\n                end\n                local startTime = expirationTime - duration\n                \n                if (not unitFrame.castBar2:IsShown() or unitFrame.castBar2.spellStartTime < startTime) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, startTime)\n                end\n                \n            else \n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        end\n    end\nend",
["Time"] = 1729585139,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\Images\\countdown_bar_icon",
["Enabled"] = true,
["Revision"] = 234,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Some units has special events without a clear way to show. This script adds a second cast bar to inform the user about it.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                local name = npcInfo.name\n                --get the debuff timeleft\n                local name = npcInfo.name\n                local auras = Plater.GetUnitAuras(unitFrame)\n                local duration, expirationTime\n                for _, aura in pairs(auras) do\n                    if aura.name == name then\n                        duration = aura.duration\n                        expirationTime = aura.expirationTime\n                        break\n                    end\n                end\n                \n                envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, expirationTime-duration)\n            else\n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        else\n            envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n        end\n    end\nend",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Countdown",
["NpcNames"] = {
"164427",
"164414",
"164185",
"164567",
"165408",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.TextureWatchStep) then\n        \n        unitFrame.TextureWatchStep = true\n        \n        local animationFrame = CreateFrame(\"frame\", nil, unitFrame)\n        \n        \n        --> single animation group\n        local bearTrapAnimation = animationFrame:CreateAnimationGroup(\"beartrapAnimationGroup\")\n        bearTrapAnimation:SetLooping(\"NONE\")\n        \n        --> widgets:\n        \n        ----------------------------------------------\n        \n        local leftTrap  = animationFrame:CreateTexture(\"$parentleftTrapTexture\", \"ARTWORK\")\n        leftTrap:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_beartrap_2.png]])\n        leftTrap:SetDrawLayer(\"ARTWORK\", 0)\n        leftTrap:SetPoint(\"center\", animationFrame, \"center\", -48, 0)\n        leftTrap:SetSize(100, 100)\n        leftTrap:SetTexCoord(1, 0.0010000000149012, 0.0010000000149012, 1)\n        \n        --> animations for leftTrap\n        \n        leftTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        leftTrap.rotation:SetTarget(leftTrap)\n        leftTrap.rotation:SetOrder(1)\n        leftTrap.rotation:SetDuration(0.195999994874)\n        leftTrap.rotation:SetStartDelay(0.39999997615814)\n        leftTrap.rotation:SetDegrees(-90)\n        leftTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        leftTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        leftTrap.rotation:SetTarget(leftTrap)\n        leftTrap.rotation:SetOrder(6)\n        leftTrap.rotation:SetDuration(0.195999994874)\n        leftTrap.rotation:SetDegrees(90)\n        leftTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        leftTrap.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        leftTrap.alpha:SetTarget(leftTrap)\n        leftTrap.alpha:SetOrder(6)\n        leftTrap.alpha:SetDuration(0.195999994874)\n        leftTrap.alpha:SetFromAlpha(1)\n        leftTrap.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        local rightTrap  = animationFrame:CreateTexture(\"$parentrightTrapTexture\", \"ARTWORK\")\n        rightTrap:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_beartrap_2.png]])\n        rightTrap:SetDrawLayer(\"ARTWORK\", 0)\n        rightTrap:SetPoint(\"center\", animationFrame, \"center\", 0, 0)\n        rightTrap:SetSize(100, 100)\n        \n        --> animations for rightTrap\n        \n        rightTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        rightTrap.rotation:SetTarget(rightTrap)\n        rightTrap.rotation:SetOrder(1)\n        rightTrap.rotation:SetDuration(0.195999994874)\n        rightTrap.rotation:SetStartDelay(0.39999997615814)\n        rightTrap.rotation:SetDegrees(90)\n        rightTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        rightTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        rightTrap.rotation:SetTarget(rightTrap)\n        rightTrap.rotation:SetOrder(6)\n        rightTrap.rotation:SetDuration(0.195999994874)\n        rightTrap.rotation:SetDegrees(-90)\n        rightTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        rightTrap.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        rightTrap.alpha:SetTarget(rightTrap)\n        rightTrap.alpha:SetOrder(6)\n        rightTrap.alpha:SetDuration(0.195999994874)\n        rightTrap.alpha:SetFromAlpha(1)\n        rightTrap.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        local boots  = animationFrame:CreateTexture(\"$parentbootsTexture\", \"BORDER\")\n        boots:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_shoes.png]])\n        boots:SetDrawLayer(\"BORDER\", 0)\n        boots:SetPoint(\"center\", animationFrame, \"center\", -88, 35)\n        boots:SetSize(50, 50)\n        \n        --> animations for boots\n        \n        boots.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        boots.alpha:SetTarget(boots)\n        boots.alpha:SetOrder(1)\n        boots.alpha:SetDuration(0.31599998474121)\n        boots.alpha:SetFromAlpha(0)\n        boots.alpha:SetToAlpha(1)\n        boots.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        boots.rotation:SetTarget(boots)\n        boots.rotation:SetOrder(1)\n        boots.rotation:SetDuration(0.2960000038147)\n        boots.rotation:SetStartDelay(0.19999998807907)\n        boots.rotation:SetDegrees(40)\n        boots.rotation:SetOrigin(\"center\", 0, 0)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(1)\n        boots.translation:SetDuration(0.59599995613098)\n        boots.translation:SetOffset(63, -33)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(2)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(3, 3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(3)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(-3, -3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(4)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(3, 3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(5)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(-3, -3)\n        boots.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        boots.alpha:SetTarget(boots)\n        boots.alpha:SetOrder(6)\n        boots.alpha:SetDuration(0.39599999785423)\n        boots.alpha:SetFromAlpha(1)\n        boots.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        unitFrame.BearTrapTextures = {leftTrap, rightTrap, boots}\n        unitFrame.BearTrapAnimationFrame = animationFrame\n        unitFrame.BearTrapAnimation = bearTrapAnimation\n        \n        \n        bearTrapAnimation:SetScript(\"OnPlay\", function()\n                boots:SetAlpha(0)\n                boots:Show()\n                leftTrap:Show()\n                rightTrap:Show()            \n        end)\n        \n        bearTrapAnimation:SetScript(\"OnFinished\", function()\n                boots:Hide()\n                leftTrap:Hide()\n                rightTrap:Hide()\n        end)       \n        \n        bearTrapAnimation:SetScript(\"OnStop\", function()\n                boots:Hide()\n                leftTrap:Hide()\n                rightTrap:Hide()\n        end)           \n        \n        \n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.BearTrapAnimation:Stop()\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1720031975,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_voidzone.png",
["Enabled"] = true,
["Revision"] = 220,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Play an animation when the cast creates small zones in the ground that will damage if the player doesn't move.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.BearTrapAnimationFrame:SetSize(1, 1)\n    unitFrame.BearTrapAnimationFrame:ClearAllPoints()\n    unitFrame.BearTrapAnimationFrame:SetPoint(\"center\", unitFrame, \"center\", 30, 63)\n    unitFrame.BearTrapAnimationFrame:SetScale(0.5)\n    \n    unitFrame.BearTrapAnimation:Play()\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
450784,
451423,
445813,
445838,
438658,
433845,
456696,
451391,
324923,
323138,
340189,
326021,
320571,
321780,
345623,
333479,
334476,
320772,
257882,
424903,
426345,
422233,
445541,
428703,
439559,
472041,
473168,
473304,
1216431,
320182,
1215850,
331237,
434706,
434998,
439365,
473070,
427484,
424462,
424429,
423062,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Settings for the animation played when the cast creates small void zones in the ground.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Cast - Voidzone [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe.png]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\n    unitFrame.CastSwipeTexture:Hide()\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1719758013,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
["Enabled"] = true,
["Revision"] = 281,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    unitFrame.CastSwipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe.png]])\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetScaleFrom(1.05, 1.05)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(1, 1)    \n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
["SpellIds"] = {
453212,
451098,
427001,
438622,
446086,
447271,
437700,
439646,
448877,
451387,
331743,
320637,
327240,
257170,
257326,
257169,
423538,
428508,
428520,
267354,
1214754,
260280,
293861,
285454,
317605,
339415,
331223,
318406,
442589,
423501,
440652,
424621,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "Rotation Duration",
["Min"] = 0.1,
["Key"] = "rotationDuration",
["Value"] = 0.15,
["Name"] = "Rotation Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Key"] = "animStartDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Animation Start Duration",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Name"] = "Texture Start Alpha",
["Value"] = 0.3,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureStartAlpha",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Key"] = "textureScale",
["Value"] = 0.8,
["Name"] = "Texture Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 0.8,
["Name"] = "Texture Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "textureColor",
["Value"] = {
0.7411764860153198,
0.7411764860153198,
0.7411764860153198,
1,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["version"] = -1,
["Name"] = "Cast - AoE With Range [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --get the reference of the arrow texture\n    local movingArrowTexture = unitFrame._movingArrowTexture\n    \n    --if it doesn't exists yet, create now\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    local mAT = movingArrowTexture\n    \n    if (not mAT.movingAnimation) then\n        local onPlay = function()\n            mAT:Show() \n        end\n        \n        local onStop =  function()\n            mAT:Hide() \n        end\n        \n        mAT.movingAnimation = Plater:CreateAnimationHub( mAT, onPlay, onStop )\n        mAT.movingAnimation:SetLooping( \"REPEAT\" )\n    end\n    \n    if (not mAT.arrowAnimation) then\n        local arrowAnimation = Plater:CreateAnimation (mAT.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n        mAT.arrowAnimation = arrowAnimation\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    mAT.movingAnimation:Stop()\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    local maxAlpha = scriptTable.config.arrowAlpha\n    \n    mAT:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = mAT.movingAnimation:GetProgress()\n    \n    if (percent < 0.20) then\n        local value = DetailsFramework.Math.MapRangeClamped(0, 0.20, 0, maxAlpha, percent)\n        mAT:SetAlpha(value)\n        \n    elseif (percent > 0.8) then\n        local value = DetailsFramework.Math.MapRangeClamped(0.8, 1, maxAlpha, 0, percent)\n        mAT:SetAlpha(value)\n    end\n    \n    self.ThrottleUpdate = 0\n    \n    --mAT:SetAlpha(1)\nend",
["Time"] = 1719788095,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_frontal",
["Enabled"] = true,
["Revision"] = 754,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    \n    mAT:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    mAT:SetSize(16, self:GetHeight())\n    mAT:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    mAT:SetParent(self.FrameOverlay)\n    mAT:SetDrawLayer(\"overlay\",  7)\n    mAT:SetAlpha(scriptTable.config.arrowAlpha)\n    mAT:SetDesaturated(scriptTable.config.desaturateArrow)        \n    \n    mAT:ClearAllPoints()\n    mAT:SetPoint(\"left\", self, \"left\", -16, 0)\n    \n    local arrowAnimation = mAT.arrowAnimation\n    arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    arrowAnimation:SetOffset(self:GetWidth(), 0)\n    \n    mAT.movingAnimation:Play()\n    \n    if (scriptTable.config.bChangeSpellName) then\n        self.Text:SetText(scriptTable.config.spellNameText)\n    end\n    \n    --DetailsFramework:DebugVisibility(mAT)\n\nend\n\n\n\n\n",
["SpellIds"] = {
431494,
426860,
448213,
434407,
439789,
434824,
453161,
435012,
439506,
443500,
434779,
451543,
439621,
441384,
441381,
447395,
456711,
448105,
323137,
321968,
331718,
331721,
325223,
340160,
321834,
320596,
324323,
333488,
323496,
333477,
256627,
257292,
454438,
269029,
257862,
425027,
449130,
428202,
448640,
427869,
352833,
330403,
209495,
257426,
255952,
257870,
413147,
383107,
377559,
388060,
376170,
384524,
375351,
390111,
369791,
369573,
369563,
369335,
369061,
375727,
265016,
265019,
260793,
260292,
272457,
272609,
269843,
183465,
226296,
188169,
183088,
410873,
411012,
88308,
382708,
375251,
375439,
372311,
373742,
372201,
374533,
377204,
201226,
204667,
198379,
200768,
253239,
250258,
255567,
194956,
427510,
426645,
412505,
412129,
419351,
401482,
404916,
200345,
200261,
198641,
265372,
271174,
264694,
264923,
1217279,
267551,
275907,
259940,
283421,
293986,
291865,
292264,
1215738,
334023,
317231,
320729,
333294,
330614,
323608,
432198,
441119,
448619,
436592,
473220,
472452,
465682,
465754,
473114,
1217496,
422122,
426261,
421277,
427025,
426893,
474018,
1214546,
445457,
447270,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.73,
["Key"] = "arrowAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "animSpeed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Animation Speed",
},
{
["Type"] = 4,
["Name"] = "Use White Arrow",
["Value"] = false,
["Key"] = "desaturateArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
{
["Type"] = 6,
["Key"] = "option8",
["Value"] = 0,
["Name"] = "Option 8",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bChangeSpellName",
["Value"] = true,
["Name"] = "Change Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change the spell name to the text entered below",
},
{
["Type"] = 3,
["Key"] = "spellNameText",
["Value"] = "Frontal",
["Name"] = "New Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "The customized spell name",
},
},
["version"] = -1,
["Name"] = "Cast - Frontal Cone [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.CreateWidgets()\n        --create a camera shake for the nameplate\n        if (not unitFrame.AddExplosionOnDieShake) then\n            unitFrame.AddExplosionOnDieShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n        end\n        \n        if (not unitFrame.AddExplosionOnDieBackground) then\n            unitFrame.AddExplosionOnDieBackground = unitFrame.healthBar:CreateTexture(nil, \"background\")\n            unitFrame.AddExplosionOnDieBackground:SetAllPoints(unitFrame.healthBar)\n            unitFrame.AddExplosionOnDieBackground:SetColorTexture(1, 0, 0, 1)\n        end\n    end\n    \nend\n\n--194895 = unstable squall\n--105703 = mana wyrm\n--59598 = lesser sha\n--58319 = lesser sha\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    healthBar:SetReverseFill(false)\n    \n    if (unitFrame.AddExplosionOnDieShake) then\n        unitFrame:StopFrameShake (unitFrame.AddExplosionOnDieShake)    \n    end\n    \n    if (unitFrame.AddExplosionOnDieBackground) then\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable._HealthPercent < 50) then\n        local alpha = DetailsFramework:MapRangeClamped(0, 50, 0.5, 0, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieBackground:SetAlpha(alpha)\n    else\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    end\n    \n    if (envTable._HealthPercent < 15 and scriptTable.config.useShake) then\n        local shakeAmpliture = DetailsFramework:MapRangeClamped(0.001, 15, 10, 1, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude * shakeAmpliture\n        unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n        \n        unitFrame:PlayFrameShake (unitFrame.AddExplosionOnDieShake)\n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1669340350,
["url"] = "",
["Icon"] = "interface/addons/plater/media/radio_64",
["Enabled"] = true,
["Revision"] = 106,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (scriptTable.config.useReverse) then\n        healthBar:SetReverseFill(true)\n    end\n    \n    --unitFrame.AddExplosionOnDieShake\n    \n    envTable.CreateWidgets()\n    \n    unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    unitFrame.AddExplosionOnDieShake.OriginalDuration = 0.120\n    unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    if (scriptTable.config.useBackground) then\n        unitFrame.AddExplosionOnDieBackground:Show()\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    else\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useReverse",
["Value"] = false,
["Name"] = "Reverse Health Bar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useShake",
["Value"] = false,
["Name"] = "Enable Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "How strong is the shake.",
["Min"] = 0.05,
["Key"] = "shakeAmplitude",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 70,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useBackground",
["Value"] = true,
["Name"] = "Show Red Background",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Red Background",
},
},
["version"] = -1,
["Name"] = "Add - Explode on Die [P]",
["NpcNames"] = {
"194895",
"105703",
"59598",
"58319",
200388,
189299,
131402,
135052,
130653,
231497,
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1719788550,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\aura_castbar.png",
["Enabled"] = true,
["Revision"] = 27,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show a castbar for the aura duration.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local auraDuration = envTable._Duration\n    local altCastId = 1\n    \n    ---@class plater_altcastbarconfig : table\n    ---@field iconTexture string\n    ---@field iconTexcoord table\n    ---@field iconAlpha number\n    ---@field text string\n    ---@field texture any\n    ---@field color any\n    ---@field isChanneling boolean\n    ---@field canInterrupt boolean\n    ---@field height number\n    ---@field iconSize number\n    ---@field textSize number\n    ---@field spellNameAnchor df_anchor\n    ---@field timerAnchor df_anchor\n    ---@field iconAnchor df_anchor\n    \n    local configTable = {\n        iconTexture = envTable._Texture,\n        text = envTable._SpellName,\n        color = \"gray\",\n        isChanneling = true,\n        canInterrupt = false,\n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        \n    }\n    \n    Plater.SetAltCastBar(unitFrame.PlateFrame, configTable, auraDuration, envTable._StartTime, altCastId)\n    \nend\n\n\n",
["SpellIds"] = {
438494,
335141,
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Aura - Is Cast Bar [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (UnitIsUnit(unitId .. \"target\", \"player\")) then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n    else\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1668886509,
["url"] = "",
["Icon"] = "Interface\\ICONS\\Ability_Fixated_State_Red",
["Enabled"] = true,
["Revision"] = 33,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Alert about a unit fixated on the player by using a buff on the enemy unit.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
426662,
426663,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0,
0.5568627450980392,
0.03529411764705882,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Change the enemy nameplate color to this color when fixating you!",
},
},
["version"] = -1,
["Name"] = "Fixate by Unit Buff [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.1, 0.5)\n    \n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    if (envTable._CanInterrupt) then\n        local newAlpha = min(0.1 + math.sin ( normalizedPercent * math.pi  ), 1)\n        textureStretched:SetAlpha(newAlpha)\n    else        \n        local newAlpha = min(0.1 + math.sin ( normalizedPercent * math.pi  ), 1)\n        textureStretched:SetAlpha(newAlpha)\n    end    \n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1719694337,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_debuff.png",
["Enabled"] = true,
["Revision"] = 741,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show a different animation for the cast bar.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (IsInRaid()) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    --textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:SetTexture([[Interface\\AddOns\\Plater\\images\\tail_rounded_white.png]])\n    textureStretched:SetHeight(castBar:GetHeight() + 2)\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    \n    --trail\n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    --local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    --Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
432448,
431309,
451107,
451119,
438618,
436322,
443507,
443436,
439341,
447261,
449444,
451224,
451241,
450095,
451612,
451395,
324987,
327393,
256709,
268230,
275836,
426308,
449153,
427461,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Fraction"] = false,
["Value"] = 7,
["Key"] = "segmentsAmount",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Name"] = "Spark Color",
["Value"] = {
0.9686275124549866,
0.9764706492424011,
1,
1,
},
["Key"] = "sparkColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Trail Color",
["Value"] = {
0.4901961088180542,
0,
0.5490196347236633,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Cast - Debuff [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --compat\n    local GetSpellInfo = GetSpellInfo or function(spellID) if not spellID then return nil end local si = C_Spell.GetSpellInfo(spellID) if si then return si.name, nil, si.iconID, si.castTime, si.minRange, si.maxRange, si.spellID, si.originalIconID end end\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        --[167385] = \"Uber Strike\", --tank dummy\n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    local auras = Plater.GetUnitAuras(unitFrame)\n    for id, aura in pairs(auras) do\n        local name, caster = aura.name, aura.sourceUnit\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n            break\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1729585422,
["url"] = "",
["Icon"] = 841383,
["Enabled"] = true,
["Revision"] = 279,
["semver"] = "",
["Author"] = "Tecno-Azralon",
["Desc"] = "When an enemy places a debuff and starts to chase you. This script changes the nameplate color and place your name above the nameplate as well.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["SpellIds"] = {
"spawn of g'huun",
"smuggled crawg",
"sergeant bainbridge",
"blacktooth scrapper",
"irontide grenadier",
"feral bloodswarmer",
"earthrager",
"crawler mine",
"rezan",
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Fixate On You [Plater]",
["NpcNames"] = {
"Illusionary Vulpin",
129802,
133482,
235631,
231014,
},
},
},
["saved_cvars_last_change"] = {
["nameplateMinAlpha"] = "Interface/AddOns/Plater/Plater.lua:4456",
["nameplateMinAlphaDistance"] = "Interface/AddOns/Plater/Plater.lua:4456",
["nameplateSelectedAlpha"] = "Interface/AddOns/Plater/Plater.lua:4456",
["nameplateShowFriends"] = "[C]: ?\n[C]: in function 'SetCVar'\n[Interface/AddOns/Blizzard_SharedXMLBase/CvarUtil.lua]:76: in function 'SetValue'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua]:264: in function 'SetValueDerived'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua]:110: in function 'ApplyValue'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua]:86: in function 'SetValue'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Settings.lua]:224: in function 'SetValue'\n[FRIENDNAMEPLATES]:3: in function <[string \"FRIENDNAMEPLATES\"]:1>\n",
["nameplateShowPersonalCooldowns"] = "Interface/AddOns/Plater/Plater.lua:4456",
["nameplateShowEnemies"] = "Interface/AddOns/Plater/Plater.lua:1615",
["nameplateShowFriendlyBuffs"] = "Interface/AddOns/Plater/Plater.lua:4456",
["nameplateMaxDistance"] = "Interface/AddOns/Plater/Plater.lua:1615",
},
["aura2_y_offset"] = 5,
["expansion_triggerwipe"] = {
[10] = true,
},
["npc_cache"] = {
[167898] = {
"Manifestation of Envy",
"Halls of Atonement",
"enUS",
},
[104537] = {
"Fel Lord Kuraz'mal",
"The Nighthold",
"enUS",
},
[216363] = {
"Reinforced Drone",
"Ara-Kara, City of Echoes",
"enUS",
},
[101660] = {
"Rage Rot",
"Darkheart Thicket",
"enUS",
},
[99678] = {
"Lingering Corruption",
"Vault of the Wardens",
"enUS",
},
[110995] = {
"Ranger General Feleor",
"Black Rook Hold",
"enUS",
},
[231325] = {
"Darkfuse Jumpstarter",
"Operation: Floodgate",
"enUS",
},
[95842] = {
"Valarjar Thundercaller",
"Halls of Valor",
"enUS",
},
[245008] = {
"Unbound Phaseblade",
"Manaforge Omega",
"enUS",
},
[104218] = {
"Advisor Melandrus",
"Court of Stars",
"enUS",
},
[109397] = {
"Belphiar",
"Trial of the Serpent",
"enUS",
},
[97185] = {
"The Grimewalker",
"Maw of Souls",
"enUS",
},
[248589] = {
"Nullbinder",
"Manaforge Omega",
"enUS",
},
[99359] = {
"Rotheart Keeper",
"Darkheart Thicket",
"enUS",
},
[216365] = {
"Winged Carrier",
"Ara-Kara, City of Echoes",
"enUS",
},
[100830] = {
"Zaurac",
"Skywall",
"enUS",
},
[95779] = {
"Festerhide Grizzly",
"Darkheart Thicket",
"enUS",
},
[95843] = {
"King Haldor",
"Halls of Valor",
"enUS",
},
[114321] = {
"Lord Crispin Ference",
"Return to Karazhan",
"enUS",
},
[98081] = {
"Bellowing Idol",
"Neltharion's Lair",
"enUS",
},
[113554] = {
"Astral Anomaly",
"The Nighthold",
"enUS",
},
[112595] = {
"Shal'dorei Archmage",
"The Nighthold",
"enUS",
},
[99360] = {
"Vilethorn Blossom",
"Darkheart Thicket",
"enUS",
},
[177237] = {
"Chains of Damnation",
"Tazavesh, the Veiled Market",
"enUS",
},
[178388] = {
"Bazaar Strongarm",
"Tazavesh, the Veiled Market",
"enUS",
},
[96611] = {
"Angerhoof Bull",
"Halls of Valor",
"enUS",
},
[113043] = {
"Abyss Watcher",
"The Nighthold",
"enUS",
},
[98785] = {
"Felblood Packhound",
"Peak of Serenity",
"enUS",
},
[102941] = {
"Congealed Blood",
"Assault on Violet Hold",
"enUS",
},
[235805] = {
"Shadowguard Darkmage",
"Manaforge Omega",
"enUS",
},
[175576] = {
"Containment Cell",
"Tazavesh, the Veiled Market",
"enUS",
},
[241304] = {
"Shadowguard Infuser",
"Manaforge Omega",
"enUS",
},
[112596] = {
"Duskwatch Warden",
"The Nighthold",
"enUS",
},
[102430] = {
"Tarspitter Slug",
"Neltharion's Lair",
"enUS",
},
[116049] = {
"Shadow Wrap",
"The Nighthold",
"enUS",
},
[236190] = {
"Frenzied Mite",
"Eco-Dome Al'dani",
"enUS",
},
[52558] = {
"Lord Rhyolith",
"Firelands",
"enUS",
},
[114323] = {
"Guarm",
"Trial of Valor",
"enUS",
},
[235807] = {
"Shadowguard Acolyte",
"Manaforge Omega",
"enUS",
},
[234912] = {
"Ravaging Scavenger",
"Eco-Dome Al'dani",
"enUS",
},
[98275] = {
"Risen Archer",
"Black Rook Hold",
"enUS",
},
[102431] = {
"Blood-Princess Thal'ena",
"Assault on Violet Hold",
"enUS",
},
[178392] = {
"Gatewarden Zo'mazz",
"Tazavesh, the Veiled Market",
"enUS",
},
[53901] = {
"Unstable Magma",
"Firelands",
"enUS",
},
[100769] = {
"Howling Winds",
"Skywall",
"enUS",
},
[232228] = {
"Waterworks Bottomfeeder",
"Operation: Floodgate",
"enUS",
},
[242586] = {
"Arcane Manifestation",
"Manaforge Omega",
"enUS",
},
[53134] = {
"Ancient Core Hound",
"Firelands",
"enUS",
},
[116562] = {
"Flamewaker Centurion",
"Return to Karazhan",
"enUS",
},
[102368] = {
"Felguard Destroyer",
"Assault on Violet Hold",
"enUS",
},
[242587] = {
"Living Mass",
"Manaforge Omega",
"enUS",
},
[178394] = {
"Cartel Lackey",
"Tazavesh, the Veiled Market",
"enUS",
},
[114900] = {
"Gripping Tentacle",
"Trial of Valor",
"enUS",
},
[100770] = {
"Lesser Sandling",
"Skywall",
"enUS",
},
[96934] = {
"Valarjar Trapper",
"Halls of Valor",
"enUS",
},
[116563] = {
"Ancient Core Hound",
"Return to Karazhan",
"enUS",
},
[214840] = {
"Engorged Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[242589] = {
"Void Manifestation",
"Manaforge Omega",
"enUS",
},
[98533] = {
"Foul Mother",
"Vault of the Wardens",
"enUS",
},
[113111] = {
"Saltscale Swarmer",
"Eye of Azshara",
"enUS",
},
[107101] = {
"Fel Fury",
"Vault of the Wardens",
"enUS",
},
[213179] = {
"Avanoxx",
"Ara-Kara, City of Echoes",
"enUS",
},
[234918] = {
"Wastes Creeper",
"Eco-Dome Al'dani",
"enUS",
},
[104288] = {
"Trilliax",
"The Nighthold",
"enUS",
},
[53231] = {
"Lava Scion",
"Firelands",
"enUS",
},
[99365] = {
"Taintheart Stalker",
"Darkheart Thicket",
"enUS",
},
[98406] = {
"Embershard Scorpion",
"Neltharion's Lair",
"enUS",
},
[113048] = {
"Corrupted Deer",
"The Emerald Nightmare",
"enUS",
},
[112153] = {
"Dire Shaman",
"The Emerald Nightmare",
"enUS",
},
[114263] = {
"Odyn",
"Trial of Valor",
"enUS",
},
[237861] = {
"Fractillus",
"Manaforge Omega",
"enUS",
},
[242209] = {
"Overgorged Mite",
"Eco-Dome Al'dani",
"enUS",
},
[228015] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[99366] = {
"Taintheart Summoner",
"Darkheart Thicket",
"enUS",
},
[101476] = {
"Molten Charskin",
"Neltharion's Lair",
"enUS",
},
[220599] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[236072] = {
"Unbound Entity",
"Manaforge Omega",
"enUS",
},
[228144] = {
"Darkfuse Soldier",
"Operation: Floodgate",
"enUS",
},
[98919] = {
"Seacursed Swiftblade",
"Maw of Souls",
"enUS",
},
[114328] = {
"Coggleston",
"Return to Karazhan",
"enUS",
},
[217531] = {
"Ixin",
"Ara-Kara, City of Echoes",
"enUS",
},
[112474] = {
"Corrupted Totem",
"The Emerald Nightmare",
"enUS",
},
[114584] = {
"Phantom Crew",
"Return to Karazhan",
"enUS",
},
[98280] = {
"Risen Arcanist",
"Black Rook Hold",
"enUS",
},
[114712] = {
"Runecarver Slave",
"Maw of Souls",
"enUS",
},
[109725] = {
"Felguard",
"Battle of Exodar",
"enUS",
},
[93485] = {
"Forsaken Crewman",
"The Maw of Nashal",
"enUS",
},
[98728] = {
"Acidic Bile",
"The Arcway",
"enUS",
},
[98792] = {
"Wyrmtongue Scavenger",
"Black Rook Hold",
"enUS",
},
[53616] = {
"Kar the Everburning",
"Firelands",
"enUS",
},
[53648] = {
"Inferno Hawk",
"Firelands",
"enUS",
},
[217533] = {
"Atik",
"Ara-Kara, City of Echoes",
"enUS",
},
[98217] = {
"Portal Master Jorvinax",
"Peak of Serenity",
"enUS",
},
[113626] = {
"Venomous Spiderling",
"The Emerald Nightmare",
"enUS",
},
[101414] = {
"Saltscale Skulker",
"Eye of Azshara",
"enUS",
},
[240935] = {
"Nascent Shadowguard",
"Manaforge Omega",
"enUS",
},
[106785] = {
"Bitterbrine Slave",
"Eye of Azshara",
"enUS",
},
[245411] = {
"Ravaging Scavenger",
"Eco-Dome Al'dani",
"enUS",
},
[95852] = {
"Nathanos Blightcaller",
"The Maw of Nashal",
"enUS",
},
[113307] = {
"Chronowraith",
"The Nighthold",
"enUS",
},
[115417] = {
"Rat",
"Return to Karazhan",
"enUS",
},
[102246] = {
"Anub'esset",
"Assault on Violet Hold",
"enUS",
},
[97259] = {
"Blazing Hydra Spawn",
"Eye of Azshara",
"enUS",
},
[112668] = {
"Infernal Imp",
"Court of Stars",
"enUS",
},
[112732] = {
"Brood of Sael'orn",
"Assault on Violet Hold",
"enUS",
},
[102566] = {
"Grimhorn the Enslaver",
"Vault of the Wardens",
"enUS",
},
[98538] = {
"Lady Velandras Ravencrest",
"Black Rook Hold",
"enUS",
},
[106786] = {
"Bitterbrine Slave",
"Eye of Azshara",
"enUS",
},
[113052] = {
"Dreadguard",
"The Nighthold",
"enUS",
},
[52498] = {
"Beth'tilac",
"Firelands",
"enUS",
},
[52530] = {
"Alysrazor",
"Firelands",
"enUS",
},
[101991] = {
"Nightmare Dweller",
"Darkheart Thicket",
"enUS",
},
[53617] = {
"Molten Erupter",
"Firelands",
"enUS",
},
[115418] = {
"Spider",
"Return to Karazhan",
"enUS",
},
[97068] = {
"Storm Drake",
"Halls of Valor",
"enUS",
},
[104293] = {
"Avatar of Shadow",
"Vault of the Wardens",
"enUS",
},
[93104] = {
"Forsaken Bat-Rider",
"The Maw of Nashal",
"enUS",
},
[102375] = {
"Runecarver Slave",
"Maw of Souls",
"enUS",
},
[100393] = {
"Dread Felbat",
"The Arcway",
"enUS",
},
[112733] = {
"Venomhide Shadowspinner",
"Assault on Violet Hold",
"enUS",
},
[105636] = {
"Understone Drudge",
"Neltharion's Lair",
"enUS",
},
[229686] = {
"Venture Co. Surveyor",
"Operation: Floodgate",
"enUS",
},
[106787] = {
"Bitterbrine Slave",
"Eye of Azshara",
"enUS",
},
[100713] = {
"Rockbait Fisher",
"Neltharion's Lair",
"enUS",
},
[111071] = {
"Pulsauron",
"The Nighthold",
"enUS",
},
[54161] = {
"Flame Archon",
"Firelands",
"enUS",
},
[97197] = {
"Valarjar Purifier",
"Halls of Valor",
"enUS",
},
[99307] = {
"Skjal",
"Maw of Souls",
"enUS",
},
[237872] = {
"Unbound Mage",
"Manaforge Omega",
"enUS",
},
[116059] = {
"Regal Cloudwing",
"The Nighthold",
"enUS",
},
[98732] = {
"Plagued Rat",
"The Arcway",
"enUS",
},
[231223] = {
"Disturbed Kelp",
"Operation: Floodgate",
"enUS",
},
[101098] = {
"Na'ser",
"Skywall",
"enUS",
},
[115484] = {
"Fel Bat",
"Return to Karazhan",
"enUS",
},
[104295] = {
"Blazing Imp",
"Court of Stars",
"enUS",
},
[112671] = {
"Duskwatch Battle-Magus",
"The Nighthold",
"enUS",
},
[164218] = {
"Lord Chamberlain",
"Halls of Atonement",
"enUS",
},
[234933] = {
"Taah'bat",
"Eco-Dome Al'dani",
"enUS",
},
[98733] = {
"Withered Fiend",
"The Arcway",
"enUS",
},
[97966] = {
"Felblade Destroyer",
"Peak of Serenity",
"enUS",
},
[101099] = {
"Kaeled",
"Skywall",
"enUS",
},
[90997] = {
"Mightstone Breaker",
"Neltharion's Lair",
"enUS",
},
[105383] = {
"Corruptor Tentacle",
"The Emerald Nightmare",
"enUS",
},
[98286] = {
"Chaos Minion",
"Peak of Serenity",
"enUS",
},
[93486] = {
"Dread-Captain Tattersail",
"The Maw of Nashal",
"enUS",
},
[112664] = {
"Arc Well",
"The Nighthold",
"enUS",
},
[105304] = {
"Dominator Tentacle",
"The Emerald Nightmare",
"enUS",
},
[98542] = {
"Amalgam of Souls",
"Black Rook Hold",
"enUS",
},
[99629] = {
"Bitterbrine Scavenger",
"Eye of Azshara",
"enUS",
},
[179821] = {
"Commander Zo'far",
"Tazavesh, the Veiled Market",
"enUS",
},
[190174] = {
"Hypnosis Bat",
"Court of Stars",
"enUS",
},
[52620] = {
"Fragment of Rhyolith",
"Firelands",
"enUS",
},
[93171] = {
"Skeletal Gryphon",
"The Maw of Nashal",
"enUS",
},
[98926] = {
"Shadow Hunter",
"Vault of the Wardens",
"enUS",
},
[53619] = {
"Druid of the Flame",
"Firelands",
"enUS",
},
[99362] = {
"Kudzilla",
"Darkheart Thicket",
"enUS",
},
[105256] = {
"Eye of Keletress",
"Peak of Serenity",
"enUS",
},
[234041] = {
"Forge Sentinel",
"Manaforge Omega",
"enUS",
},
[97200] = {
"Seacursed Soulkeeper",
"Maw of Souls",
"enUS",
},
[97264] = {
"Hatecoil Shellbreaker",
"Eye of Azshara",
"enUS",
},
[103466] = {
"Fel Slime",
"Terrace of Endless Spring",
"enUS",
},
[114783] = {
"Reformed Maiden",
"Return to Karazhan",
"enUS",
},
[102373] = {
"Corrosive Felhound",
"Assault on Violet Hold",
"enUS",
},
[105704] = {
"Arcane Manifestation",
"Court of Stars",
"enUS",
},
[99630] = {
"Bitterbrine Scavenger",
"Eye of Azshara",
"enUS",
},
[93490] = {
"Royal Dreadguard",
"The Maw of Nashal",
"enUS",
},
[104154] = {
"Gul'dan",
"The Nighthold",
"enUS",
},
[111075] = {
"Chaotoid",
"The Nighthold",
"enUS",
},
[112162] = {
"Grisly Trapper",
"The Emerald Nightmare",
"enUS",
},
[180335] = {
"Cartel Smuggler",
"Tazavesh, the Veiled Market",
"enUS",
},
[97968] = {
"Vizznak",
"Peak of Serenity",
"enUS",
},
[53140] = {
"Son of Flame",
"Firelands",
"enUS",
},
[105257] = {
"Eye of Keletress",
"Peak of Serenity",
"enUS",
},
[116574] = {
"Silver Forks",
"Return to Karazhan",
"enUS",
},
[103769] = {
"Xavius",
"The Emerald Nightmare",
"enUS",
},
[93173] = {
"Icebound Dreadnought",
"The Maw of Nashal",
"enUS",
},
[102683] = {
"Emeriss",
"The Emerald Nightmare",
"enUS",
},
[180336] = {
"Cartel Wiseguy",
"Tazavesh, the Veiled Market",
"enUS",
},
[101549] = {
"Arcane Minion",
"Black Rook Hold",
"enUS",
},
[105705] = {
"Bound Energy",
"Court of Stars",
"enUS",
},
[114264] = {
"Midnight",
"Return to Karazhan",
"enUS",
},
[216364] = {
"Blood Overseer",
"Ara-Kara, City of Echoes",
"enUS",
},
[104536] = {
"Inquisitor Vethriz",
"The Nighthold",
"enUS",
},
[96754] = {
"Harbaron",
"Maw of Souls",
"enUS",
},
[99233] = {
"Living Ember",
"Vault of the Wardens",
"enUS",
},
[113106] = {
"Sickly Cougar",
"The Emerald Nightmare",
"enUS",
},
[114526] = {
"Ghostly Understudy",
"Return to Karazhan",
"enUS",
},
[115533] = {
"Gleeful Immolator",
"Return to Karazhan",
"enUS",
},
[115488] = {
"Infused Pyromancer",
"Return to Karazhan",
"enUS",
},
[91000] = {
"Vileshard Hulk",
"Neltharion's Lair",
"enUS",
},
[97202] = {
"Olmyr the Enlightened",
"Halls of Valor",
"enUS",
},
[112738] = {
"Acolyte of Sael'orn",
"Assault on Violet Hold",
"enUS",
},
[111652] = {
"Fel Annihilator",
"Battle of Exodar",
"enUS",
},
[112739] = {
"Shadowy Overfiend",
"Assault on Violet Hold",
"enUS",
},
[100527] = {
"Dreadfire Imp",
"Darkheart Thicket",
"enUS",
},
[105706] = {
"Priestess of Misery",
"The Arcway",
"enUS",
},
[109395] = {
"Soulflayer of the Inquisiton",
"Trial of the Serpent",
"enUS",
},
[114318] = {
"Baron Rafe Dreuger",
"Return to Karazhan",
"enUS",
},
[111070] = {
"Soul Fragment of Azzinoth",
"The Nighthold",
"enUS",
},
[109075] = {
"Parasitic Lasher",
"The Nighthold",
"enUS",
},
[99804] = {
"Valarjar Falconer",
"Halls of Valor",
"enUS",
},
[53167] = {
"Unbound Pyrelord",
"Firelands",
"enUS",
},
[114338] = {
"Mana Confluence",
"Return to Karazhan",
"enUS",
},
[53141] = {
"Molten Surger",
"Firelands",
"enUS",
},
[105259] = {
"Eye of Keletress",
"Peak of Serenity",
"enUS",
},
[91001] = {
"Tarspitter Lurker",
"Neltharion's Lair",
"enUS",
},
[113998] = {
"Mightstone Breaker",
"Neltharion's Lair",
"enUS",
},
[102681] = {
"Taerar",
"The Emerald Nightmare",
"enUS",
},
[102446] = {
"Fel Lord Betrug",
"Assault on Violet Hold",
"enUS",
},
[53898] = {
"Voracious Hatchling",
"Firelands",
"enUS",
},
[103597] = {
"Understone Lasher",
"Neltharion's Lair",
"enUS",
},
[93687] = {
"Forsaken Bat-Rider",
"The Maw of Nashal",
"enUS",
},
[245173] = {
"Infused Tangle",
"Manaforge Omega",
"enUS",
},
[114709] = {
"Grimelord",
"Trial of Valor",
"enUS",
},
[112655] = {
"Celestial Acolyte",
"The Nighthold",
"enUS",
},
[248626] = {
"Nascent Darkmage",
"Manaforge Omega",
"enUS",
},
[112803] = {
"Astrologer Jarin",
"The Nighthold",
"enUS",
},
[95861] = {
"Hatecoil Oracle",
"Eye of Azshara",
"enUS",
},
[97182] = {
"Night Watch Mariner",
"Maw of Souls",
"enUS",
},
[98035] = {
"Dreadstalker",
"Assault on Violet Hold",
"enUS",
},
[111398] = {
"Nightmare Amalgamation",
"The Emerald Nightmare",
"enUS",
},
[91002] = {
"Rotdrool Grabber",
"Neltharion's Lair",
"enUS",
},
[93560] = {
"Deathweaver Cassandra",
"The Maw of Nashal",
"enUS",
},
[236946] = {
"Wasteland Creeper",
"Manaforge Omega",
"enUS",
},
[164185] = {
"Echelon",
"Halls of Atonement",
"enUS",
},
[112741] = {
"Wrathguard Decimator",
"Assault on Violet Hold",
"enUS",
},
[100529] = {
"Hatespawn Slime",
"Darkheart Thicket",
"enUS",
},
[17252] = {
"Kirfaran",
"Assault on Violet Hold",
"enUS",
},
[93496] = {
"Black Rose Apothecary",
"The Maw of Nashal",
"enUS",
},
[234050] = {
"Shadowguard Soldier",
"Manaforge Omega",
"enUS",
},
[93688] = {
"Forsaken Deathstalker",
"The Maw of Nashal",
"enUS",
},
[227145] = {
"Waterworks Crocolisk",
"Operation: Floodgate",
"enUS",
},
[53206] = {
"Hell Hound",
"Firelands",
"enUS",
},
[228424] = {
"Darkfuse Mechadrone",
"Operation: Floodgate",
"enUS",
},
[93113] = {
"Forsaken Dreadwing",
"The Maw of Nashal",
"enUS",
},
[112804] = {
"Trained Shadescale",
"The Nighthold",
"enUS",
},
[111333] = {
"Taintheart Trickster",
"The Emerald Nightmare",
"enUS",
},
[234051] = {
"Netherfang Soulbarker",
"Manaforge Omega",
"enUS",
},
[107435] = {
"Suspicious Noble",
"Court of Stars",
"enUS",
},
[97269] = {
"Hatecoil Crestrider",
"Eye of Azshara",
"enUS",
},
[112678] = {
"Shal'dorei Naturalist",
"The Nighthold",
"enUS",
},
[112742] = {
"Broodling",
"Assault on Violet Hold",
"enUS",
},
[115020] = {
"Arcanid",
"Return to Karazhan",
"enUS",
},
[246285] = {
"Bazaar Overseer",
"Tazavesh, the Veiled Market",
"enUS",
},
[53494] = {
"Baleroc",
"Firelands",
"enUS",
},
[92538] = {
"Tarspitter Grub",
"Neltharion's Lair",
"enUS",
},
[112039] = {
"Screeching Spiderling",
"The Emerald Nightmare",
"enUS",
},
[112675] = {
"Duskwatch Sentinel",
"The Nighthold",
"enUS",
},
[99891] = {
"Storm Drake",
"Halls of Valor",
"enUS",
},
[104534] = {
"D'zorykx the Trapper",
"The Nighthold",
"enUS",
},
[244922] = {
"Shadowguard Phaseblade",
"Manaforge Omega",
"enUS",
},
[105952] = {
"Withered Manawraith",
"The Arcway",
"enUS",
},
[109354] = {
"Rakeeshi Sorcerer",
"Battle of Exodar",
"enUS",
},
[91004] = {
"Ularogg Cragshaper",
"Neltharion's Lair",
"enUS",
},
[103344] = {
"Oakheart",
"Darkheart Thicket",
"enUS",
},
[96247] = {
"Vileshard Crawler",
"Neltharion's Lair",
"enUS",
},
[93498] = {
"Forsaken Deathguard",
"The Maw of Nashal",
"enUS",
},
[231496] = {
"Venture Co. Diver",
"Operation: Floodgate",
"enUS",
},
[100531] = {
"Bloodtainted Fury",
"Darkheart Thicket",
"enUS",
},
[111081] = {
"Fulminant",
"The Nighthold",
"enUS",
},
[116004] = {
"Flightmaster Volnath",
"The Nighthold",
"enUS",
},
[98677] = {
"Rook Spiderling",
"Black Rook Hold",
"enUS",
},
[105301] = {
"Expedient Elemental",
"The Nighthold",
"enUS",
},
[180091] = {
"Ancient Core Hound",
"Tazavesh, the Veiled Market",
"enUS",
},
[95920] = {
"Animated Storm",
"Eye of Azshara",
"enUS",
},
[99956] = {
"Fel-Infused Fury",
"Vault of the Wardens",
"enUS",
},
[237763] = {
"Nexus-King Salhadaar",
"Manaforge Omega",
"enUS",
},
[91005] = {
"Naraxas",
"Neltharion's Lair",
"enUS",
},
[175616] = {
"Zo'phex",
"Tazavesh, the Veiled Market",
"enUS",
},
[114534] = {
"Helhound",
"Trial of Valor",
"enUS",
},
[115419] = {
"Ancient Tome",
"Return to Karazhan",
"enUS",
},
[114252] = {
"Mana Devourer",
"Return to Karazhan",
"enUS",
},
[114262] = {
"Attumen the Huntsman",
"Return to Karazhan",
"enUS",
},
[114790] = {
"Viz'aduum the Watcher",
"Return to Karazhan",
"enUS",
},
[100532] = {
"Bloodtainted Burster",
"Darkheart Thicket",
"enUS",
},
[93563] = {
"Cauldronmaster Mills",
"The Maw of Nashal",
"enUS",
},
[104415] = {
"Chronomatic Anomaly",
"The Nighthold",
"enUS",
},
[179837] = {
"Tracker Zo'korss",
"Tazavesh, the Veiled Market",
"enUS",
},
[229069] = {
"Mechadrone Sniper",
"Operation: Floodgate",
"enUS",
},
[113128] = {
"Withered Skulker",
"The Nighthold",
"enUS",
},
[102962] = {
"Nightmare Abomination",
"Darkheart Thicket",
"enUS",
},
[111210] = {
"Searing Infernal",
"The Nighthold",
"enUS",
},
[249018] = {
"Infinite Overlord",
"Neltharion's Lair",
"enUS",
},
[115019] = {
"Coldmist Widow",
"Return to Karazhan",
"enUS",
},
[113512] = {
"Putrid Sludge",
"The Nighthold",
"enUS",
},
[91006] = {
"Rockback Gnasher",
"Neltharion's Lair",
"enUS",
},
[96677] = {
"Steeljaw Grizzly",
"Halls of Valor",
"enUS",
},
[102387] = {
"Sael'orn",
"Assault on Violet Hold",
"enUS",
},
[180567] = {
"Frenzied Nightclaw",
"Tazavesh, the Veiled Market",
"enUS",
},
[103217] = {
"Crystalline Scorpid",
"The Nighthold",
"enUS",
},
[249019] = {
"Infinite Magus",
"Neltharion's Lair",
"enUS",
},
[109804] = {
"Plasma Sphere",
"The Nighthold",
"enUS",
},
[101679] = {
"Dreadsoul Poisoner",
"Darkheart Thicket",
"enUS",
},
[114334] = {
"Damaged Golem",
"Return to Karazhan",
"enUS",
},
[104881] = {
"Spellblade Aluriel",
"The Nighthold",
"enUS",
},
[100249] = {
"Channeler Varisz",
"Eye of Azshara",
"enUS",
},
[240952] = {
"Evoked Spirit",
"Eco-Dome Al'dani",
"enUS",
},
[101995] = {
"Festerface",
"Assault on Violet Hold",
"enUS",
},
[113321] = {
"Shambling Hungerer",
"The Nighthold",
"enUS",
},
[102372] = {
"Felhound Mage Slayer",
"Assault on Violet Hold",
"enUS",
},
[97081] = {
"King Bjorn",
"Halls of Valor",
"enUS",
},
[179840] = {
"Market Peacekeeper",
"Tazavesh, the Veiled Market",
"enUS",
},
[105393] = {
"Il'gynoth",
"The Emerald Nightmare",
"enUS",
},
[241801] = {
"Shadowguard Reaper",
"Manaforge Omega",
"enUS",
},
[98973] = {
"Skeletal Warrior",
"Maw of Souls",
"enUS",
},
[114792] = {
"Virtuous Lady",
"Return to Karazhan",
"enUS",
},
[249021] = {
"Infinite Slayer",
"Neltharion's Lair",
"enUS",
},
[98425] = {
"Unstable Amalgamation",
"Broken Isles",
"enUS",
},
[234955] = {
"Wastelander Pactspeaker",
"Eco-Dome Al'dani",
"enUS",
},
[179841] = {
"Veteran Sparkcaster",
"Tazavesh, the Veiled Market",
"enUS",
},
[95675] = {
"God-King Skovald",
"Halls of Valor",
"enUS",
},
[109038] = {
"Solarist Tel'arn",
"The Nighthold",
"enUS",
},
[99801] = {
"Destructor Tentacle",
"Maw of Souls",
"enUS",
},
[235151] = {
"K'aresh Elemental",
"Eco-Dome Al'dani",
"enUS",
},
[164363] = {
"Undying Stonefiend",
"Halls of Atonement",
"enUS",
},
[237897] = {
"Shadowguard Assassin",
"Manaforge Omega",
"enUS",
},
[179842] = {
"Commerce Enforcer",
"Tazavesh, the Veiled Market",
"enUS",
},
[114537] = {
"Helya",
"Trial of Valor",
"enUS",
},
[114538] = {
"Kvaldir Spiritrender",
"Trial of Valor",
"enUS",
},
[106546] = {
"Astral Spark",
"The Arcway",
"enUS",
},
[237514] = {
"A'wazj",
"Eco-Dome Al'dani",
"enUS",
},
[183423] = {
"Reformed Bachelor",
"Return to Karazhan",
"enUS",
},
[98362] = {
"Troubled Soul",
"Black Rook Hold",
"enUS",
},
[111852] = {
"Rothos",
"The Emerald Nightmare",
"enUS",
},
[234957] = {
"Wastelander Ritualist",
"Eco-Dome Al'dani",
"enUS",
},
[99704] = {
"Shadowmoon Warlock",
"Vault of the Wardens",
"enUS",
},
[95676] = {
"Odyn",
"Halls of Valor",
"enUS",
},
[218961] = {
"Starved Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[114634] = {
"Undying Servant",
"Return to Karazhan",
"enUS",
},
[183424] = {
"Virtuous Gentleman",
"Return to Karazhan",
"enUS",
},
[100248] = {
"Ritualist Lesha",
"Eye of Azshara",
"enUS",
},
[235853] = {
"Waygate Watcher",
"Manaforge Omega",
"enUS",
},
[97083] = {
"King Ranulf",
"Halls of Valor",
"enUS",
},
[237132] = {
"Shadowguard Technomancer",
"Manaforge Omega",
"enUS",
},
[53369] = {
"Blazing Talon Initiate",
"Firelands",
"enUS",
},
[114922] = {
"Dark Seraph",
"Trial of Valor",
"enUS",
},
[242631] = {
"Overcharged Sentinel",
"Eco-Dome Al'dani",
"enUS",
},
[98426] = {
"Unstable Ooze",
"The Arcway",
"enUS",
},
[103605] = {
"Shroudseeker",
"Maw of Souls",
"enUS",
},
[105715] = {
"Watchful Inquisitor",
"Court of Stars",
"enUS",
},
[99033] = {
"Helarjar Mistcaller",
"Maw of Souls",
"enUS",
},
[105651] = {
"Dreadborne Seer",
"The Arcway",
"enUS",
},
[111022] = {
"The Demon Within",
"The Nighthold",
"enUS",
},
[98810] = {
"Wrathguard Bladelord",
"Black Rook Hold",
"enUS",
},
[102263] = {
"Skorpyron",
"The Nighthold",
"enUS",
},
[179334] = {
"Portalmancer Zo'honn",
"Tazavesh, the Veiled Market",
"enUS",
},
[215968] = {
"Black Blood",
"Ara-Kara, City of Echoes",
"enUS",
},
[230740] = {
"Shreddinator 3000",
"Operation: Floodgate",
"enUS",
},
[234960] = {
"Tamed Ruinstalker",
"Eco-Dome Al'dani",
"enUS",
},
[114539] = {
"Kvaldir Reefcaller",
"Trial of Valor",
"enUS",
},
[218324] = {
"Nakt",
"Ara-Kara, City of Echoes",
"enUS",
},
[109041] = {
"Naturalist Tel'arn",
"The Nighthold",
"enUS",
},
[231380] = {
"Undercrawler",
"Operation: Floodgate",
"enUS",
},
[94960] = {
"Hymdall",
"Halls of Valor",
"enUS",
},
[176394] = {
"P.O.S.T. Worker",
"Tazavesh, the Veiled Market",
"enUS",
},
[234833] = {
"Unstable Mana",
"Manaforge Omega",
"enUS",
},
[97720] = {
"Blightshard Skitter",
"Neltharion's Lair",
"enUS",
},
[53896] = {
"Blazing Talon Initiate",
"Firelands",
"enUS",
},
[115115] = {
"Coldmist Stalker",
"Return to Karazhan",
"enUS",
},
[97788] = {
"Storm Drake",
"Halls of Valor",
"enUS",
},
[54073] = {
"Flamewaker Hound Master",
"Firelands",
"enUS",
},
[114532] = {
"Bonespeaker Soulbinder",
"Trial of Valor",
"enUS",
},
[176395] = {
"Overloaded Mailemental",
"Tazavesh, the Veiled Market",
"enUS",
},
[241832] = {
"Shielded Attendant",
"Manaforge Omega",
"enUS",
},
[110384] = {
"Felbound Infernal",
"Battle of Exodar",
"enUS",
},
[105322] = {
"Deathglare Tentacle",
"The Emerald Nightmare",
"enUS",
},
[111405] = {
"Shadow Pounder",
"The Emerald Nightmare",
"enUS",
},
[91003] = {
"Rokmora",
"Neltharion's Lair",
"enUS",
},
[103224] = {
"Volatile Scorpid",
"The Nighthold",
"enUS",
},
[114796] = {
"Wholesome Hostess",
"Return to Karazhan",
"enUS",
},
[176396] = {
"Defective Sorter",
"Tazavesh, the Veiled Market",
"enUS",
},
[98173] = {
"Mystic Ssa'veh",
"Eye of Azshara",
"enUS",
},
[96574] = {
"Stormforged Sentinel",
"Halls of Valor",
"enUS",
},
[104822] = {
"Flame of Woe",
"Halls of Valor",
"enUS",
},
[92610] = {
"Understone Drummer",
"Neltharion's Lair",
"enUS",
},
[233814] = {
"Plexus Sentinel",
"Manaforge Omega",
"enUS",
},
[245705] = {
"Voidwarden",
"Manaforge Omega",
"enUS",
},
[226396] = {
"Swampface",
"Operation: Floodgate",
"enUS",
},
[109040] = {
"Arcanist Tel'arn",
"The Nighthold",
"enUS",
},
[240974] = {
"Shadowguard Weavemaster",
"Manaforge Omega",
"enUS",
},
[104247] = {
"Duskwatch Arcanist",
"Court of Stars",
"enUS",
},
[114541] = {
"Spectral Patron",
"Return to Karazhan",
"enUS",
},
[165913] = {
"Ghastly Parishioner",
"Halls of Atonement",
"enUS",
},
[53786] = {
"Blazing Monstrosity",
"Firelands",
"enUS",
},
[53115] = {
"Molten Lord",
"Firelands",
"enUS",
},
[103225] = {
"Acidmaw Scorpid",
"The Nighthold",
"enUS",
},
[100539] = {
"Taintheart Deadeye",
"Darkheart Thicket",
"enUS",
},
[111856] = {
"Guardian Gorroc",
"The Emerald Nightmare",
"enUS",
},
[99644] = {
"Felguard Annihilator",
"Vault of the Wardens",
"enUS",
},
[165529] = {
"Depraved Collector",
"Halls of Atonement",
"enUS",
},
[112290] = {
"Horrid Eagle",
"The Emerald Nightmare",
"enUS",
},
[98813] = {
"Bloodscent Felhound",
"Black Rook Hold",
"enUS",
},
[231385] = {
"Darkfuse Inspector",
"Operation: Floodgate",
"enUS",
},
[226398] = {
"Big M.O.M.M.A.",
"Operation: Floodgate",
"enUS",
},
[114350] = {
"Shade of Medivh",
"Return to Karazhan",
"enUS",
},
[233815] = {
"Loom'ithar",
"Manaforge Omega",
"enUS",
},
[97087] = {
"Valarjar Champion",
"Halls of Valor",
"enUS",
},
[53211] = {
"Spark of Rhyolith",
"Firelands",
"enUS",
},
[115757] = {
"Wrathguard Flamebringer",
"Return to Karazhan",
"enUS",
},
[229212] = {
"Darkfuse Demolitionist",
"Operation: Floodgate",
"enUS",
},
[98366] = {
"Ghostly Retainer",
"Black Rook Hold",
"enUS",
},
[105591] = {
"Nightmare Horror",
"The Emerald Nightmare",
"enUS",
},
[177807] = {
"Customs Security",
"Tazavesh, the Veiled Market",
"enUS",
},
[233816] = {
"Soulbinder Naazindhri",
"Manaforge Omega",
"enUS",
},
[99645] = {
"Shadowmoon Technician",
"Vault of the Wardens",
"enUS",
},
[244302] = {
"Binding Javelin",
"Eco-Dome Al'dani",
"enUS",
},
[92612] = {
"Mightstone Breaker",
"Neltharion's Lair",
"enUS",
},
[111331] = {
"Lurking Horror",
"The Emerald Nightmare",
"enUS",
},
[115847] = {
"Ariadne",
"The Nighthold",
"enUS",
},
[91781] = {
"Hatecoil Warrior",
"Eye of Azshara",
"enUS",
},
[105699] = {
"Mana Saber",
"Court of Stars",
"enUS",
},
[230748] = {
"Darkfuse Bloodwarper",
"Operation: Floodgate",
"enUS",
},
[53691] = {
"Shannox",
"Firelands",
"enUS",
},
[177808] = {
"Armored Overseer",
"Tazavesh, the Veiled Market",
"enUS",
},
[165515] = {
"Depraved Darkblade",
"Halls of Atonement",
"enUS",
},
[102395] = {
"Infiltrator Assassin",
"Assault on Violet Hold",
"enUS",
},
[53819] = {
"Crystal Prison",
"Firelands",
"enUS",
},
[114632] = {
"Spectral Attendant",
"Return to Karazhan",
"enUS",
},
[114568] = {
"Decaying Minion",
"Trial of Valor",
"enUS",
},
[105720] = {
"Understone Drudge",
"Neltharion's Lair",
"enUS",
},
[106320] = {
"Volynd Stormbringer",
"Halls of Valor",
"enUS",
},
[112973] = {
"Duskwatch Weaver",
"The Nighthold",
"enUS",
},
[111858] = {
"Guardian Rurson",
"The Emerald Nightmare",
"enUS",
},
[110416] = {
"Impling Pillager",
"Trial of the Serpent",
"enUS",
},
[95834] = {
"Valarjar Mystic",
"Halls of Valor",
"enUS",
},
[91782] = {
"Hatecoil Crusher",
"Eye of Azshara",
"enUS",
},
[180495] = {
"Enraged Direhorn",
"Tazavesh, the Veiled Market",
"enUS",
},
[234842] = {
"Voidveil Manta",
"Manaforge Omega",
"enUS",
},
[239702] = {
"Watcher Gaz'Kreth",
"Manaforge Omega",
"enUS",
},
[114544] = {
"Skeletal Usher",
"Return to Karazhan",
"enUS",
},
[53244] = {
"Flamewaker Trainee",
"Firelands",
"enUS",
},
[216293] = {
"Trilling Attendant",
"Ara-Kara, City of Echoes",
"enUS",
},
[98368] = {
"Ghostly Protector",
"Black Rook Hold",
"enUS",
},
[226403] = {
"Keeza Quickfuse",
"Operation: Floodgate",
"enUS",
},
[98496] = {
"Infernal Invader",
"Peak of Serenity",
"enUS",
},
[234843] = {
"Phase Stalker",
"Manaforge Omega",
"enUS",
},
[226404] = {
"Geezle Gigazap",
"Operation: Floodgate",
"enUS",
},
[98177] = {
"Glayvianna Soulrender",
"Vault of the Wardens",
"enUS",
},
[91785] = {
"Wandering Shellback",
"Broken Isles",
"enUS",
},
[111975] = {
"Shadowfeather",
"The Emerald Nightmare",
"enUS",
},
[102270] = {
"Eredar Invader",
"Assault on Violet Hold",
"enUS",
},
[116335] = {
"Helarjar Mistwatcher",
"Trial of Valor",
"enUS",
},
[95939] = {
"Skrog Tidestomper",
"Eye of Azshara",
"enUS",
},
[215407] = {
"Ki'katal the Harvester",
"Ara-Kara, City of Echoes",
"enUS",
},
[165408] = {
"Halkias",
"Halls of Atonement",
"enUS",
},
[102269] = {
"Felstalker Ravener",
"Assault on Violet Hold",
"enUS",
},
[237660] = {
"Velaryn Bloodwrath",
"Manaforge Omega",
"enUS",
},
[100351] = {
"Avatar of Vengeance",
"Vault of the Wardens",
"enUS",
},
[101438] = {
"Vileshard Chunk",
"Neltharion's Lair",
"enUS",
},
[114801] = {
"Spectral Apprentice",
"Return to Karazhan",
"enUS",
},
[113971] = {
"Maiden of Virtue",
"Return to Karazhan",
"enUS",
},
[111860] = {
"Bo'lan the Marked",
"The Emerald Nightmare",
"enUS",
},
[109112] = {
"Rakeeshi Honor Guard",
"Battle of Exodar",
"enUS",
},
[102781] = {
"Fel Bat Pup",
"Black Rook Hold",
"enUS",
},
[114547] = {
"Ancient Bonethrall",
"Trial of Valor",
"enUS",
},
[101886] = {
"Hellwarden Xaphan",
"Terrace of Endless Spring",
"enUS",
},
[101950] = {
"Mindflayer Kaahrj",
"Assault on Violet Hold",
"enUS",
},
[91784] = {
"Warlord Parjesh",
"Eye of Azshara",
"enUS",
},
[95940] = {
"Bitterbrine Scavenger",
"Eye of Azshara",
"enUS",
},
[233823] = {
"The Royal Voidwing",
"Manaforge Omega",
"enUS",
},
[165410] = {
"High Adjudicator Aleez",
"Halls of Atonement",
"enUS",
},
[241240] = {
"Budding Silkgrub",
"Manaforge Omega",
"enUS",
},
[97219] = {
"Solsten",
"Halls of Valor",
"enUS",
},
[102398] = {
"Blazing Infernal",
"Assault on Violet Hold",
"enUS",
},
[98370] = {
"Ghostly Councilor",
"Black Rook Hold",
"enUS",
},
[114802] = {
"Spectral Journeyman",
"Return to Karazhan",
"enUS",
},
[104636] = {
"Cenarius",
"The Emerald Nightmare",
"enUS",
},
[233824] = {
"Dimensius",
"Manaforge Omega",
"enUS",
},
[99649] = {
"Dreadlord Mendacius",
"Vault of the Wardens",
"enUS",
},
[113012] = {
"Felsworn Chaos-Mage",
"The Nighthold",
"enUS",
},
[105915] = {
"Nightborne Reclaimer",
"The Arcway",
"enUS",
},
[101887] = {
"Aspersius",
"Terrace of Endless Spring",
"enUS",
},
[113204] = {
"Scaly",
"Neltharion's Lair",
"enUS",
},
[111222] = {
"Demonic Essence",
"The Nighthold",
"enUS",
},
[104273] = {
"Jazshariu",
"Court of Stars",
"enUS",
},
[111350] = {
"Skittering Shadows",
"The Emerald Nightmare",
"enUS",
},
[237662] = {
"Ilyssa Darksorrow",
"Manaforge Omega",
"enUS",
},
[177816] = {
"Interrogation Specialist",
"Tazavesh, the Veiled Market",
"enUS",
},
[98243] = {
"Soul-Torn Champion",
"Black Rook Hold",
"enUS",
},
[104251] = {
"Duskwatch Sentry",
"Court of Stars",
"enUS",
},
[242649] = {
"Nascent Acolyte",
"Manaforge Omega",
"enUS",
},
[114803] = {
"Spectral Stable Hand",
"Return to Karazhan",
"enUS",
},
[100991] = {
"Strangling Roots",
"Darkheart Thicket",
"enUS",
},
[95833] = {
"Hyrja",
"Halls of Valor",
"enUS",
},
[98293] = {
"Saltsea Globule",
"Eye of Azshara",
"enUS",
},
[177817] = {
"Support Officer",
"Tazavesh, the Veiled Market",
"enUS",
},
[113013] = {
"Felsworn Shadowblade",
"The Nighthold",
"enUS",
},
[112118] = {
"Tainted Bloodpetal",
"The Emerald Nightmare",
"enUS",
},
[239454] = {
"Darkmage Zadus",
"Manaforge Omega",
"enUS",
},
[91786] = {
"Gritslime Snail",
"Eye of Azshara",
"enUS",
},
[231014] = {
"Loaderbot",
"Operation: Floodgate",
"enUS",
},
[102400] = {
"Eredar Shadow Mender",
"Assault on Violet Hold",
"enUS",
},
[165414] = {
"Depraved Obliterator",
"Halls of Atonement",
"enUS",
},
[102272] = {
"Felguard Destroyer",
"Assault on Violet Hold",
"enUS",
},
[102336] = {
"Portal Keeper",
"Assault on Violet Hold",
"enUS",
},
[100354] = {
"Grasping Tentacle",
"Maw of Souls",
"enUS",
},
[105721] = {
"Nightmare Ichor",
"The Emerald Nightmare",
"enUS",
},
[114804] = {
"Spectral Charger",
"Return to Karazhan",
"enUS",
},
[108794] = {
"Shroudseeker's Shadow",
"Maw of Souls",
"enUS",
},
[114932] = {
"Deepbrine Monstrosity",
"Trial of Valor",
"enUS",
},
[165415] = {
"Toiling Groundskeeper",
"Halls of Atonement",
"enUS",
},
[52447] = {
"Cinderweb Spiderling",
"Firelands",
"enUS",
},
[98756] = {
"Arcane Anomaly",
"The Arcway",
"enUS",
},
[104528] = {
"High Botanist Tel'arn",
"The Nighthold",
"enUS",
},
[114923] = {
"Shatterbone Skeleton",
"Trial of Valor",
"enUS",
},
[91787] = {
"Cove Seagull",
"Eye of Azshara",
"enUS",
},
[53630] = {
"Unstable Pyrelord",
"Firelands",
"enUS",
},
[52571] = {
"Majordomo Staghelm",
"Firelands",
"enUS",
},
[175646] = {
"P.O.S.T. Master",
"Tazavesh, the Veiled Market",
"enUS",
},
[102273] = {
"Doomguard Infiltrator",
"Assault on Violet Hold",
"enUS",
},
[102337] = {
"Portal Guardian",
"Assault on Violet Hold",
"enUS",
},
[110474] = {
"Rakeeshi Sorcerer",
"Battle of Exodar",
"enUS",
},
[53622] = {
"Lava Spawn",
"Firelands",
"enUS",
},
[104278] = {
"Felbound Enforcer",
"Court of Stars",
"enUS",
},
[236549] = {
"Crystalline Golem",
"Manaforge Omega",
"enUS",
},
[53095] = {
"Matriarch Fire Turtle",
"Firelands",
"enUS",
},
[114247] = {
"The Curator",
"Return to Karazhan",
"enUS",
},
[98693] = {
"Shackled Servitor",
"Maw of Souls",
"enUS",
},
[105906] = {
"Eye of Il'gynoth",
"The Emerald Nightmare",
"enUS",
},
[116549] = {
"Backup Singer",
"Return to Karazhan",
"enUS",
},
[111225] = {
"Chaos Mage Beleron",
"The Nighthold",
"enUS",
},
[93834] = {
"Forsaken Dreadwing",
"The Maw of Nashal",
"enUS",
},
[53119] = {
"Flamewaker Forward Guard",
"Firelands",
"enUS",
},
[53087] = {
"Right Foot",
"Firelands",
"enUS",
},
[52409] = {
"Ragnaros",
"Firelands",
"enUS",
},
[98203] = {
"Ivanyr",
"The Arcway",
"enUS",
},
[98246] = {
"Risen Warrior",
"Maw of Souls",
"enUS",
},
[98435] = {
"Unstable Oozeling",
"The Arcway",
"enUS",
},
[115765] = {
"Abstract Nullifier",
"Return to Karazhan",
"enUS",
},
[114614] = {
"Kvaldir Spiritrender",
"Trial of Valor",
"enUS",
},
[109933] = {
"Arbiter of the Inquisiiton",
"Trial of the Serpent",
"enUS",
},
[108796] = {
"Arcanist Malrodi",
"Court of Stars",
"enUS",
},
[96584] = {
"Immoliant Fury",
"Vault of the Wardens",
"enUS",
},
[109947] = {
"Corrupted Soul",
"The Temple of Elune",
"enUS",
},
[112057] = {
"Parasitic Lasher",
"The Nighthold",
"enUS",
},
[114629] = {
"Spectral Retainer",
"Return to Karazhan",
"enUS",
},
[53734] = {
"Blazing Talon Clawshaper",
"Firelands",
"enUS",
},
[91789] = {
"Lady Hatecoil",
"Eye of Azshara",
"enUS",
},
[53631] = {
"Cinderweb Spiderling",
"Firelands",
"enUS",
},
[111354] = {
"Taintheart Befouler",
"The Emerald Nightmare",
"enUS",
},
[53695] = {
"Rageface",
"Firelands",
"enUS",
},
[113197] = {
"Understone Drudge",
"Neltharion's Lair",
"enUS",
},
[53694] = {
"Riplimb",
"Firelands",
"enUS",
},
[53791] = {
"Blazing Monstrosity",
"Firelands",
"enUS",
},
[98521] = {
"Lord Etheldrin Ravencrest",
"Black Rook Hold",
"enUS",
},
[100485] = {
"Soul-torn Vanguard",
"Black Rook Hold",
"enUS",
},
[111290] = {
"Braxas the Fleshcarver",
"Black Rook Hold",
"enUS",
},
[109820] = {
"Yigthregor",
"Trial of the Serpent",
"enUS",
},
[246874] = {
"Influx Warden",
"Manaforge Omega",
"enUS",
},
[54143] = {
"Molten Flamefather",
"Firelands",
"enUS",
},
[54015] = {
"Majordomo Staghelm",
"Firelands",
"enUS",
},
[97097] = {
"Helarjar Champion",
"Maw of Souls",
"enUS",
},
[102404] = {
"Stoneclaw Grubmaster",
"Neltharion's Lair",
"enUS",
},
[111227] = {
"Felweaver Pharamere",
"The Nighthold",
"enUS",
},
[114360] = {
"Hyrja",
"Trial of Valor",
"enUS",
},
[111355] = {
"Taintheart Tormenter",
"The Emerald Nightmare",
"enUS",
},
[106304] = {
"Corrupted Wisp",
"The Emerald Nightmare",
"enUS",
},
[98949] = {
"Smashspite the Hateful",
"Black Rook Hold",
"enUS",
},
[102672] = {
"Nythendra",
"The Emerald Nightmare",
"enUS",
},
[108542] = {
"Skittering Spiderling",
"The Emerald Nightmare",
"enUS",
},
[101637] = {
"Valarjar Aspirant",
"Halls of Valor",
"enUS",
},
[100486] = {
"Risen Arcanist",
"Black Rook Hold",
"enUS",
},
[95947] = {
"Mak'rana Hardshell",
"Eye of Azshara",
"enUS",
},
[109821] = {
"Lord Korithis",
"Trial of the Serpent",
"enUS",
},
[99655] = {
"Void-Touched Juggernaut",
"Vault of the Wardens",
"enUS",
},
[102788] = {
"Felspite Dominator",
"Black Rook Hold",
"enUS",
},
[105921] = {
"Nightborne Spellsword",
"The Arcway",
"enUS",
},
[245601] = {
"Enforcer Jak'tull",
"Manaforge Omega",
"enUS",
},
[111164] = {
"Twilight Stardancer",
"The Nighthold",
"enUS",
},
[112251] = {
"Putrid Sludge",
"The Nighthold",
"enUS",
},
[114361] = {
"Hymdall",
"Trial of Valor",
"enUS",
},
[98696] = {
"Illysanna Ravencrest",
"Black Rook Hold",
"enUS",
},
[102277] = {
"Deadeye Decoy",
"Darkheart Thicket",
"enUS",
},
[109438] = {
"Wrathguard Felstriker",
"Trial of the Serpent",
"enUS",
},
[114553] = {
"Bilewater Slime",
"Trial of Valor",
"enUS",
},
[97173] = {
"Restless Tides",
"Eye of Azshara",
"enUS",
},
[112955] = {
"Shadescale Wyrm",
"The Nighthold",
"enUS",
},
[114809] = {
"Night Watch Mariner",
"Trial of Valor",
"enUS",
},
[98505] = {
"Eredar Summoner",
"Peak of Serenity",
"enUS",
},
[111004] = {
"Gelatinized Decay",
"The Emerald Nightmare",
"enUS",
},
[96587] = {
"Felsworn Infester",
"Vault of the Wardens",
"enUS",
},
[111303] = {
"Nightborne Sage",
"The Nighthold",
"enUS",
},
[98761] = {
"Aertas",
"Maw of Souls",
"enUS",
},
[53094] = {
"Patriarch Fire Turtle",
"Firelands",
"enUS",
},
[234478] = {
"Dimensius",
"Manaforge Omega",
"enUS",
},
[103045] = {
"Plaguemaw",
"Maw of Souls",
"enUS",
},
[54144] = {
"Magmakin",
"Firelands",
"enUS",
},
[101437] = {
"Burning Geode",
"Neltharion's Lair",
"enUS",
},
[53185] = {
"Flamewaker Overseer",
"Firelands",
"enUS",
},
[97163] = {
"Cursed Falke",
"Maw of Souls",
"enUS",
},
[99657] = {
"Deranged Mindflayer",
"Vault of the Wardens",
"enUS",
},
[100360] = {
"Grasping Tentacle",
"Maw of Souls",
"enUS",
},
[111047] = {
"Parasitic Shadow Demon",
"The Nighthold",
"enUS",
},
[91792] = {
"Stormwake Hydra",
"Eye of Azshara",
"enUS",
},
[97084] = {
"King Tor",
"Halls of Valor",
"enUS",
},
[103685] = {
"Tichondrius",
"The Nighthold",
"enUS",
},
[111933] = {
"Venomous Spiderling",
"The Emerald Nightmare",
"enUS",
},
[107073] = {
"Duskwatch Reinforcement",
"Court of Stars",
"enUS",
},
[95885] = {
"Tirathon Saltheril",
"Vault of the Wardens",
"enUS",
},
[91793] = {
"Seaspray Crab",
"Eye of Azshara",
"enUS",
},
[111166] = {
"Resolute Courtesan",
"The Nighthold",
"enUS",
},
[98954] = {
"Felsworn Myrmidon",
"Vault of the Wardens",
"enUS",
},
[102335] = {
"Portal Guardian",
"Assault on Violet Hold",
"enUS",
},
[234935] = {
"Soul-Scribe",
"Eco-Dome Al'dani",
"enUS",
},
[245222] = {
"Pargoth",
"Manaforge Omega",
"enUS",
},
[114627] = {
"Shrieking Terror",
"Return to Karazhan",
"enUS",
},
[102287] = {
"Emberhusk Dominator",
"Neltharion's Lair",
"enUS",
},
[53793] = {
"Harbinger of Flame",
"Firelands",
"enUS",
},
[96512] = {
"Archdruid Glaidalis",
"Darkheart Thicket",
"enUS",
},
[114811] = {
"Kvaldir Coral Maiden",
"Trial of Valor",
"enUS",
},
[101639] = {
"Valarjar Shieldmaiden",
"Halls of Valor",
"enUS",
},
[102095] = {
"Risen Lancer",
"Black Rook Hold",
"enUS",
},
[101008] = {
"Stinging Swarm",
"Black Rook Hold",
"enUS",
},
[246374] = {
"Shadowguard Soldier",
"Manaforge Omega",
"enUS",
},
[91794] = {
"Saltscale Lurker",
"Eye of Azshara",
"enUS",
},
[112638] = {
"Astral Defender",
"The Nighthold",
"enUS",
},
[53509] = {
"Voracious Hatchling",
"Firelands",
"enUS",
},
[95886] = {
"Ash'golm",
"Vault of the Wardens",
"enUS",
},
[114364] = {
"Mana-Gorged Wyrm",
"Return to Karazhan",
"enUS",
},
[176555] = {
"Achillite",
"Tazavesh, the Veiled Market",
"enUS",
},
[104262] = {
"Burning Ember",
"The Nighthold",
"enUS",
},
[179893] = {
"Cartel Skulker",
"Tazavesh, the Veiled Market",
"enUS",
},
[107459] = {
"Venomous Spiderling",
"The Emerald Nightmare",
"enUS",
},
[100362] = {
"Grasping Tentacle",
"Maw of Souls",
"enUS",
},
[94224] = {
"Petrifying Totem",
"Neltharion's Lair",
"enUS",
},
[109336] = {
"Felbound Wrathlord",
"Battle of Exodar",
"enUS",
},
[115905] = {
"Fel Soul",
"The Nighthold",
"enUS",
},
[176556] = {
"Alcruux",
"Tazavesh, the Veiled Market",
"enUS",
},
[101092] = {
"Melezan",
"Skywall",
"enUS",
},
[97677] = {
"Barbed Spiderling",
"Vault of the Wardens",
"enUS",
},
[54145] = {
"Magma Conduit",
"Firelands",
"enUS",
},
[241517] = {
"Dimensius",
"Manaforge Omega",
"enUS",
},
[95887] = {
"Glazer",
"Vault of the Wardens",
"enUS",
},
[101002] = {
"Krosus",
"The Nighthold",
"enUS",
},
[114626] = {
"Forlorn Spirit",
"Return to Karazhan",
"enUS",
},
[96015] = {
"Inquisitor Tormentorum",
"Vault of the Wardens",
"enUS",
},
[96640] = {
"Valarjar Marksman",
"Halls of Valor",
"enUS",
},
[98363] = {
"Grasping Tentacle",
"Maw of Souls",
"enUS",
},
[102158] = {
"Congealed Goo",
"Assault on Violet Hold",
"enUS",
},
[53794] = {
"Smouldering Hatchling",
"Firelands",
"enUS",
},
[102094] = {
"Risen Swordsman",
"Black Rook Hold",
"enUS",
},
[114813] = {
"Kvaldir Tide Witch",
"Trial of Valor",
"enUS",
},
[114288] = {
"Skeletal Warrior",
"Maw of Souls",
"enUS",
},
[215826] = {
"Bloodworker",
"Ara-Kara, City of Echoes",
"enUS",
},
[91008] = {
"Rockbound Pelter",
"Neltharion's Lair",
"enUS",
},
[167607] = {
"Stoneborn Slasher",
"Halls of Atonement",
"enUS",
},
[111295] = {
"Domesticated Manasaber",
"The Nighthold",
"enUS",
},
[167615] = {
"Depraved Darkblade",
"Halls of Atonement",
"enUS",
},
[95888] = {
"Cordana Felsong",
"Vault of the Wardens",
"enUS",
},
[91796] = {
"Skrog Wavecrasher",
"Eye of Azshara",
"enUS",
},
[112320] = {
"Haunting Nightmare",
"The Emerald Nightmare",
"enUS",
},
[234870] = {
"Invading Mite",
"Eco-Dome Al'dani",
"enUS",
},
[53187] = {
"Flamewaker Animator",
"Firelands",
"enUS",
},
[102282] = {
"Lord Malgath",
"Assault on Violet Hold",
"enUS",
},
[91007] = {
"Dargrul",
"Neltharion's Lair",
"enUS",
},
[100364] = {
"Spirit of Vengeance",
"Vault of the Wardens",
"enUS",
},
[113092] = {
"Swarming Dread",
"The Emerald Nightmare",
"enUS",
},
[103561] = {
"Shadow Beast",
"Assault on Violet Hold",
"enUS",
},
[97678] = {
"Aranasi Broodmother",
"Vault of the Wardens",
"enUS",
},
[53116] = {
"Unbound Blazing Elemental",
"Firelands",
"enUS",
},
[97172] = {
"Saltsea Droplet",
"Eye of Azshara",
"enUS",
},
[101326] = {
"Honored Ancestor",
"Halls of Valor",
"enUS",
},
[113088] = {
"Corrupted Feeler",
"The Emerald Nightmare",
"enUS",
},
[167610] = {
"Stonefiend Anklebiter",
"Halls of Atonement",
"enUS",
},
[111170] = {
"Astral Farseer",
"The Nighthold",
"enUS",
},
[91797] = {
"King Deepbeard",
"Eye of Azshara",
"enUS",
},
[53635] = {
"Cinderweb Drone",
"Firelands",
"enUS",
},
[234872] = {
"Wastelander Phaseblade",
"Eco-Dome Al'dani",
"enUS",
},
[106311] = {
"Venomous Spiderling",
"The Emerald Nightmare",
"enUS",
},
[113536] = {
"Emberhusk Dominator",
"Neltharion's Lair",
"enUS",
},
[111554] = {
"Felblaze Trickster",
"The Nighthold",
"enUS",
},
[53795] = {
"Egg Pile",
"Firelands",
"enUS",
},
[98208] = {
"Advisor Vandros",
"The Arcway",
"enUS",
},
[99188] = {
"Waterlogged Soul Guard",
"Maw of Souls",
"enUS",
},
[219221] = {
"Ravenous Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[176562] = {
"Brawling Patron",
"Tazavesh, the Veiled Market",
"enUS",
},
[113920] = {
"Flail of Il'gynoth",
"The Emerald Nightmare",
"enUS",
},
[96657] = {
"Blade Dancer Illianna",
"Vault of the Wardens",
"enUS",
},
[113089] = {
"Defiled Keeper",
"The Emerald Nightmare",
"enUS",
},
[111563] = {
"Duskwatch Guard",
"Court of Stars",
"enUS",
},
[101641] = {
"Mythana",
"Darkheart Thicket",
"enUS",
},
[97260] = {
"Arcane Hydra Spawn",
"Eye of Azshara",
"enUS",
},
[167612] = {
"Stoneborn Reaver",
"Halls of Atonement",
"enUS",
},
[176563] = {
"Zo'gron",
"Tazavesh, the Veiled Market",
"enUS",
},
[53188] = {
"Flamewaker Subjugator",
"Firelands",
"enUS",
},
[113537] = {
"Emberhusk Dominator",
"Neltharion's Lair",
"enUS",
},
[114624] = {
"Arcane Warden",
"Return to Karazhan",
"enUS",
},
[167611] = {
"Stoneborn Eviscerator",
"Halls of Atonement",
"enUS",
},
[98384] = {
"Razormouth",
"Neltharion's Lair",
"enUS",
},
[226402] = {
"Bront",
"Operation: Floodgate",
"enUS",
},
[216333] = {
"Bloodstained Assistant",
"Ara-Kara, City of Echoes",
"enUS",
},
[105703] = {
"Mana Wyrm",
"Court of Stars",
"enUS",
},
[91790] = {
"Mak'rana Siltwalker",
"Eye of Azshara",
"enUS",
},
[108934] = {
"Tainted Blood",
"The Nighthold",
"enUS",
},
[113090] = {
"Corrupted Gatewarden",
"The Emerald Nightmare",
"enUS",
},
[245617] = {
"The Bone Melter",
"Manaforge Omega",
"enUS",
},
[102019] = {
"Stormforged Obliterator",
"Halls of Valor",
"enUS",
},
[52581] = {
"Cinderweb Drone",
"Firelands",
"enUS",
},
[231497] = {
"Bombshell Crab",
"Operation: Floodgate",
"enUS",
},
[176565] = {
"Disruptive Patron",
"Tazavesh, the Veiled Market",
"enUS",
},
[108359] = {
"Volatile Scorpid",
"The Nighthold",
"enUS",
},
[97170] = {
"Hatecoil Wavebinder",
"Eye of Azshara",
"enUS",
},
[114625] = {
"Phantom Guest",
"Return to Karazhan",
"enUS",
},
[229250] = {
"Venture Co. Contractor",
"Operation: Floodgate",
"enUS",
},
[96609] = {
"Gildedfur Stag",
"Halls of Valor",
"enUS",
},
[100647] = {
"Scion of Typhinius",
"Skywall",
"enUS",
},
[102584] = {
"Malignant Defiler",
"Vault of the Wardens",
"enUS",
},
[101839] = {
"Risen Companion",
"Black Rook Hold",
"enUS",
},
[99664] = {
"Restless Soul",
"Black Rook Hold",
"enUS",
},
[99728] = {
"Grimguard",
"Vault of the Wardens",
"enUS",
},
[113091] = {
"Tainted Plainstrider",
"The Emerald Nightmare",
"enUS",
},
[229251] = {
"Venture Co. Architect",
"Operation: Floodgate",
"enUS",
},
[112255] = {
"Sludgerax",
"The Nighthold",
"enUS",
},
[112260] = {
"Dreadsoul Defiler",
"The Emerald Nightmare",
"enUS",
},
[216336] = {
"Ravenous Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[97043] = {
"Seacursed Slaver",
"Maw of Souls",
"enUS",
},
[108360] = {
"Acidmaw Scorpid",
"The Nighthold",
"enUS",
},
[97171] = {
"Hatecoil Arcanist",
"Eye of Azshara",
"enUS",
},
[109511] = {
"Wrathguard Felstriker",
"Trial of the Serpent",
"enUS",
},
[229252] = {
"Darkfuse Hyena",
"Operation: Floodgate",
"enUS",
},
[103695] = {
"Corruption Horror",
"The Emerald Nightmare",
"enUS",
},
[111980] = {
"Nightmother",
"The Emerald Nightmare",
"enUS",
},
[216337] = {
"Bloodworker",
"Ara-Kara, City of Echoes",
"enUS",
},
[233817] = {
"Forgeweaver Araz",
"Manaforge Omega",
"enUS",
},
[99192] = {
"Shade of Xavius",
"Darkheart Thicket",
"enUS",
},
[98706] = {
"Commander Shemdah'sohn",
"Black Rook Hold",
"enUS",
},
[98770] = {
"Wrathguard Felblade",
"The Arcway",
"enUS",
},
[97811] = {
"Morvath the Reaver",
"Peak of Serenity",
"enUS",
},
[106059] = {
"Warp Shade",
"The Arcway",
"enUS",
},
[112261] = {
"Dreadsoul Corruptor",
"The Emerald Nightmare",
"enUS",
},
[216338] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[99200] = {
"Dresaron",
"Darkheart Thicket",
"enUS",
},
[108361] = {
"Crystalline Scorpid",
"The Nighthold",
"enUS",
},
[110471] = {
"Impling Pillager",
"Trial of the Serpent",
"enUS",
},
[102351] = {
"Mana Wyrm",
"The Arcway",
"enUS",
},
[102583] = {
"Fel Scorcher",
"Vault of the Wardens",
"enUS",
},
[112709] = {
"Promenade Guard",
"The Nighthold",
"enUS",
},
[100497] = {
"Ursoc",
"The Emerald Nightmare",
"enUS",
},
[114883] = {
"Grand Magister Rommath",
"The Nighthold",
"enUS",
},
[103694] = {
"Lurking Terror",
"The Emerald Nightmare",
"enUS",
},
[103758] = {
"Star Augur Etraeus",
"The Nighthold",
"enUS",
},
[112956] = {
"Shimmering Manaspine",
"The Nighthold",
"enUS",
},
[113093] = {
"Infected Gazelle",
"The Emerald Nightmare",
"enUS",
},
[95766] = {
"Crazed Razorbeak",
"Darkheart Thicket",
"enUS",
},
[99922] = {
"Ebonclaw Packmate",
"Halls of Valor",
"enUS",
},
[98963] = {
"Blazing Imp",
"Vault of the Wardens",
"enUS",
},
[216340] = {
"Sentry Stagshell",
"Ara-Kara, City of Echoes",
"enUS",
},
[53121] = {
"Flamewaker Cauterizer",
"Firelands",
"enUS",
},
[104270] = {
"Guardian Construct",
"Court of Stars",
"enUS",
},
[53222] = {
"Flamewaker Centurion",
"Firelands",
"enUS",
},
[114628] = {
"Skeletal Waiter",
"Return to Karazhan",
"enUS",
},
[167876] = {
"Inquisitor Sigar",
"Halls of Atonement",
"enUS",
},
[97365] = {
"Seacursed Mistmender",
"Maw of Souls",
"enUS",
},
[52577] = {
"Left Foot",
"Firelands",
"enUS",
},
[216341] = {
"Jabbing Flyer",
"Ara-Kara, City of Echoes",
"enUS",
},
[234883] = {
"Voracious Gorger",
"Eco-Dome Al'dani",
"enUS",
},
[175677] = {
"Smuggled Creature",
"Tazavesh, the Veiled Market",
"enUS",
},
[115831] = {
"Mana Devourer",
"Return to Karazhan",
"enUS",
},
[101841] = {
"Image of Mythana",
"Darkheart Thicket",
"enUS",
},
[111112] = {
"Ebulliant",
"The Nighthold",
"enUS",
},
[98900] = {
"Wyrmtongue Trickster",
"Black Rook Hold",
"enUS",
},
[98759] = {
"Vicious Manafang",
"The Arcway",
"enUS",
},
[101074] = {
"Hatespawn Whelpling",
"Darkheart Thicket",
"enUS",
},
[242648] = {
"Nascent Shadowguard",
"Manaforge Omega",
"enUS",
},
[102369] = {
"Felstalker Ravener",
"Assault on Violet Hold",
"enUS",
},
[175806] = {
"So'azmi",
"Tazavesh, the Veiled Market",
"enUS",
},
[231176] = {
"Scaffolding",
"Operation: Floodgate",
"enUS",
},
[111226] = {
"Summoner Xiv",
"The Nighthold",
"enUS",
},
[99300] = {
"Water Elemental",
"Eye of Azshara",
"enUS",
},
[215405] = {
"Anub'zekt",
"Ara-Kara, City of Echoes",
"enUS",
},
[93065] = {
"Ysera",
"The Temple of Elune",
"enUS",
},
[105742] = {
"Turbax",
"Neltharion's Lair",
"enUS",
},
[241242] = {
"Shadowguard Harvester",
"Manaforge Omega",
"enUS",
},
[100526] = {
"Tormented Bloodseeker",
"Darkheart Thicket",
"enUS",
},
[99651] = {
"Faceless Voidcaster",
"Vault of the Wardens",
"enUS",
},
[90998] = {
"Blightshard Shaper",
"Neltharion's Lair",
"enUS",
},
[95832] = {
"Valarjar Shieldmaiden",
"Halls of Valor",
"enUS",
},
[98965] = {
"Kur'talos Ravencrest",
"Black Rook Hold",
"enUS",
},
[101075] = {
"Wormspeaker Devout",
"Neltharion's Lair",
"enUS",
},
[52593] = {
"Spirit of the Flame",
"Firelands",
"enUS",
},
[105295] = {
"Azagrim",
"The Nighthold",
"enUS",
},
[53223] = {
"Flamewaker Beast Handler",
"Firelands",
"enUS",
},
[216856] = {
"Black Blood",
"Ara-Kara, City of Echoes",
"enUS",
},
[100216] = {
"Hatecoil Wrangler",
"Eye of Azshara",
"enUS",
},
[112712] = {
"Gilded Guardian",
"The Nighthold",
"enUS",
},
[104592] = {
"Nightmare Tentacle",
"The Emerald Nightmare",
"enUS",
},
[102253] = {
"Understone Demolisher",
"Neltharion's Lair",
"enUS",
},
[105743] = {
"Whipsnap",
"Neltharion's Lair",
"enUS",
},
[114548] = {
"Rotsoul Giant",
"Trial of Valor",
"enUS",
},
[96664] = {
"Valarjar Runecarver",
"Halls of Valor",
"enUS",
},
[104246] = {
"Duskwatch Guard",
"Court of Stars",
"enUS",
},
[95769] = {
"Mindshattered Screecher",
"Darkheart Thicket",
"enUS",
},
[53575] = {
"Lava Wielder",
"Firelands",
"enUS",
},
[98691] = {
"Risen Scout",
"Black Rook Hold",
"enUS",
},
[53639] = {
"Flamewaker Cauterizer",
"Firelands",
"enUS",
},
[111370] = {
"Creature in the Shadows",
"The Emerald Nightmare",
"enUS",
},
[176705] = {
"Venza Goldfuse",
"Tazavesh, the Veiled Market",
"enUS",
},
[164557] = {
"Shard of Halkias",
"Halls of Atonement",
"enUS",
},
[237661] = {
"Adarus Duskblaze",
"Manaforge Omega",
"enUS",
},
[101951] = {
"Shivermaw",
"Assault on Violet Hold",
"enUS",
},
[241666] = {
"Shadowguard Juggernaut",
"Manaforge Omega",
"enUS",
},
[114546] = {
"Risen Bonethrall",
"Trial of Valor",
"enUS",
},
[111413] = {
"Dark Devourers",
"The Emerald Nightmare",
"enUS",
},
[105744] = {
"Blaze",
"Neltharion's Lair",
"enUS",
},
[91783] = {
"Hatecoil Stormweaver",
"Eye of Azshara",
"enUS",
},
[102397] = {
"Wrathlord Bulwark",
"Assault on Violet Hold",
"enUS",
},
[114289] = {
"Skeletal Sorcerer",
"Maw of Souls",
"enUS",
},
[180159] = {
"Brawling Patron",
"Tazavesh, the Veiled Market",
"enUS",
},
[223253] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[114312] = {
"Moroes",
"Return to Karazhan",
"enUS",
},
[241923] = {
"Arcane Echo",
"Manaforge Omega",
"enUS",
},
[237981] = {
"Shadowguard Mage",
"Manaforge Omega",
"enUS",
},
[116550] = {
"Spectral Patron",
"Return to Karazhan",
"enUS",
},
[53224] = {
"Flamewaker Taskmaster",
"Firelands",
"enUS",
},
[108494] = {
"Soulfiend Tagerma",
"Maw of Souls",
"enUS",
},
[104300] = {
"Shadow Mistress",
"Court of Stars",
"enUS",
},
[104274] = {
"Baalgar the Watchful",
"Court of Stars",
"enUS",
},
[105617] = {
"Eredar Chaosbringer",
"The Arcway",
"enUS",
},
[99358] = {
"Rotheart Dryad",
"Darkheart Thicket",
"enUS",
},
[113113] = {
"Essence of Nightmare",
"The Emerald Nightmare",
"enUS",
},
[230927] = {
"Darkfuse Shredder Pilot",
"Operation: Floodgate",
"enUS",
},
[114542] = {
"Ghostly Philanthropist",
"Return to Karazhan",
"enUS",
},
[98776] = {
"Felswarm Imp",
"The Arcway",
"enUS",
},
[95771] = {
"Dreadsoul Ruiner",
"Darkheart Thicket",
"enUS",
},
[114249] = {
"Volatile Energy",
"Return to Karazhan",
"enUS",
},
[248958] = {
"Manifested Timeways",
"Halls of Valor",
"enUS",
},
[53640] = {
"Flamewaker Sentinel",
"Firelands",
"enUS",
},
[91332] = {
"Stoneclaw Hunter",
"Neltharion's Lair",
"enUS",
},
[104275] = {
"Imacu'tya",
"Court of Stars",
"enUS",
},
[237871] = {
"Unbound Assassin",
"Manaforge Omega",
"enUS",
},
[114633] = {
"Spectral Valet",
"Return to Karazhan",
"enUS",
},
[231312] = {
"Venture Co. Electrician",
"Operation: Floodgate",
"enUS",
},
[234962] = {
"Wastelander Farstalker",
"Eco-Dome Al'dani",
"enUS",
},
[241798] = {
"Nexus-Prince Xevvos",
"Manaforge Omega",
"enUS",
},
[105682] = {
"Felguard Destroyer",
"The Arcway",
"enUS",
},
[234893] = {
"Azhiccar",
"Eco-Dome Al'dani",
"enUS",
},
[111151] = {
"Midnight Siphoner",
"The Nighthold",
"enUS",
},
[164562] = {
"Depraved Houndmaster",
"Halls of Atonement",
"enUS",
},
[183425] = {
"Wholesome Host",
"Return to Karazhan",
"enUS",
},
[95772] = {
"Frenzied Nightclaw",
"Darkheart Thicket",
"enUS",
},
[111528] = {
"Deathroot Ancient",
"The Emerald Nightmare",
"enUS",
},
[91808] = {
"Serpentrix",
"Eye of Azshara",
"enUS",
},
[103125] = {
"Jailhound",
"Terrace of Endless Spring",
"enUS",
},
[96028] = {
"Wrath of Azshara",
"Eye of Azshara",
"enUS",
},
[105299] = {
"Recursive Elemental",
"The Nighthold",
"enUS",
},
[164563] = {
"Vicious Gargon",
"Halls of Atonement",
"enUS",
},
[103381] = {
"Jailer Cage",
"Assault on Violet Hold",
"enUS",
},
[114794] = {
"Skeletal Hound",
"Return to Karazhan",
"enUS",
},
[179269] = {
"Oasis Security",
"Tazavesh, the Veiled Market",
"enUS",
},
[241800] = {
"Manaforged Titan",
"Manaforge Omega",
"enUS",
},
[240905] = {
"Arcane Collector",
"Manaforge Omega",
"enUS",
},
[98681] = {
"Rook Spinner",
"Black Rook Hold",
"enUS",
},
[116008] = {
"Kar'zun",
"The Nighthold",
"enUS",
},
[100760] = {
"Typhinius",
"Skywall",
"enUS",
},
[100824] = {
"Storm Cloud",
"Skywall",
"enUS",
},
[53545] = {
"Molten Spewer",
"Firelands",
"enUS",
},
[92350] = {
"Understone Drudge",
"Neltharion's Lair",
"enUS",
},
[98970] = {
"Latosius",
"Black Rook Hold",
"enUS",
},
[98011] = {
"Infernal Destroyer",
"Peak of Serenity",
"enUS",
},
[93983] = {
"Forsaken Dreadwing",
"The Maw of Nashal",
"enUS",
},
[104277] = {
"Legion Hound",
"Court of Stars",
"enUS",
},
[102295] = {
"Emberhusk Dominator",
"Neltharion's Lair",
"enUS",
},
[95674] = {
"Fenryr",
"Halls of Valor",
"enUS",
},
[102302] = {
"Portal Keeper",
"Assault on Violet Hold",
"enUS",
},
[110484] = {
"Felstalker",
"Battle of Exodar",
"enUS",
},
[106643] = {
"Elisande",
"The Nighthold",
"enUS",
},
[110486] = {
"Huk'roth the Huntmaster",
"Battle of Exodar",
"enUS",
},
[102679] = {
"Ysondre",
"The Emerald Nightmare",
"enUS",
},
[245255] = {
"Artoshion",
"Manaforge Omega",
"enUS",
},
[105876] = {
"Enchanted Broodling",
"The Arcway",
"enUS",
},
[99802] = {
"Arthfael",
"Halls of Valor",
"enUS",
},
[180348] = {
"Cartel Muscle",
"Tazavesh, the Veiled Market",
"enUS",
},
[101976] = {
"Millificent Manastorm",
"Assault on Violet Hold",
"enUS",
},
[241803] = {
"Nexus-Prince Ky'vor",
"Manaforge Omega",
"enUS",
},
[102104] = {
"Enslaved Shieldmaiden",
"Maw of Souls",
"enUS",
},
[112603] = {
"Terrace Grove-Tender",
"The Nighthold",
"enUS",
},
[102232] = {
"Rockbound Trapper",
"Neltharion's Lair",
"enUS",
},
[100250] = {
"Binder Ashioi",
"Eye of Azshara",
"enUS",
},
[114636] = {
"Phantom Guardsman",
"Return to Karazhan",
"enUS",
},
[167892] = {
"Tormented Soul",
"Halls of Atonement",
"enUS",
},
[112718] = {
"Sidereal Familiar",
"The Nighthold",
"enUS",
},
[96759] = {
"Helya",
"Maw of Souls",
"enUS",
},
[236995] = {
"Ravenous Destroyer",
"Eco-Dome Al'dani",
"enUS",
},
[107114] = {
"Tormenting Orb",
"Vault of the Wardens",
"enUS",
},
[99675] = {
"Enormous Stone Quilen",
"Vault of the Wardens",
"enUS",
},
[109908] = {
"Nightmare Abomination",
"Darkheart Thicket",
"enUS",
},
[104918] = {
"Vigilant Duskwatch",
"Court of Stars",
"enUS",
},
[114330] = {
"Babblet",
"Return to Karazhan",
"enUS",
},
[113041] = {
"Infected Diemetradon",
"The Emerald Nightmare",
"enUS",
},
[114317] = {
"Lady Catriona Von'Indi",
"Return to Karazhan",
"enUS",
},
[53642] = {
"Cinderweb Spinner",
"Firelands",
"enUS",
},
[104215] = {
"Patrol Captain Gerdo",
"Court of Stars",
"enUS",
},
[109394] = {
"Torturer of the Inquisition",
"Trial of the Serpent",
"enUS",
},
[98205] = {
"Corstilax",
"The Arcway",
"enUS",
},
[114637] = {
"Spectral Sentry",
"Return to Karazhan",
"enUS",
},
[105494] = {
"Rotten Drake",
"The Emerald Nightmare",
"enUS",
},
[112665] = {
"Nighthold Protector",
"The Nighthold",
"enUS",
},
[96756] = {
"Ymiron, the Fallen King",
"Maw of Souls",
"enUS",
},
[92387] = {
"Drums of War",
"Neltharion's Lair",
"enUS",
},
[236947] = {
"Burrowing Creeper",
"Manaforge Omega",
"enUS",
},
[99676] = {
"Mogu'shan Secret-Keeper",
"Vault of the Wardens",
"enUS",
},
[110993] = {
"General Tel'arn",
"Black Rook Hold",
"enUS",
},
[113103] = {
"Corrupted Swoop",
"The Emerald Nightmare",
"enUS",
},
[99868] = {
"Fenryr",
"Halls of Valor",
"enUS",
},
[112676] = {
"Nobleborn Warpcaster",
"The Nighthold",
"enUS",
},
[97950] = {
"Felflame Dreadhound",
"Peak of Serenity",
"enUS",
},
[106087] = {
"Elerethe Renferal",
"The Emerald Nightmare",
"enUS",
},
[114329] = {
"Luminore",
"Return to Karazhan",
"enUS",
},
[97119] = {
"Shroud Hound",
"Maw of Souls",
"enUS",
},
[98206] = {
"General Xakal",
"The Arcway",
"enUS",
},
[114650] = {
"Phantom Hound",
"Return to Karazhan",
"enUS",
},
[105629] = {
"Wyrmtongue Scavenger",
"The Arcway",
"enUS",
},
[101467] = {
"Jaggen-Ra",
"Eye of Azshara",
"enUS",
},
[114522] = {
"Mrs. Cauldrons",
"Return to Karazhan",
"enUS",
},
[96480] = {
"Viletongue Belcher",
"Vault of the Wardens",
"enUS",
},
[102682] = {
"Lethon",
"The Emerald Nightmare",
"enUS",
},
[96608] = {
"Ebonclaw Worg",
"Halls of Valor",
"enUS",
},
[110994] = {
"Screeching Felspawn",
"Battle of Exodar",
"enUS",
},
[239379] = {
"Unbound Ethereal",
"Eco-Dome Al'dani",
"enUS",
},
[52524] = {
"Cinderweb Spinner",
"Firelands",
"enUS",
},
[115486] = {
"Erudite Slayer",
"Return to Karazhan",
"enUS",
},
[114319] = {
"Lady Keira Berrybuck",
"Return to Karazhan",
"enUS",
},
[103130] = {
"Timeless Wraith",
"The Arcway",
"enUS",
},
[104217] = {
"Talixae Flamewreath",
"Court of Stars",
"enUS",
},
[109396] = {
"Inquisitor's Eye",
"Trial of the Serpent",
"enUS",
},
[98207] = {
"Nal'tira",
"The Arcway",
"enUS",
},
[107288] = {
"Vilethorn Sapling",
"Darkheart Thicket",
"enUS",
},
},
["script_data_trash"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1670203758,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1213,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Player an animation when the cast start. Start a timer when the cast finishes. Set the time in the options.",
["__TrashAt"] = 1757077476,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Cast start animation settings",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 7,
["Key"] = "timerList",
["Value"] = {
},
["Name"] = "Timer (Key is SpellId and Value is Time)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the spellId and value is the amount of time of the Timer",
},
},
["version"] = -1,
["Name"] = "Cast - Alert + Timer [P]",
["NpcNames"] = {
},
},
},
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
},
["script_auto_imported"] = {
["Cast - Important by Color [P]"] = 2,
["Aura - Buff Alert"] = 15,
["Cast - Effect After Cast [P]"] = 2,
["Explosion Affix M+"] = 14,
["Aura - Debuff Alert"] = 12,
["Cast - Shining Green [P]"] = 3,
["Cast - Ultra Important"] = 14,
["Add - Health Markers [P]"] = 3,
["Cast - Small Alert"] = 12,
["Add - Important [P]"] = 4,
["Aura - Blink Time Left"] = 13,
["Add - Tag Number [P]"] = 2,
["Cast - Special Ability [P]"] = 3,
["Cast - Heroic Leap [P]"] = 3,
["Fixate On You"] = 12,
["Cast - Spark Color [P]"] = 2,
["Cast - Heal Stun [P]"] = 2,
["Aura - Is Cast Bar [P]"] = 1,
["Cast - Tankbuster [P]"] = 1,
["Cast - Important Target [P]"] = 2,
["Cast - Castbar is Timer [P]"] = 2,
["Cast - Glowing [P]"] = 10,
["Add - Explode on Die [P]"] = 1,
["Cast - Very Important"] = 15,
["Cast - Alert + Timer [P]"] = 4,
["Cast - Debuff [P]"] = 2,
["Fixate by Unit Buff [P]"] = 2,
["Aura is Shield [P]"] = 5,
["Add - Warning [P]"] = 5,
["Cast - Simple Interrupt [P]"] = 2,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Cast - Ongoing Cast [P]"] = 4,
["Cast - Voidzone [P]"] = 2,
["Cast - Heal Cut [P]"] = 3,
["Countdown"] = 12,
["Spiteful Affix"] = 3,
["Cast - Stop Casting"] = 4,
["Add - Non Elite Trash [P]"] = 4,
["Cast - Quick Flash"] = 2,
["Auto Set Skull"] = 11,
["Cast - On Going Cast [P]"] = 2,
["Cast - AoE With Range [P]"] = 2,
["Cast - Frontal Cone"] = 17,
["Fixate"] = 11,
["Cast - AoE Hit All [P]"] = 3,
["Cast - Shield Interrupt"] = 2,
["Cast - Circular Swipe"] = 4,
["Unit - Show Energy"] = 11,
},
["hook_auto_imported"] = {
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Color Automation"] = 1,
["Extra Border"] = 2,
["Cast Bar Icon Config"] = 2,
["Aura Reorder"] = 3,
["Hide Neutral Units"] = 1,
["Combo Points"] = 6,
["Target Color"] = 3,
["Execute Range"] = 1,
["Attacking Specific Unit"] = 2,
},
["aura2_x_offset"] = 0,
["saved_cvars"] = {
["nameplateMinAlpha"] = "0.90135484",
["nameplateMinAlphaDistance"] = "-158489.31924611",
["nameplateSelectedAlpha"] = "1",
["nameplateShowFriends"] = "0",
["nameplateShowPersonalCooldowns"] = "0",
["nameplateShowEnemies"] = "1",
["nameplateShowFriendlyBuffs"] = "0",
["nameplateMaxDistance"] = "100",
},
["login_counter"] = 579,
["plate_config"] = {
["global_health_height"] = 12,
["global_health_width"] = 112,
},
["aura_y_offset"] = 5,
["hook_data"] = {
{
["Enabled"] = false,
["Revision"] = 50,
["semver"] = "",
["LastHookEdited"] = "",
["version"] = -1,
["Author"] = "Kastfall-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Easy way to change the color of an unit. Open the constructor script and follow the examples.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --attempt to get the color from the unit color list\n    local color = envTable.NpcColors [unitFrame.namePlateUnitNameLower] or envTable.NpcColors [unitFrame.namePlateUnitName] or envTable.NpcColors [unitFrame.namePlateNpcId]\n    \n    --if the color exists, set the health bar color\n    if (color) then\n        Plater.SetNameplateColor (unitFrame, color)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    envTable.NpcColors = {\n        \n        --examples, using the unit name in lower case, regular unit name and the unitID:\n        \n        [\"Thunderlord Windreader\"] = \"red\", --using regular mob name and color it as red\n        [\"thunderlord crag-leaper\"] = {1, 1, 0}, --using lower case and coloring it yellow\n        [75790] = \"#00FF00\", --using the ID of the unit and using green as color\n        \n        --insert the new mobs here:\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    } --close custom color bracket\n    \nend\n\n\n\n\n",
},
["Name"] = "Color Automation [Plater]",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["role"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\color_bar",
["Time"] = 1547392935,
},
{
["HooksTemp"] = {
},
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    self.ThrottleUpdate = -1\n    \nend\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    unitFrame.castBar.BorderShield:SetDrawLayer(\"artwork\")\n    envTable.UpdateIconPosition (unitFrame)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    --private:\n    function envTable.UpdateIconPosition (unitFrame)\n        local castBar = unitFrame.castBar\n        local icon = castBar.Icon\n        local noInterruptTexture = castBar.BorderShield\n        \n        if (modTable.config.showIcon) then\n            icon:ClearAllPoints()\n            \n            if (modTable.config.iconOnLeftSide) then\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topright\", unitFrame.healthBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topright\", unitFrame.castBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n                \n            else\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topleft\", unitFrame.healthBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topleft\", unitFrame.castBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n            end\n            \n            icon:SetWidth (icon:GetHeight())\n            icon:Show()\n        else\n            icon:Hide()\n        end\n        \n        if (modTable.config.showTexture and not castBar.canInterrupt) then\n            noInterruptTexture:Show()\n            \n            local texturePath = modTable.config.iconTexturePath\n            texturePath = texturePath:gsub(\"//\", \"/\")\n            texturePath = texturePath:gsub(\"\\\\\", \"/\")\n            \n            noInterruptTexture:SetTexture (texturePath)\n            noInterruptTexture:SetTexCoord (0, 1, 0, 1)\n            \n            if (modTable.config.desaturatedTexture) then\n                noInterruptTexture:SetDesaturated (modTable.config.desaturatedTexture)\n            else\n                noInterruptTexture:SetVertexColor (DetailsFramework:ParseColors (modTable.config.textureColor))\n            end\n            \n            noInterruptTexture:SetSize (modTable.config.textureWidth, castBar:GetHeight() + modTable.config.textureHeightMod)\n            noInterruptTexture:ClearAllPoints()\n            noInterruptTexture:SetPoint (\"center\", castBar, \"left\", modTable.config.texturePosition, 0)\n            noInterruptTexture:SetAlpha (modTable.config.textureAlpha)\n        else\n            noInterruptTexture:Hide()\n        end\n    end\nend",
},
["Time"] = 1597097268,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\castbar_icon",
["Enabled"] = false,
["Revision"] = 348,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Icon Settings",
["Value"] = "Icon Settings:",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Icon",
["Value"] = true,
["Key"] = "showIcon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show the castbar icon when enabled",
},
{
["Type"] = 4,
["Name"] = "Icon on Left Side",
["Value"] = true,
["Key"] = "iconOnLeftSide",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled it anchor the icon on the left side, right otherwise",
},
{
["Type"] = 4,
["Key"] = "useFullSize",
["Value"] = false,
["Name"] = "Use Big Icon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled the icon has the size of the cast bar plus the healthbar",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Fine tune the icon size",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Key"] = "iconSizeOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Icon Size Offset",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Space between the icon and the cast bar",
["Min"] = -5,
["Name"] = "Icon Padding",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "iconPadding",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Interrupt Texture",
["Value"] = "Can't Interrupt Texture:",
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Texture",
["Value"] = true,
["Key"] = "showTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled show a texture to tell the cast can't be interrupted",
},
{
["Type"] = 3,
["Name"] = "Texture Path",
["Value"] = "Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON",
["Key"] = "iconTexturePath",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Insert the path for the texture",
},
{
["Type"] = 4,
["Name"] = "Texture Desaturated",
["Value"] = true,
["Key"] = "desaturatedTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enbaled, texture is shown in black & white",
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
1,
1,
1,
0.3056715726852417,
},
["Key"] = "textureColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Select the color of the texture",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture width",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 10,
["Key"] = "textureWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Width",
},
{
["Type"] = 2,
["Max"] = 16,
["Desc"] = "The texture is set to be the same size as the cast bar, fine tune the height as wanted",
["Min"] = -16,
["Name"] = "Texture Height Mod",
["Value"] = 0,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureHeightMod",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture position",
["Min"] = -32,
["Fraction"] = false,
["Value"] = 0,
["Key"] = "texturePosition",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Position",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust the texture transparency",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 1,
["Name"] = "Texture Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
["Author"] = "Ditador-Azralon",
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate.",
["version"] = -1,
["PlaterCore"] = 1,
["semver"] = "",
["LastHookEdited"] = "",
["Name"] = "Cast Bar Icon Settings [P]",
},
{
["HooksTemp"] = {
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    modTable.changeBarColor = modTable.config.changeBarColor\n    modTable.changeBorderColor = modTable.config.changeBorderColor\n    modTable.resetColors = modTable.config.resetColors\n    \n    modTable.ListOfNpcs = {\n        [61146] = modTable.config.color, --\"olive\", --monk statue npcID\n        [103822] = modTable.config.color, --\"olive\", --druid treant npcID\n        [15352] = modTable.config.color, --\"olive\", --shaman elemental\n        [95072] = modTable.config.color, --\"olive\", --shaman greater earth elemental npcID\n        [61056] = modTable.config.color, --\"olive\", --shaman primal earth elemental npcID\n        \n    }\nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not unitId then\n        return\n    end\n    --get the GUID of the target of the unit\n    local targetGUID = UnitGUID (unitId .. \"target\")\n    \n    if (targetGUID) then\n        \n        --get the npcID of the target\n        local npcID = Plater.GetNpcIDFromGUID (targetGUID)\n        local unitName = UnitName (unitId .. \"target\")\n        local unitNameLower = string.lower (unitName)\n        \n        --check if the npcID of this unit is in the npc list \n        local color = modTable.ListOfNpcs [npcID] or modTable.ListOfNpcs [unitName] or modTable.ListOfNpcs [unitNameLower]\n        \n        if color then\n            if modTable.changeBarColor then\n                Plater.SetNameplateColor (unitFrame, color)\n            end\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame, color)\n            end\n            unitFrame.attackingSpecificUnitFromMod = true\n        elseif unitFrame.attackingSpecificUnitFromMod and modTable.resetColors then\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame)\n            end\n            if modTable.changeBarColor then\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n            unitFrame.attackingSpecificUnitFromMod = false\n        end\n    end\nend",
},
["Time"] = 1620377377,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_attacking_unit",
["Enabled"] = false,
["Revision"] = 363,
["Options"] = {
{
["Type"] = 1,
["Key"] = "color",
["Value"] = {
0.5019607843137255,
0.5019607843137255,
0,
1,
},
["Name"] = "Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeBarColor",
["Value"] = true,
["Name"] = "Change Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeBorderColor",
["Value"] = false,
["Name"] = "Change Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "resetColors",
["Value"] = true,
["Name"] = "Reset Colors",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["Author"] = "Kastfall-Azralon",
["Desc"] = "Change the nameplate color if the unit is attacking a specific unit like Monk's Ox Statue or Druid's Treants. You may edit which units it track in the constructor script.",
["version"] = -1,
["PlaterCore"] = 1,
["semver"] = "",
["LastHookEdited"] = "",
["Name"] = "Attacking Specific Unit [Plater]",
},
{
["Enabled"] = false,
["Revision"] = 73,
["semver"] = "",
["LastHookEdited"] = "",
["version"] = -1,
["Author"] = "Izimode-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Hide neutral units, show when selected, see the constructor script for options.",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end\n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        envTable.HideNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        --check the unit reaction\n        if (unitFrame.namePlateIsTarget) then\n            envTable.ShowNameplate (unitFrame)\n            \n        else\n            envTable.HideNameplate (unitFrame)\n            \n        end    \n    end\n    \nend\n\n\n\n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        envTable.ShowNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when plater finishes an update on the nameplate\n    --check within the envTable if the healthBar of this nameplate should be hidden\n    if (envTable.IsHidden) then\n        if (unitFrame.healthBar:IsShown()) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\n    \nend\n\n\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.ShowNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.OnlyInOpenWorld = true;\n    envTable.ShowInCombat = true;\n    \n    --consts\n    envTable.REACTION_NEUTRAL = 4;\n    \n    --functions to hide and show the healthBar\n    function envTable.HideNameplate (unitFrame)\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        envTable.IsHidden = true\n    end\n    \n    function envTable.ShowNameplate (unitFrame)\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n        envTable.IsHidden = false\n    end\n    \nend\n\n\n\n\n",
},
["Name"] = "Hide Neutral Units [Plater]",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["race"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 1990989,
["Time"] = 1541606242,
},
{
["Enabled"] = false,
["Revision"] = 84,
["semver"] = "",
["LastHookEdited"] = "",
["version"] = -1,
["Author"] = "Ahwa-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Add extra effects to execute range. See the constructor script for options.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (envTable.UseCustomExecutePercent) then\n        \n        --manual detection\n        local healthBar = unitFrame.healthBar\n        if (healthBar.CurrentHealth / healthBar.CurrentHealthMax <= envTable.ExecutePercent) then\n            envTable.UnitInExecuteRange (unitFrame)\n        end        \n        \n    else\n        \n        --auto detection\n        if (unitFrame.InExecuteRange) then\n            envTable.UnitInExecuteRange (unitFrame)\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --execute detection, if true the script will handle the execute percent\n    --while false Plater will automatically trigger the execute range\n    --you only want to set this to true in case of Plater not detecting the execute range correctly\n    envTable.UseCustomExecutePercent = false\n    --execute percent, if not detecting automatic, this is the percent to active the execute range\n    --use from zero to one, 0.20 is equal to 20% of the unit life\n    envTable.ExecutePercent = 0.20\n    \n    --allow this script to change the nameplate color when the unit is in execute range\n    envTable.CanChangeColor = true\n    --change the health bar color to this color when the unit is in execute range\n    --color can be set as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}\n    envTable.ExecuteColor = \"green\"\n    \n    --border color\n    envTable.CanChangeBorderColor = false\n    envTable.BorderColor = \"red\"\n    \n    --hide the default health divisor and the health execute indicator\n    envTable.HideHealthDivisor = false\n    --if not hidden, adjust the health divisor settings and the health execute indicator\n    envTable.HealthDivisorAlpha = 0.5\n    envTable.HealthDivisorColor = \"white\"\n    envTable.HealthExecuteIndicatorAlpha = 0.15\n    envTable.HealthExecuteIndicatorColor = \"darkred\"\n    \n    \n    --private (internal functions)\n    do\n        function envTable.UnitInExecuteRange (unitFrame)\n            --check if can change the execute color\n            if (envTable.CanChangeColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.ExecuteColor)\n            end\n            \n            if (envTable.CanChangeBorderColor) then\n                Plater.SetBorderColor (unitFrame, envTable.BorderColor)\n            end\n            \n            if (envTable.HideHealthDivisor) then\n                unitFrame.healthBar.healthCutOff:Hide() \n                unitFrame.healthBar.executeRange:Hide()\n                \n            else\n                envTable.UpdateHealthDivisor (unitFrame)\n                \n            end\n        end\n        \n        function envTable.UpdateHealthDivisor (unitFrame)\n            local healthBar = unitFrame.healthBar\n            \n            healthBar.healthCutOff:Show()\n            healthBar.healthCutOff:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthDivisorColor))\n            healthBar.healthCutOff:SetAlpha (envTable.HealthDivisorAlpha)\n            \n            healthBar.executeRange:Show()\n            healthBar.executeRange:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthExecuteIndicatorColor))\n            healthBar.executeRange:SetAlpha (envTable.HealthExecuteIndicatorAlpha)\n            \n            if (envTable.UseCustomExecutePercent) then\n                healthBar.healthCutOff:ClearAllPoints()\n                healthBar.executeRange:ClearAllPoints()\n                \n                healthBar.healthCutOff:SetSize (healthBar:GetHeight(), healthBar:GetHeight())\n                healthBar.healthCutOff:SetPoint (\"center\", healthBar, \"left\", healthBar:GetWidth() * envTable.ExecutePercent, 0)\n                \n                healthBar.executeRange:SetTexCoord (0, envTable.ExecutePercent, 0, 1)\n                healthBar.executeRange:SetHeight (healthBar:GetHeight())\n                healthBar.executeRange:SetPoint (\"left\", healthBar, \"left\", 0, 0)\n                healthBar.executeRange:SetPoint (\"right\", healthBar.healthCutOff, \"center\")\n            end\n            \n        end\n    end\n    \nend",
},
["Name"] = "Execute Range [Plater]",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["role"] = {
},
},
["url"] = "",
["Icon"] = 135358,
["Time"] = 1547406548,
},
{
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Added"] = "\n\n-- exported function Plater.UpdatePlateSize() from Plater.lua\n--this is for advanced users which wants to reorder the nameplate frame at their desire\n\n\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --check if there's a type of unit on this nameplate\n    local plateFrame = unitFrame:GetParent()\n    if (not plateFrame.actorType) then\n        return\n    end\n    \n    --get all the frames and cache some variables\n    local ACTORTYPE_ENEMY_PLAYER = \"enemyplayer\"\n    local profile = Plater.db.profile\n    local DB_PLATE_CONFIG = profile.plate_config\n    local isInCombat = Plater.IsInCombat()\n    local actorType = plateFrame.actorType\n    \n    local unitFrame = plateFrame.unitFrame\n    local healthBar = unitFrame.healthBar\n    local castBar = unitFrame.castBar\n    local powerBar = unitFrame.powerBar\n    local buffFrame1 = unitFrame.BuffFrame\n    local buffFrame2 = unitFrame.BuffFrame2\n    \n    --use in combat bars when in pvp\n    if (plateFrame.actorType == ACTORTYPE_ENEMY_PLAYER) then\n        if ((Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"arena\") and DB_PLATE_CONFIG.player.pvp_always_incombat) then\n            isInCombat = true\n        end\n    end\n    \n    --get the config for this actor type\n    local plateConfigs = DB_PLATE_CONFIG [actorType]\n    --get the config key based if the player is in combat\n    local castBarConfigKey, healthBarConfigKey, manaConfigKey = Plater.GetHashKey (isInCombat)\n    \n    --get the width and height from what the user set in the options panel\n    local healthBarWidth, healthBarHeight = unitFrame.customHealthBarWidth or plateConfigs [healthBarConfigKey][1], unitFrame.customHealthBarHeight or plateConfigs [healthBarConfigKey][2]\n    local castBarWidth, castBarHeight = unitFrame.customCastBarWidth or plateConfigs [castBarConfigKey][1], unitFrame.customCastBarHeight or plateConfigs [castBarConfigKey][2]\n    local powerBarWidth, powerBarHeight = unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][1], unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][2]\n    \n    --calculate the offset for the cast bar, this is done due to the cast bar be anchored to topleft and topright\n    local castBarOffSetX = (healthBarWidth - castBarWidth) / 2\n    local castBarOffSetY = plateConfigs.castbar_offset\n    \n    --calculate offsets for the power bar\n    local powerBarOffSetX = (healthBarWidth - powerBarWidth) / 2\n    local powerBarOffSetY = 0\n    \n    --calculate the size deviation for pets\n    local unitType = Plater.GetUnitType (plateFrame)\n    if (unitType == \"pet\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.pet_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.pet_width_scale\n        \n    elseif (unitType == \"minus\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.minor_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.minor_width_scale\n    end\n    \n    --unit frame - is set to be the same size as the plateFrame\n    unitFrame:ClearAllPoints()\n    unitFrame:SetAllPoints()\n    \n    --calculates the health bar anchor points\n    --it will always be placed in the center of the nameplate area (where it accepts mouse clicks) \n    local xOffSet = (plateFrame:GetWidth() - healthBarWidth) / 2\n    local yOffSet = (plateFrame:GetHeight() - healthBarHeight) / 2\n    \n    --set the health bar point\n    healthBar:ClearAllPoints()\n    PixelUtil.SetPoint (healthBar, \"topleft\", unitFrame, \"topleft\", xOffSet + profile.global_offset_x, -yOffSet + profile.global_offset_y)\n    PixelUtil.SetPoint (healthBar, \"bottomright\", unitFrame, \"bottomright\", -xOffSet + profile.global_offset_x, yOffSet + profile.global_offset_y)\n    \n    --set the cast bar point and size\n    castBar:ClearAllPoints()\n    PixelUtil.SetPoint (castBar, \"topleft\", healthBar, \"bottomleft\", castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetPoint (castBar, \"topright\", healthBar, \"bottomright\", -castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetHeight (castBar, castBarHeight)\n    PixelUtil.SetSize (castBar.Icon, castBarHeight, castBarHeight)\n    PixelUtil.SetSize (castBar.BorderShield, castBarHeight * 1.4, castBarHeight * 1.4)\n    \n    --set the power bar point and size\n    powerBar:ClearAllPoints()\n    PixelUtil.SetPoint (powerBar, \"topleft\", healthBar, \"bottomleft\", powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetPoint (powerBar, \"topright\", healthBar, \"bottomright\", -powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetHeight (powerBar, powerBarHeight)\n    \n    --power bar are hidden by default, show it if there's a custom size for it\n    if (unitFrame.customPowerBarWidth and unitFrame.customPowerBarHeight) then\n        powerBar:SetUnit (unitFrame.unit)\n    end\n    \n    --aura frames\n    local bf1Anchor = Plater.db.profile.aura_frame1_anchor\n    Plater.SetAnchor (buffFrame1, {side = bf1Anchor.side, x = bf1Anchor.x, y = bf1Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura_grow_direction or 2) == 2)\n    \n    local bf2Anchor = Plater.db.profile.aura_frame2_anchor\n    Plater.SetAnchor (buffFrame2, {side = bf2Anchor.side, x = bf2Anchor.x, y = bf2Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura2_grow_direction or 2) == 2)\n    \nend\n\n\n",
},
["Time"] = 1596791840,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["url"] = "",
["Icon"] = 574574,
["Enabled"] = false,
["Revision"] = 93,
["Options"] = {
},
["Author"] = "Kastfall-Azralon",
["Desc"] = "Function Plater.UpdatePlateSize from Plater.lua exported to scritps.",
["version"] = -1,
["PlaterCore"] = 1,
["semver"] = "",
["LastHookEdited"] = "",
["Name"] = "Reorder Nameplate [Plater]",
},
{
["Enabled"] = false,
["Revision"] = 59,
["semver"] = "",
["LastHookEdited"] = "",
["version"] = -1,
["Author"] = "Izimode-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Change the nameplate color when a nameplate does not have the auras set in the constructor script.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --do nothing if the player isn't in combat\n    if (not Plater.IsInCombat()) then\n        return \n    end\n    \n    --do nothing if the unit isn't in combat\n    if (not unitFrame.InCombat) then\n        return\n    end\n    \n    --do nothing if the unit is the player it self\n    if (unitFrame.IsSelf) then\n        return\n    end\n    \n    --check the auras\n    local hasAura = false\n    \n    for auraName, _ in pairs (envTable.TrackingAuras) do\n        if (Plater.NameplateHasAura (unitFrame, auraName)) then\n            hasAura = true\n            break\n        end\n    end\n    \n    if (not hasAura) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    else\n        if (envTable.ForceRefreshNameplateColor) then\n            Plater.RefreshNameplateColor (unitFrame) \n        end\n    end    \n    \nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --Important: lines starting with double dashes are comments and are not part of the script\n    \n    --set this to true if you are not using threat colors in the health bar\n    envTable.ForceRefreshNameplateColor = true\n    \n    --if the unit does not have any of the following auras, it will be painted with the color listed below\n    --list of spells to track, can be the spell name (case-sensitive) or the spellID\n    envTable.TrackingAuras = {\n        --[\"Nightblade\"] = true, --this is an example using the spell name\n        --[195452] = true, --this is an example using the spellID\n        \n    }\n    \n    --which color the nameplate wil be changed\n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    --you may also use /plater colors\n    envTable.NameplateColor = \"pink\"\n    \nend",
},
["Name"] = "Don't Have Aura [Plater]",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["role"] = {
},
},
["url"] = "",
["Icon"] = 136207,
["Time"] = 1554138845,
},
{
["Enabled"] = false,
["Revision"] = 176,
["semver"] = "",
["LastHookEdited"] = "",
["version"] = -1,
["Author"] = "Tecno-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Add another border with more customizations. This border can also be manipulated by other scripts.",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    if (envTable.IsEnabled) then\n        if (unitFrame.IsSelf) then\n            if (envTable.ShowOnPersonalBar) then\n                envTable.BorderFrame:Show()\n            else\n                envTable.BorderFrame:Hide() \n            end\n        else\n            envTable.BorderFrame:Show()\n        end   \n    end\n    \nend   \n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border color\n    local borderColor = \"yellow\"\n    \n    --size of the border\n    local borderSize = 1\n    \n    --transparency\n    local borderAlpha = 1\n    \n    --enabled (set to false it you only want to use the extra border in other scripts)\n    local isEnabled = true\n    \n    --export border (allow the border to be used by other scripts)\n    --other scripts can use:\n    --unitFrame.healthBar.extraBorder:Show()\n    --unitFrame.healthBar.extraBorder:SetVertexColor (r, g, b)\n    --unitFrame.healthBar.extraBorder:SetBorderSizes (borderSize)\n    local canExportBorder = true\n    \n    --do not add the border to personal bar\n    local noPersonalBar = true\n    \n    --private\n    do\n        \n        local newBorder = CreateFrame (\"frame\", nil, unitFrame.healthBar, \"NamePlateFullBorderTemplate\")\n        envTable.BorderFrame = newBorder\n        \n        newBorder:SetBorderSizes (borderSize, borderSize, borderSize, borderSize)\n        newBorder:UpdateSizes()\n        \n        local r, g, b = DetailsFramework:ParseColors (borderColor)\n        newBorder:SetVertexColor (r, g, b, borderAlpha)\n        \n        envTable.ShowOnPersonalBar = not noPersonalBar\n        \n        if (canExportBorder) then\n            unitFrame.healthBar.extraBorder = newBorder\n        end\n        \n        if (not isEnabled) then\n            envTable.IsEnabled = false\n        else\n            envTable.IsEnabled = true\n        end\n    end\n    \nend\n\n\n",
},
["Name"] = "Extra Border [Plater]",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["url"] = "",
["Icon"] = 133689,
["Time"] = 1547409079,
},
{
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    --constructor is executed only once when any script of the hook runs.\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if need update the amount of combo points shown\n    if (envTable.LastPlayerTalentUpdate > envTable.LastUpdate) then\n        envTable.UpdateComboPointAmount()\n    end    \n    \n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n        \n    else\n        envTable.ComboPointFrame:Hide()\n    end    \n    \nend\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if this nameplate is the current target\n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n    else\n        envTable.ComboPointFrame:Hide()\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Player Power Update"] = "function (self, unitId, unitFrame, envTable, modTable, ...)\n    local powerType = ...\n    \n    if (powerType and powerType == \"COMBO_POINTS\" and unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.UpdateComboPoints()\n    end\n    \n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n\n\n",
["Player Talent Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    --update the amount of comboo points shown when the player changes talents or specialization\n    envTable.UpdateComboPointAmount()\n    \n    --save the time of the last talent change\n    envTable.LastPlayerTalentUpdate = GetTime()\n    \n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --settings\n    local anchors = {\n        {\"bottom\", unitFrame.healthBar, \"top\", 0, 24},\n    }\n    \n    local sizes = {\n        width = 12,\n        height = 12,\n        scale = 1,\n    }\n    \n    local textures = {\n        backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        backgroundTexCoords = {0/128, 21/128, 101/128, 122/128},\n        \n        comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        comboPointTexCoords = {3/128, 18/128, 81/128, 96/128},\n    }\n    if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n        textures = {\n            backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            backgroundTexCoords = {78/128, 98/128, 21/64, 41/64},\n            \n            comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            comboPointTexCoords = {100/128, 120/128, 21/64, 41/64},\n        }\n    end\n    \n    local frameLevel = 1000\n    local frameStrata = \"high\"    \n    \n    --private\n    do\n        --store combo points frames on this table\n        envTable.ComboPoints = {}\n        --save when the player changed talents or spec\n        envTable.LastPlayerTalentUpdate = GetTime()\n        --save when this nameplate got a combo point amount and alignment update        \n        \n        --build combo points frame anchor (combo point are anchored to this)\n        if (not unitFrame.PlaterComboPointFrame) then\n            local hostFrame = CreateFrame (\"frame\", nil, unitFrame)\n            hostFrame.ComboPointFramesPool = {}\n            unitFrame.PlaterComboPointFrame = hostFrame\n            envTable.ComboPointFrame = hostFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            \n            --DetailsFramework:ApplyStandardBackdrop (envTable.ComboPointFrame) --debug anchor size\n            \n            --animations\n            local onPlayShowAnimation = function (animation)\n                --stop the hide animation if it's playing\n                if (animation:GetParent():GetParent().HideAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().HideAnimation:Stop()\n                end\n                \n                animation:GetParent():Show()\n            end\n            \n            local onPlayHideAnimation = function (animation)\n                --stop the show animation if it's playing\n                if (animation:GetParent():GetParent().ShowAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().ShowAnimation:Stop()\n                end\n            end        \n            local onStopHideAnimation = function (animation)\n                animation:GetParent():Hide()       \n            end\n            \n            local createAnimations = function (comboPoint)\n                --on show\n                comboPoint.ShowAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayShowAnimation, nil)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 1, 0.1, 0, 0, 1, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"alpha\", 1, 0.1, .5, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 2, 0.1, 1.2, 1.2, 1, 1)\n                \n                --on hide\n                comboPoint.HideAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayHideAnimation, onStopHideAnimation)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"scale\", 1, 0.1, 1, 1, 0, 0)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"alpha\", 1, 0.1, 1, 0)\n            end\n            \n            --build combo point frame        \n            for i =1, 10 do \n                local f = CreateFrame (\"frame\", nil, envTable.ComboPointFrame)\n                f:SetSize (sizes.width, sizes.height)\n                tinsert (envTable.ComboPoints, f)\n                tinsert (unitFrame.PlaterComboPointFrame.ComboPointFramesPool, f)\n                \n                local backgroundTexture = f:CreateTexture (nil, \"background\")\n                backgroundTexture:SetTexture (textures.backgroundTexture)\n                backgroundTexture:SetTexCoord (unpack (textures.backgroundTexCoords))\n                backgroundTexture:SetSize (sizes.width, sizes.height)\n                backgroundTexture:SetPoint (\"center\")\n                \n                local comboPointTexture = f:CreateTexture (nil, \"artwork\")\n                comboPointTexture:SetTexture (textures.comboPointTexture)\n                comboPointTexture:SetTexCoord (unpack (textures.comboPointTexCoords))\n                \n                comboPointTexture:SetSize (sizes.width, sizes.height)\n                comboPointTexture:SetPoint (\"center\")\n                comboPointTexture:Hide()            \n                \n                f.IsActive = false\n                \n                f.backgroundTexture = backgroundTexture\n                f.comboPointTexture = comboPointTexture\n                \n                createAnimations (f)\n            end\n            \n        else\n            envTable.ComboPointFrame = unitFrame.PlaterComboPointFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            envTable.ComboPoints = unitFrame.PlaterComboPointFrame.ComboPointFramesPool\n            \n        end            \n        \n        envTable.ComboPointFrame:SetFrameLevel (frameLevel)\n        envTable.ComboPointFrame:SetFrameStrata (frameStrata)\n        \n        function envTable.UpdateComboPoints()\n            local comboPoints = GetComboPoints(\"player\", \"target\")\n            --UnitPower (\"player\", Enum.PowerType.ComboPoints)\n            \n            for i = 1, envTable.TotalComboPoints do\n                local thisComboPoint = envTable.ComboPoints [i]\n                \n                if (i <= comboPoints ) then\n                    --combo point enabled\n                    if (not thisComboPoint.IsActive) then\n                        thisComboPoint.ShowAnimation:Play()\n                        thisComboPoint.IsActive = true\n                        \n                    end\n                    \n                else\n                    --combo point disabled\n                    if (thisComboPoint.IsActive) then\n                        thisComboPoint.HideAnimation:Play()\n                        thisComboPoint.IsActive = false\n                        \n                    end\n                end\n            end\n            \n            \n        end\n        \n        function envTable.UpdateComboPointAmount()\n            local namePlateWidth = Plater.db.profile.plate_config.enemynpc.health_incombat[1]\n            local comboPoints = UnitPowerMax (\"player\", Enum.PowerType.ComboPoints)\n            local reservedSpace = (namePlateWidth - sizes.width * comboPoints)  / comboPoints \n            \n            --store the total amount of combo points\n            envTable.TotalComboPoints = comboPoints\n            \n            --update anchor frame\n            envTable.ComboPointFrame:SetWidth (namePlateWidth)\n            envTable.ComboPointFrame:SetHeight (20)\n            envTable.ComboPointFrame:ClearAllPoints()\n            for i = 1, #anchors do\n                local anchor = anchors[i]\n                envTable.ComboPointFrame:SetPoint (unpack (anchor))\n            end        \n            \n            --\n            for i = 1, #envTable.ComboPoints do\n                envTable.ComboPoints[i]:Hide()\n                envTable.ComboPoints[i]:ClearAllPoints()\n            end\n            \n            for i = 1, comboPoints do\n                local comboPoint = envTable.ComboPoints[i]\n                if i == 1 then\n                    comboPoint:SetPoint (\"left\", envTable.ComboPointFrame, \"left\", reservedSpace/2, 0)\n                else\n                    comboPoint:SetPoint (\"left\", envTable.ComboPoints[i-1], \"right\", reservedSpace, 0)\n                end\n                \n                comboPoint:Show()\n            end\n            \n            envTable.LastUpdate = GetTime()\n            \n            envTable.UpdateComboPoints()\n        end\n        \n        --initialize\n        envTable.UpdateComboPointAmount()\n        envTable.ComboPointFrame:Hide()\n    end\n    \n    \nend",
},
["Time"] = 1621935143,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
["Enabled"] = true,
["DRUID"] = true,
["ROGUE"] = true,
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
["103"] = true,
["Enabled"] = true,
},
},
["url"] = "",
["Icon"] = 135426,
["Enabled"] = false,
["Revision"] = 284,
["Options"] = {
},
["Author"] = "Izimode-Azralon",
["Desc"] = "Show combo points above the nameplate for Druid Feral and Rogues.",
["version"] = -1,
["PlaterCore"] = 1,
["semver"] = "",
["LastHookEdited"] = "",
["Name"] = "Combo Points [Plater]",
},
{
["Enabled"] = false,
["Revision"] = 182,
["semver"] = "",
["LastHookEdited"] = "",
["version"] = -1,
["Author"] = "Izimode-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Show how many raid members are targeting the unit",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CanShow = false;\n    envTable.TargetAmount:SetText (\"\")\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when a nameplate is added to the screen check if the player is in combat\n    if (InCombatLockdown()) then\n        --player is in combat, check if can check amount of targets\n        envTable.CanShow = envTable.CanShowTargetAmount();\n        \n    else\n        envTable.CanShow = false; \n    end\n    \n    envTable.TargetAmount:SetText (\"\");\n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.TargetAmount:SetText (\"\");\n    envTable.CanShow = false;\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --if the script is allowed to show the amount of targets\n    --also check if the unit is in combat\n    if (envTable.CanShow and UnitAffectingCombat (unitId)) then\n        \n        --check if can update the amount of targets following the cooldown set in the constructor script\n        --by default Plater updates the nameplate every 250ms, by default the cooldown is 2, so it'll update the amuont of target every 1/2 of a second\n        envTable.UpdateCooldown = envTable.UpdateCooldown + 1\n        if (envTable.UpdateCooldown < envTable.UpdateInterval) then\n            return\n        else\n            \n            --reset the cooldown interval to check the amount of target again\n            envTable.UpdateCooldown = 0\n            \n            --get the amount of targets\n            local amount;\n            if (envTable.InRaid) then\n                amount = envTable.NumTargetsInRaid (unitFrame)      \n                \n            elseif (envTable.InParty) then\n                amount = envTable.NumTargetsInParty (unitFrame)   \n                \n            else\n                envTable.TargetAmount:SetText (\"\")\n                return\n            end\n            \n            --update the amount text\n            if (amount == 0) then\n                envTable.TargetAmount:SetText (\"\")\n            else\n                envTable.TargetAmount:SetText (amount)\n            end\n            \n        end\n    end\nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can show the amount of targets\n    envTable.CanShow = envTable.CanShowTargetAmount();\n    \n    if (not envTable.CanShow) then\n        envTable.TargetAmount:SetText (\"\") \n    end\nend\n\n\n\n\n",
["Constructor"] = "--all gray text like this are comments and do not run as code\n--build the settings and basic functions for the hook\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --declare setting variables:\n    local textColor = \"orange\";\n    local textSize = 12;\n    \n    local showInRaid = true;\n    local showInDungeon = true;\n    local showInArena = false;\n    local showInBattleground = false;\n    local showInOpenWorld = true;\n    \n    envTable.UpdateInterval = 2; --each 2 updates in the nameplate it'll update the amount of targets\n    \n    local anchor = {\n        side = 6, --1 = topleft 2 = left 3 = bottomleft 4 = bottom 5 = bottom right 6 = right 7 = topright 8 = top\n        x = 4, --x offset\n        y = 0, --y offset\n    };\n    \n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------\n    \n    \n    --frames:\n    \n    --create the text that will show the amount of people targeting the unit\n    if (not  unitFrame.healthBar.TargetAmount) then\n        envTable.TargetAmount = Plater:CreateLabel (unitFrame.healthBar, \"\", textSize, textColor);\n        Plater.SetAnchor (envTable.TargetAmount, anchor);\n        unitFrame.healthBar.TargetAmount = envTable.TargetAmount\n    end\n    \n    --in case Plater wipes the envTable\n    envTable.TargetAmount = unitFrame.healthBar.TargetAmount\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --private variables (they will be used in the other scripts within this hook)\n    envTable.CanShow = false;\n    envTable.UpdateCooldown = 0;\n    envTable.InRaid = false;\n    envTable.InParty = false;\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --functions\n    \n    --update the InRaid or InParty proprieties\n    function envTable.UpdateGroupType()\n        if (IsInRaid()) then\n            envTable.InRaid = true;\n            envTable.InParty = false;     \n            \n        elseif (IsInGroup()) then\n            envTable.InRaid = false;\n            envTable.InParty = true;   \n            \n        else\n            envTable.InRaid = false;            \n            envTable.InParty = false;\n        end\n    end\n    \n    --this function controls if the amount of targets can show following the settings in the top of this script\n    function envTable.CanShowTargetAmount()\n        \n        local _, instanceType, difficultyID, _, _, _, _, instanceMapID, instanceGroupSize = GetInstanceInfo()\n        \n        if (showInRaid and instanceType == \"raid\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInDungeon and instanceType == \"party\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInArena and instanceType == \"arena\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInBattleground and instanceType == \"pvp\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInOpenWorld and instanceType == \"none\") then\n            envTable.UpdateGroupType()\n            if (envTable.InRaid or envTable.InParty) then\n                return true\n            end\n        end\n        \n        return false\n    end\n    \n    --get the amount of player targetting the unit in raid or party\n    function envTable.NumTargetsInRaid (unitFrame)\n        local amount = 0\n        for i = 1, GetNumGroupMembers() do\n            local unit = \"raid\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        return amount\n    end\n    \n    function envTable.NumTargetsInParty()\n        local amount = 0\n        for i = 1, GetNumGroupMembers() - 1 do\n            local unit = \"party\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        local unit = \"playertarget\"\n        if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n            amount = amount + 1\n        end        \n        \n        return amount\n    end\n    \nend",
},
["Name"] = "Players Targeting a Target [Plater]",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["role"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 1966587,
["Time"] = 1548278227,
},
{
["HooksTemp"] = {
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    \n    local sortByTime = true\n    local invertSort = true\n    local npcSeparatedFromPlayer = true\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        [\"Vampiric Touch\"] = 50,\n        [\"Shadow Word: Pain\"] = 22,\n        [\"Mind Flay\"] = 5,\n        [\"Pistol Shot\"] = 50,\n        [\"Marked for Death\"] = 99,\n        [\"Garrote\"] = 95,\n        [\"Rupture\"] = 90,\n        [\"Sigil of Flame\"] = 50,\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or aura1.layoutIndex or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or aura2.layoutIndex or 1\n        \n        if npcSeparatedFromPlayer then\n            if aura1.IsFromPlayer and not aura2.IsFromPlayer then\n                return false\n            elseif not aura1.IsFromPlayer and aura2.IsFromPlayer then\n                return true\n            end\n        end\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1741092085,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_reorder",
["Enabled"] = false,
["Revision"] = 424,
["Options"] = {
},
["Author"] = "Ditador-Azralon",
["Desc"] = "Reorder buffs and debuffs following the settings set in the constructor.",
["version"] = -1,
["PlaterCore"] = 1,
["semver"] = "",
["LastHookEdited"] = "",
["Name"] = "Aura Reorder [Plater]",
},
{
["Enabled"] = false,
["Revision"] = 93,
["semver"] = "",
["LastHookEdited"] = "",
["version"] = -1,
["Author"] = "Izimode-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Changes the target color to the color set in the constructor script.",
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --usage: color name e.g \"red\" \"yellow\"; color table e.g {1, 0, 0} {1, 1, 0}; hex string e.g. \"#FF0000\" \"FFFF00\"\n    \n    envTable.TargetColor = \"purple\"\n    --envTable.TargetColor = \"#FF00FF\"\n    --envTable.TargetColor = {252/255, 0/255, 254/255}\n    \n    function envTable.UpdateColor (unitFrame)\n        --do not change the color of the personal bar\n        if (not unitFrame.IsSelf) then\n            \n            --if this nameplate the current target of the player?\n            if (unitFrame.namePlateIsTarget) then\n                Plater.SetNameplateColor (unitFrame, envTable.TargetColor)  --rgb\n            else\n                --refresh the nameplate color\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n        end\n    end\n    \nend\n\n\n\n\n",
},
["Name"] = "Current Target Color [Plater]",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["role"] = {
},
},
["url"] = "",
["Icon"] = 878211,
["Time"] = 1552354619,
},
},
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1,
},
},
["ghost_auras"] = {
["auras"] = {
["PRIEST"] = {
[3] = {
[589] = true,
[34914] = true,
},
},
["WARLOCK"] = {
{
[172] = true,
[980] = true,
},
},
},
},
["use_ui_parent"] = true,
["aura_x_offset"] = 0,
["first_run3"] = true,
["ui_parent_scale_tune"] = 1,
["aura_tracker"] = {
["buff_tracked"] = {
[209859] = true,
},
},
["patch_version"] = 40,
["number_region_first_run"] = true,
["resources_settings"] = {
["chr"] = {
["Player-1329-068DF44B"] = "Chi",
["Player-1329-0625A67D"] = "ComboPoints",
["Player-1329-0A73CA02"] = "Chi",
},
},
},
["Quazii"] = {
["plater_resources_show_depleted"] = false,
["target_shady_combat_only"] = false,
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"gray\"\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --only change the nameplate color in combat\n    if (InCombatLockdown()) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n\n\n",
["Time"] = 1745120820,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"gray\"\n    \nend\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_invalid",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Revision"] = 119,
["Options"] = {
},
["Author"] = "Izimode-Azralon",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Name"] = "Aura - Invalidate Unit [Plater]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --only change the nameplate color in combat\n    if (InCombatLockdown()) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n\n\n",
["SpellIds"] = {
261265,
261266,
271590,
},
["PlaterCore"] = 1,
["Prio"] = 99,
["Desc"] = "When an aura makes the unit invulnarable and you don't want to attack it. Add spell in the Add Trigger field.",
["Enabled"] = true,
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["Time"] = 1754310589,
["semver"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["NpcNames"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["Revision"] = 639,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "glowEnabled",
["Value"] = false,
["Name"] = "Glow Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "dotsEnabled",
["Value"] = true,
["Name"] = "Dots Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Key"] = "dotsColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["Prio"] = 99,
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Add the buff name in the trigger box.",
["SpellIds"] = {
398151,
375596,
377738,
378149,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["Name"] = "Aura - Buff Alert [Plater]",
["PlaterCore"] = 1,
["Enabled"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Time"] = 1745120821,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 374,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "glowEnabled",
["Value"] = false,
["Name"] = "Glow Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "dotsEnabled",
["Value"] = true,
["Name"] = "Dots Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Key"] = "dotsColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
["version"] = -1,
["Author"] = "Tercioo-Sylvanas",
["Prio"] = 99,
["Desc"] = "Add the debuff name in the trigger box.",
["Name"] = "Aura - Debuff Alert [Plater]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["semver"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["NpcNames"] = {
},
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);\nend\n\n--[=[\n\n\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount.text = \"\" .. UnitPower (unitId);\nend\n\n\n",
["Time"] = 1743564548,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);\nend\n\n--[=[\n\n\n--]=]",
["Icon"] = 136048,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["Revision"] = 145,
["Options"] = {
},
["Author"] = "Celian-Sylvanas",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["Name"] = "UnitPower [Plater]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount.text = \"\" .. UnitPower (unitId);\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Prio"] = 99,
["Desc"] = "Show the energy amount above the nameplate",
["Enabled"] = false,
["NpcNames"] = {
"Guardian of Yogg-Saron",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["ScriptType"] = 3,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1743564605,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "script desc",
["Value"] = "Show the power of the unit above the nameplate.",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "add trigger",
["Value"] = "Add the unit name or unitId in the \"Add Trigger\" field and press \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 2",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show at 80% of Energy",
["Value"] = true,
["Key"] = "showLater",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the energy won't start showing until the unit has 80% energy.",
},
{
["Type"] = 6,
["Name"] = "Option 2",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Text size.",
["Min"] = 8,
["Fraction"] = false,
["Value"] = 16,
["Key"] = "fontSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Text Size",
},
{
["Type"] = 1,
["Name"] = "Font Color",
["Value"] = {
0.80392156862745,
0.80392156862745,
0.80392156862745,
1,
},
["Key"] = "fontColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the text.",
},
{
["Type"] = 4,
["Name"] = "Enable Text Outline",
["Value"] = true,
["Key"] = "outline",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the text uses outline.",
},
},
["url"] = "",
["Icon"] = 136048,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["Enabled"] = false,
["Revision"] = 254,
["semver"] = "",
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show the energy amount above the nameplate.",
["Name"] = "Unit - Show Energy [Plater]",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["NpcNames"] = {
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 1,
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1743574570,
["semver"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Icon"] = 610472,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Enabled"] = true,
["Revision"] = 93,
["Options"] = {
},
["version"] = -1,
["Prio"] = 99,
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["Name"] = "Aura is Shield [P]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["SpellIds"] = {
343470,
423228,
},
["PlaterCore"] = 1,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["NpcNames"] = {
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1743992662,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Vertical Line Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "indicatorColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Name"] = "Vertical Line Alpha",
["Value"] = 0.79,
["Key"] = "indicatorAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "fillColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Fill Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Fill Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "fillAlpha",
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Enabled"] = true,
["Revision"] = 161,
["semver"] = "",
["Name"] = "Add - Health Markers [P]",
["Prio"] = 99,
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["NpcNames"] = {
"214840",
"197697",
"59544",
"186227",
"184020",
"91005",
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
["Time"] = 1743574568,
["semver"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Enabled"] = true,
["Revision"] = 28,
["Options"] = {
},
["version"] = -1,
["Prio"] = 99,
["Author"] = "Tiranaa-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Highlight the nameplate of a unit when has a certain Buff (trigger) and start to cast a spell",
["Name"] = "Aura While Casting [P]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
["SpellIds"] = {
372743,
372749,
384933,
},
["PlaterCore"] = 1,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
["Icon"] = 236209,
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local auraDuration = envTable._Duration\n    local altCastId = 1\n    \n    ---@class plater_altcastbarconfig : table\n    ---@field iconTexture string\n    ---@field iconTexcoord table\n    ---@field iconAlpha number\n    ---@field text string\n    ---@field texture any\n    ---@field color any\n    ---@field isChanneling boolean\n    ---@field canInterrupt boolean\n    ---@field height number\n    ---@field iconSize number\n    ---@field textSize number\n    ---@field spellNameAnchor df_anchor\n    ---@field timerAnchor df_anchor\n    ---@field iconAnchor df_anchor\n    \n    local configTable = {\n        iconTexture = envTable._Texture,\n        text = envTable._SpellName,\n        color = \"gray\",\n        isChanneling = true,\n        canInterrupt = false,\n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        \n    }\n    \n    Plater.SetAltCastBar(unitFrame.PlateFrame, configTable, auraDuration, envTable._StartTime, altCastId)\n    \nend\n\n\n",
["ScriptType"] = 1,
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1745120819,
["semver"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["NpcNames"] = {
},
["Desc"] = "Show a castbar for the aura duration.",
["Enabled"] = true,
["Revision"] = 32,
["Options"] = {
},
["version"] = -1,
["Prio"] = 99,
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local auraDuration = envTable._Duration\n    local altCastId = 1\n    \n    ---@class plater_altcastbarconfig : table\n    ---@field iconTexture string\n    ---@field iconTexcoord table\n    ---@field iconAlpha number\n    ---@field text string\n    ---@field texture any\n    ---@field color any\n    ---@field isChanneling boolean\n    ---@field canInterrupt boolean\n    ---@field height number\n    ---@field iconSize number\n    ---@field textSize number\n    ---@field spellNameAnchor df_anchor\n    ---@field timerAnchor df_anchor\n    ---@field iconAnchor df_anchor\n    \n    local configTable = {\n        iconTexture = envTable._Texture,\n        text = envTable._SpellName,\n        color = \"gray\",\n        isChanneling = true,\n        canInterrupt = false,\n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        \n    }\n    \n    Plater.SetAltCastBar(unitFrame.PlateFrame, configTable, auraDuration, envTable._StartTime, altCastId)\n    \nend\n\n\n",
["Name"] = "Aura - Is Cast Bar [P]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
438494,
335141,
},
["PlaterCore"] = 1,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\aura_castbar.png",
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --save current cast bar color before changing it later\n    envTable.OldCastbarColor = unitFrame.castBar:GetColor()\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.ActorType == \"enemyplayer\" or unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"friendlynpc\" ) then\n        return\n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    --set color back to what it was before\n    unitFrame.castBar:SetColor(Plater:ParseColors(envTable.OldCastbarColor))\n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
["interruptSoundToggle"] = false,
["castbarColor"] = {
1,
0.4313725829124451,
0,
1,
},
["interruptSound"] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (unitFrame.ActorType == \"enemyplayer\" or unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"friendlynpc\" ) then\n        return\n    end\n    \n    if scriptTable.config.interruptSoundToggle then\n        PlaySoundFile(scriptTable.config.interruptSound, \"Master\")\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    --Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    unitFrame.castBar:SetColor(Plater:ParseColors(scriptTable.config.castbarColor))\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1755077802,
["Enabled"] = true,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --save current cast bar color before changing it later\n    envTable.OldCastbarColor = unitFrame.castBar:GetColor()\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["NpcNames"] = {
},
["semver"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.ActorType == \"enemyplayer\" or unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"friendlynpc\" ) then\n        return\n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    --set color back to what it was before\n    unitFrame.castBar:SetColor(Plater:ParseColors(envTable.OldCastbarColor))\n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["Revision"] = 2024,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Play Sound On Spell Cast",
["Value"] = false,
["Key"] = "interruptSoundToggle",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Plays \"Interrupt\" Sound When Spell Casted",
},
{
["Type"] = 8,
["Name"] = "Choose Sound",
["Value"] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
["Key"] = "interruptSound",
["Icon"] = "Interface\\AddOns\\Plater\\images\\options_audio_dropdown.png",
["Desc"] = "Choose The Sound Played",
},
{
["Type"] = 6,
["Name"] = "blank space",
["Value"] = 0,
["Key"] = "option11",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (unitFrame.ActorType == \"enemyplayer\" or unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"friendlynpc\" ) then\n        return\n    end\n    \n    if scriptTable.config.interruptSoundToggle then\n        PlaySoundFile(scriptTable.config.interruptSound, \"Master\")\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    --Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    unitFrame.castBar:SetColor(Plater:ParseColors(scriptTable.config.castbarColor))\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Prio"] = 99,
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Name"] = "Quazii MUST INTERRUPT",
["PlaterCore"] = 1,
["SpellIds"] = {
387955,
387615,
387606,
225100,
211401,
211470,
192563,
152818,
156776,
398206,
153524,
396073,
396018,
345202,
263365,
395859,
395872,
397914,
209410,
392924,
153395,
265089,
278755,
266106,
272183,
265523,
202181,
374080,
400386,
209413,
207980,
257397,
257736,
382787,
369602,
369465,
381593,
265091,
265433,
382791,
376780,
257784,
88010,
410870,
266209,
342797,
413044,
204243,
279118,
255041,
259572,
200630,
225562,
201399,
264390,
265346,
263959,
278444,
265876,
264407,
266225,
415770,
415437,
412922,
417481,
418200,
411300,
412378,
412233,
407891,
416139,
227913,
164965,
164887,
168082,
427460,
429176,
271174,
165213,
169839,
413607,
388392,
388863,
396640,
377389,
387975,
387564,
375596,
386546,
384365,
386025,
386024,
386015,
387125,
387411,
387596,
384808,
373395,
397394,
372743,
384194,
373017,
367500,
367503,
377950,
372711,
374544,
385029,
384633,
374339,
374045,
395694,
374563,
374699,
376171,
377341,
377402,
395427,
372223,
384161,
378282,
369675,
369365,
369411,
436841,
392451,
434802,
434793,
436322,
448248,
448047,
433841,
443430,
443433,
442536,
452162,
453840,
431309,
451097,
431333,
429545,
445207,
429109,
322938,
324914,
326046,
340544,
337235,
322450,
335143,
324293,
327130,
256957,
275826,
272571,
454440,
451871,
76711,
324776,
427356,
432959,
426145,
427157,
338353,
442210,
449455,
377488,
386549,
1214468,
1214780,
462771,
471733,
428019,
425536,
424322,
426295,
422541,
427176,
424420,
424419,
444743,
441627,
440687,
341902,
330868,
342675,
341969,
341977,
280604,
269302,
263202,
271579,
268702,
293729,
301088,
441351,
268797,
437721,
463058,
465595,
430109,
326450,
325700,
314488,
1229510,
355934,
355642,
350922,
357260,
357284,
351119,
423051,
325701,
355057,
},
["Icon"] = 1305153,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1754311039,
["semver"] = "",
["url"] = "",
["NpcNames"] = {
},
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["Enabled"] = true,
["Revision"] = 1038,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 0.73,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Key"] = "animSpeed",
["Value"] = 0.2,
["Name"] = "Animation Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 4,
["Name"] = "Use White Arrow",
["Value"] = false,
["Key"] = "desaturateArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
},
["Name"] = "Quazii FRONTALS",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["version"] = -1,
["Prio"] = 67,
["SpellIds"] = {
388623,
384699,
153501,
153686,
154442,
192018,
219488,
387067,
391136,
382233,
209027,
212031,
207261,
207979,
198888,
199050,
191508,
152792,
265540,
226304,
375327,
372202,
209495,
260894,
226406,
193505,
375348,
257426,
255952,
257870,
413147,
383107,
377559,
390111,
369791,
369335,
375727,
265016,
265019,
260793,
260292,
272457,
272609,
269843,
183465,
226296,
188169,
183088,
410873,
411012,
88308,
373742,
374533,
377204,
204667,
255567,
201226,
200768,
265372,
413529,
408141,
412215,
412129,
412505,
419351,
200261,
200345,
197974,
200913,
164357,
169179,
426645,
428293,
169929,
388976,
385958,
377383,
377034,
374361,
370764,
386660,
391118,
372222,
385578,
384696,
384868,
387629,
382277,
376892,
375943,
376683,
372087,
391726,
391723,
381525,
388060,
376170,
393432,
384524,
375351,
382708,
375251,
375439,
372311,
372201,
369563,
369573,
369409,
369061,
382712,
434824,
453161,
443500,
434779,
451496,
451543,
439621,
440218,
431494,
450854,
449130,
448640,
321968,
331718,
340160,
324323,
333488,
333477,
256627,
269029,
257862,
462216,
447395,
448105,
432198,
441119,
448619,
449090,
427323,
422414,
425027,
340300,
427025,
257288,
268260,
426261,
321834,
427869,
465754,
472452,
465682,
1217653,
459779,
473114,
1217496,
421910,
421277,
447270,
436592,
426893,
1214315,
424958,
451843,
1214546,
445457,
317231,
320729,
333294,
330614,
323608,
339706,
267551,
1217294,
275907,
259940,
283422,
293986,
291865,
466124,
468813,
473220,
332708,
1215738,
474087,
426260,
322711,
323236,
323143,
1226111,
1235368,
1227900,
1227918,
352390,
199805,
355577,
347149,
1236348,
326997,
},
["PlaterCore"] = 1,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["Icon"] = 1958262,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1741042861,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_tankbuster.png",
["Enabled"] = false,
["Revision"] = 1285,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Abilities casted on the tank.",
["SpellIds"] = {
280604,
1215411,
1215065,
331316,
320644,
330586,
323515,
324079,
434773,
432229,
439031,
473351,
459799,
469478,
465666,
466190,
448485,
424414,
448515,
},
["Name"] = "Cast - Tankbuster [P]",
["PlaterCore"] = 1,
["version"] = -1,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --don't execute if the player is not the tank\n    if (not Plater.IsPlayerTank()) then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.1098039299249649,
0.1137254983186722,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.1,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 0,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.1,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 2,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 10,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
},
["NpcNames"] = {
},
},
},
["npcs_renamed"] = {
[214840] = "Crawler Poison",
[216336] = "Jump Crawler",
[219221] = "Jump Crawler",
[216341] = "Flyer Bleed",
},
["blizzard_nameplate_large_font"] = "Quazii",
["saved_cvars_last_change"] = {
["ShowClassColorInNameplate"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateOverlapV"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["ShowNamePlateLoseAggroFlash"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateShowEnemyMinus"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["NamePlateClassificationScale"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateShowFriendlyTotems"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplatePersonalHideDelaySeconds"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateShowFriendlyPets"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplatePersonalShowInCombat"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplatePersonalShowWithTarget"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateMinAlpha"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateResourceOnTarget"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateShowAll"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateMaxDistance"] = "...ler/libs/CallbackHandler-1.0/CallbackHandler-1.0.lua:109",
["nameplateShowFriendlyMinions"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateSelfScale"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateTargetBehindMaxDistance"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["SoftTargetInteract"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateShowEnemies"] = "[C]: ?\n[C]: in function 'SetCVar'\n[Interface/AddOns/Blizzard_SharedXMLBase/CvarUtil.lua]:76: in function 'SetValue'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua]:264: in function 'SetValueDerived'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua]:110: in function 'ApplyValue'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua]:86: in function 'SetValue'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Settings.lua]:224: in function 'SetValue'\n[NAMEPLATES]:6: in function <[string \"NAMEPLATES\"]:1>\n",
["NamePlateVerticalScale"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateSelectedAlpha"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateShowSelf"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateShowPersonalCooldowns"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateSelfTopInset"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateMotionSpeed"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateGlobalScale"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateShowEnemyMinions"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateShowFriendlyNPCs"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateSelectedScale"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateMinAlphaDistance"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateMotion"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateShowFriendlyBuffs"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateMinScale"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplatePersonalShowAlways"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateOtherTopInset"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["NamePlateHorizontalScale"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateSelfBottomInset"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateSelfAlpha"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateShowFriendlyGuardians"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateOccludedAlphaMult"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateShowOnlyNames"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateTargetRadialPosition"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
["nameplateShowFriends"] = "[C]: ?\n[C]: in function 'SetCVar'\n[Interface/AddOns/Blizzard_SharedXMLBase/CvarUtil.lua]:76: in function 'SetValue'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua]:264: in function 'SetValueDerived'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua]:110: in function 'ApplyValue'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua]:86: in function 'SetValue'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Settings.lua]:224: in function 'SetValue'\n[FRIENDNAMEPLATES]:3: in function <[string \"FRIENDNAMEPLATES\"]:1>\n",
["nameplateLargeTopInset"] = "Interface/AddOns/QuaziiUI/utils/addons/plater.lua:6",
},
["url"] = "https://wago.io/kvgdjO6_L/3",
["hover_highlight_alpha"] = 0.29999998211861,
["cast_statusbar_fadein_time"] = 0.02081192471087,
["target_shady_enabled"] = false,
["cast_statusbar_spark_alpha"] = 0.7199999690055847,
["aura2_y_offset"] = 0,
["extra_icon_caster_size"] = 10,
["buffs_on_aura2"] = true,
["plate_config"] = {
["player"] = {
["actorname_text_font"] = "Accidental Presidency",
["percent_text_font"] = "Quazii",
["spellpercent_text_font"] = "Quazii",
["power_percent_text_color"] = {
1,
1,
1,
},
["big_actortitle_text_font"] = "Accidental Presidency",
["click_through"] = true,
["power_percent_text_font"] = "Quazii",
["power_percent_text_size"] = 10,
["big_actorname_text_font"] = "Accidental Presidency",
["spellname_text_font"] = "Quazii",
["level_text_font"] = "Accidental Presidency",
["power_percent_text_enabled"] = false,
},
["friendlyplayer"] = {
["big_actorname_text_size"] = 10,
["spellpercent_text_font"] = "Quazii",
["actorname_use_class_color"] = true,
["big_actortitle_text_font"] = "Accidental Presidency",
["cast"] = {
120,
1,
},
["percent_text_ooc"] = true,
["big_actortitle_text_size"] = 10,
["spellpercent_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["level_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["big_actortitle_text_shadow_color_offset"] = {
1,
-1,
},
["cast_incombat"] = {
120,
1,
},
["big_actorname_text_shadow_color"] = {
0,
0,
0,
1,
},
["spellpercent_text_outline"] = "NONE",
["big_actortitle_text_shadow_color"] = {
0,
0,
0,
1,
},
["percent_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["level_text_font"] = "Quazii",
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["big_actorname_text_outline"] = "OUTLINE",
["big_actorname_text_shadow_color_offset"] = {
1,
-1,
},
["quest_color_enemy"] = {
1,
0.369,
0,
},
["quest_color_neutral"] = {
1,
0.65,
0,
},
["mana_incombat"] = {
nil,
4,
},
["percent_show_health"] = true,
["big_actorname_text_font"] = "Accidental Presidency",
["actorname_use_guild_color"] = false,
["all_names"] = true,
["percent_text_outline"] = "NONE",
["spellpercent_text_enabled"] = true,
["power_percent_text_font"] = "Accidental Presidency",
["actorname_use_friends_color"] = false,
["actorname_text_anchor"] = {
["y"] = -3,
["x"] = -1,
["side"] = 1,
},
["level_text_alpha"] = 0.2999999821186066,
["big_actortitle_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 9,
["only_damaged"] = false,
["buff_frame_y_offset"] = 0,
["percent_text_enabled"] = true,
["quest_enabled"] = true,
["actorname_text_font"] = "Quazii",
["percent_text_font"] = "Quazii",
["percent_text_size"] = 10,
["health_incombat"] = {
120,
14,
},
["health"] = {
120,
14,
},
["mana"] = {
nil,
4,
},
["spellname_text_font"] = "Quazii",
["spellname_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["only_thename"] = true,
["level_text_enabled"] = true,
},
["friendlynpc"] = {
["big_actorname_text_size"] = 10,
["spellpercent_text_font"] = "Quazii",
["big_actortitle_text_font"] = "Quazii",
["cast"] = {
120,
1,
},
["percent_text_ooc"] = true,
["big_actortitle_text_size"] = 10,
["spellpercent_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["enabled"] = false,
["level_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["cast_incombat"] = {
nil,
1,
},
["spellpercent_text_outline"] = "NONE",
["percent_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["level_text_font"] = "Quazii",
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["only_names"] = false,
["quest_color_neutral"] = {
1,
0.65,
0,
},
["percent_text_enabled"] = true,
["actorname_text_outline"] = "OUTLINE",
["actorname_text_anchor"] = {
["y"] = -3,
["x"] = -1,
["side"] = 1,
},
["percent_text_size"] = 10,
["actorname_text_spacing"] = 9,
["percent_text_font"] = "Quazii",
["quest_color_enemy"] = {
1,
0.369,
0,
},
["level_text_alpha"] = 0.2999999821186066,
["percent_text_outline"] = "NONE",
["power_percent_text_font"] = "Accidental Presidency",
["spellpercent_text_enabled"] = true,
["percent_show_health"] = true,
["health_incombat"] = {
100,
14,
},
["health"] = {
100,
14,
},
["big_actorname_text_font"] = "Quazii",
["actorname_text_font"] = "Quazii",
["spellname_text_font"] = "Quazii",
["spellname_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["level_text_enabled"] = true,
},
["enemynpc"] = {
["spellpercent_text_font"] = "Quazii",
["level_text_size"] = 10,
["big_actortitle_text_font"] = "Quazii",
["cast"] = {
120,
8,
},
["spellpercent_text_size"] = 10,
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_anchor"] = {
["y"] = -0.8000030517578125,
["x"] = 3.899993896484375,
["side"] = 5,
},
["level_text_anchor"] = {
["y"] = 100,
["x"] = 1,
["side"] = 5,
},
["cast_incombat"] = {
nil,
8,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["y"] = 0.09999847412109375,
["x"] = -0.8000030517578125,
["side"] = 3,
},
["percent_text_anchor"] = {
["y"] = 12.29999542236328,
["x"] = 0.5999984741210938,
["side"] = 5,
},
["level_text_font"] = "Quazii",
["actorname_text_font"] = "Quazii",
["actorname_text_size"] = 10,
["power_percent_text_font"] = "Accidental Presidency",
["actorname_text_outline"] = "OUTLINE",
["level_text_alpha"] = 0.2999999821186066,
["percent_text_size"] = 10,
["actorname_text_spacing"] = 9,
["percent_text_font"] = "Quazii",
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_show_health"] = false,
["spellname_text_size"] = 10,
["actorname_text_anchor"] = {
["y"] = 12.29999542236328,
["x"] = 1.599998474121094,
["side"] = 3,
},
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
nil,
14,
},
["health"] = {
120,
14,
},
["big_actorname_text_font"] = "Quazii",
["spellname_text_font"] = "Quazii",
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["percent_text_show_decimals"] = false,
["level_text_enabled"] = false,
},
["global_health_width"] = 120,
["enemyplayer"] = {
["big_actorname_text_size"] = 10,
["spellpercent_text_font"] = "Quazii",
["big_actortitle_text_font"] = "Accidental Presidency",
["cast"] = {
120,
8,
},
["big_actortitle_text_size"] = 10,
["spellpercent_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["percent_text_show_decimals"] = false,
["cast_incombat"] = {
nil,
8,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_outline"] = "NONE",
["percent_text_anchor"] = {
["y"] = 4.649993896484375,
["side"] = 5,
},
["level_text_font"] = "Quazii",
["actorname_text_font"] = "Quazii",
["quest_color_neutral"] = {
1,
0.65,
0,
1,
},
["mana_incombat"] = {
120,
1,
},
["power_percent_text_font"] = "Accidental Presidency",
["quest_color_enemy"] = {
1,
0.369,
0,
1,
},
["all_names"] = true,
["level_text_alpha"] = 0.2999999821186066,
["quest_color_enabled"] = true,
["percent_show_percent"] = false,
["actorname_text_outline"] = "OUTLINE",
["actorname_text_anchor"] = {
["y"] = -0.4000015258789063,
["x"] = -1,
["side"] = 1,
},
["percent_show_health"] = false,
["percent_text_size"] = 10,
["actorname_text_spacing"] = 9,
["percent_text_font"] = "Quazii",
["actorname_text_size"] = 10,
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["quest_enabled"] = true,
["big_actorname_text_font"] = "Accidental Presidency",
["mana"] = {
120,
1,
},
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
nil,
14,
},
["health"] = {
120,
14,
},
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["spellname_text_font"] = "Quazii",
["spellname_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["level_text_anchor"] = {
["y"] = 100,
["x"] = 1,
["side"] = 5,
},
["level_text_enabled"] = false,
},
["global_health_height"] = 14,
},
["health_selection_overlay"] = "Quazii",
["aura_y_offset"] = 2,
["use_ui_parent"] = true,
["expansion_triggerwipe"] = {
[9] = true,
[10] = true,
},
["cast_statusbar_color_nointerrupt"] = {
0.49411764705882,
0.49803921568628,
0.50196078431373,
0.96000000089407,
},
["first_run2"] = true,
["bossmod_support_bars_enabled"] = false,
["color_override_colors"] = {
[3] = {
nil,
0.2784313,
0.2078431,
},
[4] = {
1,
0.83921568627451,
0,
},
[5] = {
0.29019607843137,
1,
0.19607843137255,
},
},
["aura_show_tooltip"] = true,
["resources_settings"] = {
["chr"] = {
["Player-3725-0C1533F1"] = "ComboPoints",
["Player-5764-000264AF"] = "ComboPoints",
["Player-3725-0C1632F3"] = "HolyPower",
["Player-4609-0014BD91"] = "SoulShards",
["Player-4609-0014B9A9"] = "ArcaneCharges",
["Player-11-0E6B493E"] = "ComboPoints",
["Player-5764-000166DE"] = "HolyPower",
["Player-3725-0C16E871"] = "HolyPower",
["Player-3725-0AA8E1EF"] = "Runes",
["Player-4184-00C4D942"] = "SoulShards",
["Player-11-0EA1AB9D"] = "Chi",
["Player-5764-0002671B"] = "HolyPower",
["Player-5765-003F0A23"] = "ComboPoints",
["Player-11-0E532B0D"] = "Chi",
["Player-11-0E93F38F"] = "HolyPower",
["Player-5765-003F0A0E"] = "Chi",
["Player-4184-009493C8"] = "Runes",
["Player-11-0E532B17"] = "ComboPoints",
["Player-4184-00949549"] = "ComboPoints",
["Player-4184-003D46E0"] = "Chi",
["Player-1329-0625A67D"] = "ComboPoints",
["Player-4609-0014B1DA"] = "ComboPoints",
["Player-5765-003F0A27"] = "Runes",
["Player-4609-0014C179"] = "HolyPower",
["Player-3725-0C194479"] = "Essence",
["Player-11-0E532B60"] = "Runes",
["Player-5764-000944AE"] = "Chi",
["Player-4184-00949207"] = "HolyPower",
["Player-4184-00948CDA"] = "Chi",
["Player-4184-00C5DED9"] = "ComboPoints",
["Player-11-0E532B15"] = "HolyPower",
["Player-5765-003F0A3C"] = "HolyPower",
["Player-3296-009336A2"] = "HolyPower",
["Player-4609-0014B1D9"] = "Essence",
["Player-3725-0A9FE377"] = "Chi",
},
},
["health_animation_time_dilatation"] = 2.869999885559082,
["npc_cache"] = {
[134139] = {
"Shrine Templar",
"Shrine of the Storm",
},
[196798] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
},
[216363] = {
"Reinforced Drone",
"Ara-Kara, City of Echoes",
"enUS",
},
[216619] = {
"Orator Krix'vizk",
"City of Threads",
"enUS",
},
[213806] = {
"Splotch",
"Throne of the Tides",
"enUS",
},
[213934] = {
"Nightfall Tactician",
"The Dawnbreaker",
"enUS",
},
[196671] = {
"Arcane Ravager",
"Algeth'ar Academy",
"enUS",
},
[180431] = {
"Focused Ritualist",
"Tazavesh, the Veiled Market",
"enUS",
},
[216364] = {
"Blood Overseer",
"Ara-Kara, City of Echoes",
"enUS",
},
[244113] = {
"Shadowguard Soulbreaker",
"Fungal Folly",
"enUS",
},
[195265] = {
"Stormcaller Arynga",
"The Nokhud Offensive",
"enUS",
},
[248589] = {
"Nullbinder",
"Manaforge Omega",
"enUS",
},
[180432] = {
"Devoted Accomplice",
"Tazavesh, the Veiled Market",
"enUS",
},
[216365] = {
"Winged Carrier",
"Ara-Kara, City of Echoes",
"enUS",
},
[217516] = {
"Nightfall Executor",
"Nightfall Sanctum",
"enUS",
},
[173655] = {
"Mistveil Matriarch",
"Mists of Tirna Scithe",
"enUS",
},
[173016] = {
"Corpse Collector",
"The Necrotic Wake",
"enUS",
},
[201788] = {
"Dazhak",
"Dawn of the Infinite",
"enUS",
},
[229537] = {
"Void Emissary",
"The Stonevault",
"enUS",
},
[231839] = {
"Scrapmaster",
"Liberation of Undermine",
"enUS",
},
[120651] = {
"Explosives",
"Court of Stars",
},
[212786] = {
"Cursed Stormrider",
"The Rookery",
"enUS",
},
[213937] = {
"Rasha'nan",
"The Dawnbreaker",
"enUS",
},
[197697] = {
"Flamegullet",
"Ruby Life Pools",
"enUS",
},
[178388] = {
"Bazaar Strongarm",
"Tazavesh, the Veiled Market",
"enUS",
},
[40633] = {
"Naz'jar Honor Guard",
"Throne of the Tides",
"enUS",
},
[135167] = {
"Spectral Berserker",
"Kings' Rest",
},
[214066] = {
"Cursedforge Stoneshaper",
"The Stonevault",
"enUS",
},
[235805] = {
"Shadowguard Darkmage",
"Manaforge Omega",
"enUS",
},
[131587] = {
"Bewitched Captain",
"Waycrest Manor",
},
[241304] = {
"Shadowguard Infuser",
"Manaforge Omega",
"enUS",
},
[126918] = {
"Irontide Crackshot",
"Freehold",
},
[196548] = {
"Ancient Branch",
"Algeth'ar Academy",
"enUS",
},
[135552] = {
"Deathtouched Slaver",
"Waycrest Manor",
"enUS",
},
[218671] = {
"Venture Co. Pyromaniac",
"Cinderbrew Meadery",
"enUS",
},
[236190] = {
"Frenzied Mite",
"Eco-Dome Al'dani",
"enUS",
},
[186191] = {
"Decay Speaker",
"Brackenhide Hollow",
"enUS",
},
[206140] = {
"Coalesced Time",
"Dawn of the Infinite",
"enUS",
},
[234912] = {
"Ravaging Scavenger",
"Eco-Dome Al'dani",
"enUS",
},
[208698] = {
"Infinite Riftmage",
"Dawn of the Infinite",
"enUS",
},
[221102] = {
"Elder Shadeweaver",
"City of Threads",
"enUS",
},
[127111] = {
"Irontide Oarsman",
"Freehold",
},
[248084] = {
"Pactsworn Sandreaver",
"Skittering Breach",
"enUS",
},
[168418] = {
"Forsworn Inquisitor",
"Spires of Ascension",
},
[232228] = {
"Waterworks Bottomfeeder",
"Operation: Floodgate",
"enUS",
},
[213942] = {
"Sludge",
"Throne of the Tides",
"enUS",
},
[199748] = {
"Timeline Marauder",
"Dawn of the Infinite",
"enUS",
},
[165222] = {
"Zolramus Bonemender",
"The Necrotic Wake",
"enUS",
},
[242587] = {
"Living Mass",
"Manaforge Omega",
"enUS",
},
[199749] = {
"Timestream Anomaly",
"Dawn of the Infinite",
"enUS",
},
[178394] = {
"Cartel Lackey",
"Tazavesh, the Veiled Market",
"enUS",
},
[168420] = {
"Forsworn Champion",
"Spires of Ascension",
},
[212793] = {
"Void Ascendant",
"The Rookery",
"enUS",
},
[134150] = {
"Runecarver Sorn",
"Shrine of the Storm",
},
[187602] = {
"Qalashi Scaleripper",
"10.0 Dragon Isles",
},
[177500] = {
"Corsair Brute",
"Tazavesh, the Veiled Market",
"enUS",
},
[184022] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
"enUS",
},
[128967] = {
"Ashvane Sniper",
"Siege of Boralus",
"enUS",
},
[242589] = {
"Void Manifestation",
"Manaforge Omega",
"enUS",
},
[210109] = {
"Earth Infused Golem",
"The Stonevault",
"enUS",
},
[212411] = {
"Torchsnarl",
"Darkflame Cleft",
"enUS",
},
[184023] = {
"Vicious Basilisk",
"Uldaman: Legacy of Tyr",
"enUS",
},
[134024] = {
"Devouring Maggot",
"Waycrest Manor",
"enUS",
},
[178141] = {
"Murkbrine Scalebinder",
"Tazavesh, the Veiled Market",
"enUS",
},
[213179] = {
"Avanoxx",
"Ara-Kara, City of Echoes",
"enUS",
},
[211261] = {
"Ascendant Vis'coxria",
"The Dawnbreaker",
"enUS",
},
[212412] = {
"Sootsnout",
"Darkflame Cleft",
"enUS",
},
[83892] = {
"Life Warden Gola",
"The Everbloom",
},
[178142] = {
"Murkbrine Fishmancer",
"Tazavesh, the Veiled Market",
"enUS",
},
[98406] = {
"Embershard Scorpion",
"Neltharion's Lair",
},
[137478] = {
"Queen Wasi",
"Kings' Rest",
},
[132491] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[196045] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
"enUS",
},
[135049] = {
"Dreadwing Raven",
"Waycrest Manor",
"enUS",
},
[211263] = {
"Deathscreamer Iken'tak",
"The Dawnbreaker",
"enUS",
},
[164461] = {
"Sathel the Accursed",
"Theater of Pain",
"enUS",
},
[83893] = {
"Earthshaper Telu",
"The Everbloom",
},
[128969] = {
"Ashvane Commander",
"Siege of Boralus",
"enUS",
},
[99366] = {
"Taintheart Summoner",
"Darkheart Thicket",
"enUS",
},
[207939] = {
"Baron Braunpyke",
"Priory of the Sacred Flame",
"enUS",
},
[220599] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[217658] = {
"Sir Braunpyke",
"Priory of the Sacred Flame",
"enUS",
},
[244384] = {
"Captain Nil'hitan",
"Archival Assault",
"enUS",
},
[150396] = {
"Aerial Unit R-21/X",
"Operation: Mechagon",
"enUS",
},
[207940] = {
"Prioress Murrpray",
"Priory of the Sacred Flame",
"enUS",
},
[223541] = {
"Stolen Loader",
"Mycomancer Cavern",
"enUS",
},
[217531] = {
"Ixin",
"Ara-Kara, City of Echoes",
"enUS",
},
[167532] = {
"Heavin the Breaker",
"Theater of Pain",
"enUS",
},
[98280] = {
"Risen Arcanist",
"Black Rook Hold",
"enUS",
},
[225204] = {
"Zekvir",
"Zekvir's Lair",
"enUS",
},
[205384] = {
"Infinite Chronoweaver",
"Dawn of the Infinite",
"enUS",
},
[212673] = {
"Naz'jar Ravager",
"Throne of the Tides",
"enUS",
},
[136076] = {
"Agitated Nimbus",
"Temple of Sethraliss",
},
[134158] = {
"Shadow-Borne Champion",
"Kings' Rest",
},
[128651] = {
"Hadal Darkfathom",
"Siege of Boralus",
"enUS",
},
[217533] = {
"Atik",
"Ara-Kara, City of Echoes",
"enUS",
},
[220730] = {
"Royal Venomshell",
"City of Threads",
"enUS",
},
[165872] = {
"Flesh Crafter",
"The Necrotic Wake",
"enUS",
},
[207943] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[214209] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
"enUS",
},
[129227] = {
"Azerokk",
"The MOTHERLODE!!",
"enUS",
},
[131858] = {
"Thornguard",
"Waycrest Manor",
},
[129547] = {
"Blacktooth Knuckleduster",
"Freehold",
},
[45912] = {
"Wild Vortex",
"The Vortex Pinnacle",
},
[214338] = {
"Kobyss Spearfisher",
"Tak-Rethan Abyss",
"enUS",
},
[127757] = {
"Reanimated Honor Guard",
"Atal'Dazar",
},
[208456] = {
"Shuffling Horror",
"Darkflame Cleft",
"enUS",
},
[245412] = {
"Voracious Gorger",
"Eco-Dome Al'dani",
"enUS",
},
[189531] = {
"Decayed Elder",
"Brackenhide Hollow",
"enUS",
},
[137486] = {
"Queen Patlaa",
"Kings' Rest",
},
[219454] = {
"Crazed Abomination",
"The Underkeep",
"enUS",
},
[137103] = {
"Blood Visage",
"The Underrot",
},
[207946] = {
"Captain Dailcry",
"Priory of the Sacred Flame",
"enUS",
},
[162039] = {
"Wicked Oppressor",
"Sanguine Depths",
},
[75713] = {
"Shadowmoon Bone-Mender",
"Shadowmoon Burial Grounds",
},
[134144] = {
"Living Current",
"Shrine of the Storm",
},
[138255] = {
"Ashvane Spotter",
"Siege of Boralus",
"enUS",
},
[175576] = {
"Containment Cell",
"Tazavesh, the Veiled Market",
"enUS",
},
[162040] = {
"Grand Overseer",
"Sanguine Depths",
},
[195927] = {
"Soulharvester Galtmaa",
"The Nokhud Offensive",
"enUS",
},
[189265] = {
"Qalashi Bonetender",
"Neltharus",
"enUS",
},
[181861] = {
"Magmatusk",
"Neltharus",
"enUS",
},
[217517] = {
"Nightfall Hopestealer",
"Nightfall Sanctum",
"enUS",
},
[196043] = {
"Primalist Infuser",
"Halls of Infusion",
"enUS",
},
[180429] = {
"Adorned Starseer",
"Tazavesh, the Veiled Market",
"enUS",
},
[151657] = {
"Bomb Tonk",
"Operation: Mechagon",
"enUS",
},
[190403] = {
"Glacial Proto-Dragon",
"Halls of Infusion",
"enUS",
},
[195928] = {
"Soulharvester Duuren",
"The Nokhud Offensive",
"enUS",
},
[244137] = {
"Shadowguard Arcanotech",
"Fungal Folly",
"enUS",
},
[217268] = {
"Weeping Shade",
"Nightfall Sanctum",
"enUS",
},
[97197] = {
"Valarjar Purifier",
"Halls of Valor",
},
[126928] = {
"Irontide Corsair",
"Freehold",
},
[223423] = {
"Careless Hopgoblin",
"Cinderbrew Meadery",
"enUS",
},
[203857] = {
"Horde Warlock",
"Dawn of the Infinite",
"enUS",
},
[228537] = {
"Nightfall Shadowalker",
"The Dawnbreaker",
"enUS",
},
[195929] = {
"Soulharvester Tumen",
"The Nokhud Offensive",
"enUS",
},
[244138] = {
"Shadeye Observer",
"Fungal Folly",
"enUS",
},
[221760] = {
"Risen Mage",
"Priory of the Sacred Flame",
"enUS",
},
[131864] = {
"Gorak Tul",
"Waycrest Manor",
"enUS",
},
[231223] = {
"Disturbed Kelp",
"Operation: Floodgate",
"enUS",
},
[186339] = {
"Teera",
"The Nokhud Offensive",
"enUS",
},
[104295] = {
"Blazing Imp",
"Court of Stars",
},
[228538] = {
"Nightfall Curseblade",
"The Dawnbreaker",
"enUS",
},
[195930] = {
"Soulharvester Mandakh",
"The Nokhud Offensive",
"enUS",
},
[217541] = {
"Nightfall Initiate",
"Nightfall Sanctum",
"enUS",
},
[213577] = {
"Spitfire Charger",
"Kriegval's Rest",
"enUS",
},
[128455] = {
"T'lonja",
"Atal'Dazar",
"enUS",
},
[193373] = {
"Nokhud Thunderfist",
"The Nokhud Offensive",
"enUS",
},
[244140] = {
"Shadowguard Steelsoul",
"Fungal Folly",
"enUS",
},
[184422] = {
"Emberon",
"Uldaman: Legacy of Tyr",
"enUS",
},
[228539] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[164218] = {
"Lord Chamberlain",
"Halls of Atonement",
"enUS",
},
[234933] = {
"Taah'bat",
"Eco-Dome Al'dani",
"enUS",
},
[177237] = {
"Chains of Damnation",
"Tazavesh, the Veiled Market",
"enUS",
},
[133912] = {
"Bloodsworn Defiler",
"The Underrot",
},
[240935] = {
"Nascent Shadowguard",
"Manaforge Omega",
"enUS",
},
[136214] = {
"Windspeaker Heldis",
"Shrine of the Storm",
},
[84400] = {
"Flourishing Ancient",
"The Everbloom",
"enUS",
},
[136470] = {
"Refreshment Vendor",
"The MOTHERLODE!!",
"enUS",
},
[229691] = {
"Swarmbot",
"Awakening The Machine",
"enUS",
},
[229296] = {
"Orb of Ascendance",
"Tazavesh, the Veiled Market",
"enUS",
},
[90997] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[180567] = {
"Frenzied Nightclaw",
"Tazavesh, the Veiled Market",
"enUS",
},
[205363] = {
"Time-Lost Waveshaper",
"Dawn of the Infinite",
"enUS",
},
[245411] = {
"Ravaging Scavenger",
"Eco-Dome Al'dani",
"enUS",
},
[178392] = {
"Gatewarden Zo'mazz",
"Tazavesh, the Veiled Market",
"enUS",
},
[190294] = {
"Nokhud Stormcaster",
"The Nokhud Offensive",
"enUS",
},
[179821] = {
"Commander Zo'far",
"Tazavesh, the Veiled Market",
"enUS",
},
[234935] = {
"Soul-Scribe",
"Eco-Dome Al'dani",
"enUS",
},
[216649] = {
"Vx",
"City of Threads",
"enUS",
},
[211140] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[228144] = {
"Darkfuse Soldier",
"Operation: Floodgate",
"enUS",
},
[173044] = {
"Stitching Assistant",
"The Necrotic Wake",
"enUS",
},
[234041] = {
"Forge Sentinel",
"Manaforge Omega",
"enUS",
},
[40320] = {
"Valiona",
"Grim Batol",
"enUS",
},
[225601] = {
"Mereldar Citizen",
"The Dawnbreaker",
"enUS",
},
[223776] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[90998] = {
"Blightshard Shaper",
"Neltharion's Lair",
},
[224962] = {
"Cursedforge Mender",
"The Stonevault",
"enUS",
},
[237861] = {
"Fractillus",
"Manaforge Omega",
"enUS",
},
[180433] = {
"Wandering Pulsar",
"Tazavesh, the Veiled Market",
"enUS",
},
[168058] = {
"Infused Quill-feather",
"Sanguine Depths",
},
[245414] = {
"Invading Mite",
"Eco-Dome Al'dani",
"enUS",
},
[105704] = {
"Arcane Manifestation",
"Court of Stars",
},
[236072] = {
"Unbound Entity",
"Manaforge Omega",
"enUS",
},
[127315] = {
"Reanimation Totem",
"Atal'Dazar",
},
[194894] = {
"Primalist Stormspeaker",
"The Nokhud Offensive",
"enUS",
},
[174197] = {
"Battlefield Ritualist",
"Theater of Pain",
"enUS",
},
[129553] = {
"Dinomancer Kish'o",
"Atal'Dazar",
"enUS",
},
[180335] = {
"Cartel Smuggler",
"Tazavesh, the Veiled Market",
"enUS",
},
[237872] = {
"Unbound Mage",
"Manaforge Omega",
"enUS",
},
[214350] = {
"Turned Speaker",
"The Stonevault",
"enUS",
},
[168443] = {
"Zolramus Necromancer",
"The Necrotic Wake",
},
[241832] = {
"Shielded Attendant",
"Manaforge Omega",
"enUS",
},
[244755] = {
"Nexus-Princess Ky'veza",
"The Waterworks",
"enUS",
},
[84989] = {
"Infested Icecaller",
"The Everbloom",
},
[196576] = {
"Spellbound Scepter",
"Algeth'ar Academy",
"enUS",
},
[180336] = {
"Cartel Wiseguy",
"Tazavesh, the Veiled Market",
"enUS",
},
[229695] = {
"Corrupted Machinist",
"Awakening The Machine",
"enUS",
},
[228540] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[170490] = {
"Atal'ai High Priest",
"De Other Side",
},
[168572] = {
"Fungi Stormer",
"Plaguefall",
},
[81522] = {
"Witherbark",
"The Everbloom",
"enUS",
},
[178163] = {
"Murkbrine Shorerunner",
"Tazavesh, the Veiled Market",
"enUS",
},
[184301] = {
"Cavern Seeker",
"Uldaman: Legacy of Tyr",
"enUS",
},
[134157] = {
"Shadow-Borne Warrior",
"Kings' Rest",
},
[40634] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
"enUS",
},
[225605] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[177269] = {
"So'leah",
"Tazavesh, the Veiled Market",
"enUS",
},
[91000] = {
"Vileshard Hulk",
"Neltharion's Lair",
},
[225606] = {
"Nightfall Shadowalker",
"The Dawnbreaker",
"enUS",
},
[84990] = {
"Addled Arcanomancer",
"The Everbloom",
},
[81985] = {
"Everbloom Cultivator",
"The Everbloom",
},
[122969] = {
"Zanchuli Witch-Doctor",
"Atal'Dazar",
},
[100527] = {
"Dreadfire Imp",
"Darkheart Thicket",
"enUS",
},
[197985] = {
"Flame Channeler",
"Ruby Life Pools",
"enUS",
},
[245008] = {
"Unbound Phaseblade",
"Manaforge Omega",
"enUS",
},
[163459] = {
"Forsworn Mender",
"Spires of Ascension",
},
[237481] = {
"Shroomsprew",
"The Waterworks",
"enUS",
},
[226617] = {
"Snake",
"Tak-Rethan Abyss",
"enUS",
},
[178165] = {
"Coastwalker Goliath",
"Tazavesh, the Veiled Market",
"enUS",
},
[204109] = {
"Cavernous Shrieker",
"Kriegval's Rest",
"enUS",
},
[225479] = {
"Sureki Webmage",
"The Dawnbreaker",
"enUS",
},
[240952] = {
"Evoked Spirit",
"Eco-Dome Al'dani",
"enUS",
},
[162309] = {
"Kul'tharok",
"Theater of Pain",
"enUS",
},
[104300] = {
"Shadow Mistress",
"Court of Stars",
},
[171772] = {
"Mistveil Defender",
"Mists of Tirna Scithe",
"enUS",
},
[208728] = {
"Treasure Wraith",
"Nightfall Sanctum",
"enUS",
},
[189247] = {
"Tamed Phoenix",
"Neltharus",
"enUS",
},
[245173] = {
"Infused Tangle",
"Manaforge Omega",
"enUS",
},
[223773] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[131492] = {
"Devout Blood Priest",
"The Underrot",
},
[76104] = {
"Monstrous Corpse Spider",
"Shadowmoon Burial Grounds",
},
[207450] = {
"Fungal Stabber",
"The Waterworks",
"enUS",
},
[212403] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[248626] = {
"Nascent Darkmage",
"Manaforge Omega",
"enUS",
},
[168578] = {
"Fungalmancer",
"Plaguefall",
},
[135329] = {
"Matron Bryndle",
"Waycrest Manor",
},
[211290] = {
"Elaena Emberlanz",
"Priory of the Sacred Flame",
"enUS",
},
[210264] = {
"Bee Wrangler",
"Cinderbrew Meadery",
"enUS",
},
[136353] = {
"Colossal Tentacle",
"Shrine of the Storm",
},
[123227] = {
"Keystone Vendor",
"Kalimdor",
},
[135204] = {
"Spectral Hex Priest",
"Kings' Rest",
},
[219983] = {
"Eye of the Queen",
"City of Threads",
"enUS",
},
[207198] = {
"Cursed Thunderer",
"The Rookery",
"enUS",
},
[139422] = {
"Scaled Krolusk Tamer",
"Temple of Sethraliss",
},
[216275] = {
"Brann's Epic Egg",
"The Waterworks",
"enUS",
},
[204127] = {
"Kobold Taskfinder",
"Kriegval's Rest",
"enUS",
},
[223772] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[234050] = {
"Shadowguard Soldier",
"Manaforge Omega",
"enUS",
},
[229782] = {
"Awakened Phalanx",
"Awakening The Machine",
"enUS",
},
[227145] = {
"Waterworks Crocolisk",
"Operation: Floodgate",
"enUS",
},
[207454] = {
"Fungal Gutter",
"The Waterworks",
"enUS",
},
[228424] = {
"Darkfuse Mechadrone",
"Operation: Floodgate",
"enUS",
},
[162057] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[211289] = {
"Taener Duelmal",
"Priory of the Sacred Flame",
"enUS",
},
[179399] = {
"Drunk Pirate",
"Tazavesh, the Veiled Market",
"enUS",
},
[234051] = {
"Netherfang Soulbarker",
"Manaforge Omega",
"enUS",
},
[180348] = {
"Cartel Muscle",
"Tazavesh, the Veiled Market",
"enUS",
},
[186226] = {
"Fetid Rotsinger",
"Brackenhide Hollow",
"enUS",
},
[125977] = {
"Reanimation Totem",
"Atal'Dazar",
},
[122972] = {
"Dazar'ai Augur",
"Atal'Dazar",
},
[231496] = {
"Venture Co. Diver",
"Operation: Floodgate",
"enUS",
},
[205152] = {
"Lerai, Timesworn Maiden",
"Dawn of the Infinite",
"enUS",
},
[229706] = {
"Explosive Bomberbot",
"Awakening The Machine",
"enUS",
},
[129366] = {
"Bilge Rat Buccaneer",
"Siege of Boralus",
"enUS",
},
[244410] = {
"Pactsworn Sandreaver",
"The Waterworks",
"enUS",
},
[170882] = {
"Bone Magus",
"Theater of Pain",
"enUS",
},
[178171] = {
"Stormforged Guardian",
"Tazavesh, the Veiled Market",
"enUS",
},
[139425] = {
"Crazed Incubator",
"Temple of Sethraliss",
},
[244922] = {
"Shadowguard Phaseblade",
"Manaforge Omega",
"enUS",
},
[207199] = {
"Cursed Rooktender",
"The Rookery",
"enUS",
},
[207456] = {
"Fungal Speartender",
"Mycomancer Cavern",
"enUS",
},
[196202] = {
"Spectral Invoker",
"Algeth'ar Academy",
"enUS",
},
[244411] = {
"Pactsworn Arcanist",
"The Waterworks",
"enUS",
},
[212826] = {
"Guard Captain Suleyman",
"Priory of the Sacred Flame",
"enUS",
},
[203877] = {
"Kobold Thwacker",
"Kriegval's Rest",
"enUS",
},
[122973] = {
"Dazar'ai Confessor",
"Atal'Dazar",
},
[100531] = {
"Bloodtainted Fury",
"Darkheart Thicket",
"enUS",
},
[210269] = {
"Hired Muscle",
"Cinderbrew Meadery",
"enUS",
},
[236995] = {
"Ravenous Destroyer",
"Eco-Dome Al'dani",
"enUS",
},
[129367] = {
"Bilge Rat Tempest",
"Siege of Boralus",
"enUS",
},
[204206] = {
"Horde Farseer",
"Dawn of the Infinite",
"enUS",
},
[186229] = {
"Wilted Oak",
"Brackenhide Hollow",
"enUS",
},
[129559] = {
"Cutwater Duelist",
"Freehold",
},
[219221] = {
"Ravenous Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[237763] = {
"Nexus-King Salhadaar",
"Manaforge Omega",
"enUS",
},
[186741] = {
"Arcane Elemental",
"The Azure Vault",
"enUS",
},
[175616] = {
"Zo'phex",
"Tazavesh, the Veiled Market",
"enUS",
},
[129879] = {
"Irontide Cleaver",
"Siege of Boralus",
"enUS",
},
[244413] = {
"Pactsworn Fraycaller",
"The Waterworks",
"enUS",
},
[210271] = {
"Brew Master Aldryr",
"Cinderbrew Meadery",
"enUS",
},
[165076] = {
"Gluttonous Tick",
"Sanguine Depths",
},
[174210] = {
"Blighted Sludge-Spewer",
"Theater of Pain",
"enUS",
},
[100532] = {
"Bloodtainted Burster",
"Darkheart Thicket",
"enUS",
},
[207202] = {
"Void Fragment",
"The Rookery",
"enUS",
},
[179837] = {
"Tracker Zo'korss",
"Tazavesh, the Veiled Market",
"enUS",
},
[165515] = {
"Depraved Darkblade",
"Halls of Atonement",
"enUS",
},
[229069] = {
"Mechadrone Sniper",
"Operation: Floodgate",
"enUS",
},
[191847] = {
"Nokhud Plainstomper",
"The Nokhud Offensive",
"enUS",
},
[244414] = {
"Unbound Remnant",
"The Waterworks",
"enUS",
},
[203878] = {
"Kobold Mystic",
"Kriegval's Rest",
"enUS",
},
[137511] = {
"Bilge Rat Cutthroat",
"Siege of Boralus",
"enUS",
},
[223777] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[216648] = {
"Nx",
"City of Threads",
"enUS",
},
[91006] = {
"Rockback Gnasher",
"Neltharion's Lair",
},
[244415] = {
"Pactsworn Dustblade",
"The Waterworks",
"enUS",
},
[40484] = {
"Erudax",
"Grim Batol",
"enUS",
},
[59555] = {
"Haunting Sha",
"Temple of the Jade Serpent",
},
[163157] = {
"Amarth",
"The Necrotic Wake",
"enUS",
},
[98792] = {
"Wyrmtongue Scavenger",
"Black Rook Hold",
"enUS",
},
[205158] = {
"Spurlok, Timesworn Sentinel",
"Dawn of the Infinite",
"enUS",
},
[180091] = {
"Ancient Core Hound",
"Tazavesh, the Veiled Market",
"enUS",
},
[129231] = {
"Rixxa Fluxflame",
"The MOTHERLODE!!",
"enUS",
},
[145185] = {
"Gnomercy 4.U.",
"Operation: Mechagon",
"enUS",
},
[212831] = {
"Forge Master Damian",
"Priory of the Sacred Flame",
"enUS",
},
[45919] = {
"Young Storm Dragon",
"The Vortex Pinnacle",
},
[195696] = {
"Primalist Thunderbeast",
"The Nokhud Offensive",
"enUS",
},
[43873] = {
"Altairus",
"The Vortex Pinnacle",
},
[207205] = {
"Stormguard Gorren",
"The Rookery",
"enUS",
},
[171656] = {
"Venomous Sniper Captain",
"Plaguefall",
},
[83846] = {
"Yalnu",
"The Everbloom",
"enUS",
},
[164463] = {
"Paceran the Virulent",
"Theater of Pain",
"enUS",
},
[206694] = {
"Fervent Sharpshooter",
"Priory of the Sacred Flame",
"enUS",
},
[138281] = {
"Faceless Corruptor",
"The Underrot",
},
[234955] = {
"Wastelander Pactspeaker",
"Eco-Dome Al'dani",
"enUS",
},
[213216] = {
"Speaker Dorlita",
"The Stonevault",
"enUS",
},
[129370] = {
"Irontide Waveshaper",
"Siege of Boralus",
"enUS",
},
[187897] = {
"Defier Draghar",
"Ruby Life Pools",
"enUS",
},
[179841] = {
"Veteran Sparkcaster",
"Tazavesh, the Veiled Market",
"enUS",
},
[244418] = {
"Pactsworn Wildcaller",
"Skittering Breach",
"enUS",
},
[206697] = {
"Devout Priest",
"Priory of the Sacred Flame",
"enUS",
},
[193462] = {
"Batak",
"The Nokhud Offensive",
"enUS",
},
[165137] = {
"Zolramus Gatekeeper",
"The Necrotic Wake",
"enUS",
},
[213217] = {
"Speaker Brokk",
"The Stonevault",
"enUS",
},
[237897] = {
"Shadowguard Assassin",
"Manaforge Omega",
"enUS",
},
[219996] = {
"Faceless Devotee",
"Skittering Breach",
"enUS",
},
[179842] = {
"Commerce Enforcer",
"Tazavesh, the Veiled Market",
"enUS",
},
[170572] = {
"Atal'ai Hoodoo Hexxer",
"De Other Side",
},
[206696] = {
"Arathi Knight",
"Priory of the Sacred Flame",
"enUS",
},
[237514] = {
"A'wazj",
"Eco-Dome Al'dani",
"enUS",
},
[229778] = {
"Automatic Ironstrider",
"Awakening The Machine",
"enUS",
},
[137516] = {
"Ashvane Invader",
"Siege of Boralus",
"enUS",
},
[212835] = {
"Risen Footman",
"Priory of the Sacred Flame",
"enUS",
},
[234957] = {
"Wastelander Ritualist",
"Eco-Dome Al'dani",
"enUS",
},
[214625] = {
"Kobyss Necromancer",
"The Dread Pit",
"enUS",
},
[184319] = {
"Refti Custodian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[208743] = {
"Blazikon",
"Darkflame Cleft",
"enUS",
},
[242630] = {
"Crazed Nerubian Lord",
"Fungal Folly",
"enUS",
},
[196200] = {
"Algeth'ar Echoknight",
"Algeth'ar Academy",
"enUS",
},
[191736] = {
"Crawth",
"Algeth'ar Academy",
"enUS",
},
[235853] = {
"Waygate Watcher",
"Manaforge Omega",
"enUS",
},
[136186] = {
"Tidesage Spiritualist",
"Shrine of the Storm",
},
[237132] = {
"Shadowguard Technomancer",
"Manaforge Omega",
"enUS",
},
[101991] = {
"Nightmare Dweller",
"Darkheart Thicket",
"enUS",
},
[206698] = {
"Fanatical Mage",
"Priory of the Sacred Flame",
"enUS",
},
[242631] = {
"Overcharged Sentinel",
"Eco-Dome Al'dani",
"enUS",
},
[186738] = {
"Umbrelskul",
"The Azure Vault",
"enUS",
},
[196044] = {
"Unruly Textbook",
"Algeth'ar Academy",
"enUS",
},
[105715] = {
"Watchful Inquisitor",
"Court of Stars",
},
[212453] = {
"Ghastly Voidsoul",
"The Stonevault",
"enUS",
},
[226625] = {
"Cave Skipper",
"Fungal Folly",
"enUS",
},
[144296] = {
"Spider Tank",
"Operation: Mechagon",
"enUS",
},
[206699] = {
"War Lynx",
"Priory of the Sacred Flame",
"enUS",
},
[199027] = {
"Magmas",
"Vault of the Incarnates",
"enUS",
},
[179334] = {
"Portalmancer Zo'dahh",
"Tazavesh, the Veiled Market",
"enUS",
},
[230740] = {
"Shreddinator 3000",
"Operation: Floodgate",
"enUS",
},
[132532] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[234960] = {
"Tamed Ruinstalker",
"Eco-Dome Al'dani",
"enUS",
},
[164501] = {
"Mistcaller",
"Mists of Tirna Scithe",
"enUS",
},
[244423] = {
"Wild Duneflyer",
"Skittering Breach",
"enUS",
},
[212838] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[224219] = {
"Twilight Earthcaller",
"Grim Batol",
"enUS",
},
[191739] = {
"Scalebane Lieutenant",
"The Azure Vault",
"enUS",
},
[135474] = {
"Thistle Acolyte",
"Waycrest Manor",
},
[234833] = {
"Unstable Mana",
"Manaforge Omega",
"enUS",
},
[224731] = {
"Web Marauder",
"City of Threads",
"enUS",
},
[168594] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[144298] = {
"Defense Bot Mk III",
"Operation: Mechagon",
"enUS",
},
[208747] = {
"The Darkness",
"Darkflame Cleft",
"enUS",
},
[160495] = {
"Maniacal Soulbinder",
"Theater of Pain",
"enUS",
},
[137521] = {
"Irontide Powdershot",
"Siege of Boralus",
"enUS",
},
[176395] = {
"Overloaded Mailemental",
"Tazavesh, the Veiled Market",
"enUS",
},
[234962] = {
"Wastelander Farstalker",
"Eco-Dome Al'dani",
"enUS",
},
[162329] = {
"Xav the Unfallen",
"Theater of Pain",
"enUS",
},
[194895] = {
"Unstable Squall",
"The Nokhud Offensive",
"enUS",
},
[190206] = {
"Primalist Flamedancer",
"Ruby Life Pools",
"enUS",
},
[189266] = {
"Qalashi Trainee",
"Neltharus",
"enUS",
},
[167956] = {
"Dark Acolyte",
"Sanguine Depths",
},
[129374] = {
"Scrimshaw Enforcer",
"Siege of Boralus",
"enUS",
},
[176396] = {
"Defective Sorter",
"Tazavesh, the Veiled Market",
"enUS",
},
[190207] = {
"Primalist Cinderweaver",
"Ruby Life Pools",
"enUS",
},
[206704] = {
"Ardent Paladin",
"Priory of the Sacred Flame",
"enUS",
},
[210539] = {
"Corridor Creeper",
"Darkflame Cleft",
"enUS",
},
[244426] = {
"Feral Warpstalker",
"Skittering Breach",
"enUS",
},
[169875] = {
"Shackled Soul",
"Theater of Pain",
"enUS",
},
[245705] = {
"Voidwarden",
"Manaforge Omega",
"enUS",
},
[226396] = {
"Swampface",
"Operation: Floodgate",
"enUS",
},
[184581] = {
"Baelog",
"Uldaman: Legacy of Tyr",
"enUS",
},
[240974] = {
"Shadowguard Weavemaster",
"Manaforge Omega",
"enUS",
},
[104247] = {
"Duskwatch Arcanist",
"Court of Stars",
},
[130909] = {
"Fetid Maggot",
"Zandalar",
},
[186116] = {
"Gutshot",
"Brackenhide Hollow",
"enUS",
},
[220003] = {
"Eye of the Queen",
"City of Threads",
"enUS",
},
[208239] = {
"Skittering Menace",
"Skittering Breach",
"enUS",
},
[229212] = {
"Darkfuse Demolitionist",
"Operation: Floodgate",
"enUS",
},
[206065] = {
"Interval",
"Dawn of the Infinite",
"enUS",
},
[233814] = {
"Plexus Sentinel",
"Manaforge Omega",
"enUS",
},
[220643] = {
"Deepwater Makura",
"Tak-Rethan Abyss",
"enUS",
},
[164506] = {
"Ancient Captain",
"Theater of Pain",
"enUS",
},
[214761] = {
"Nightfall Ritualist",
"The Dawnbreaker",
"enUS",
},
[98813] = {
"Bloodscent Felhound",
"Black Rook Hold",
"enUS",
},
[231385] = {
"Darkfuse Inspector",
"Operation: Floodgate",
"enUS",
},
[45922] = {
"Empyrean Assassin",
"The Vortex Pinnacle",
"enUS",
},
[206066] = {
"Timestream Leech",
"Dawn of the Infinite",
"enUS",
},
[233815] = {
"Loom'ithar",
"Manaforge Omega",
"enUS",
},
[233816] = {
"Soulbinder Naazindhri",
"Manaforge Omega",
"enUS",
},
[40935] = {
"Gilgoblin Hunter",
"Throne of the Tides",
"enUS",
},
[214762] = {
"Nightfall Commander",
"The Dawnbreaker",
"enUS",
},
[186246] = {
"Fleshripper Vulture",
"Brackenhide Hollow",
"enUS",
},
[177807] = {
"Customs Security",
"Tazavesh, the Veiled Market",
"enUS",
},
[208242] = {
"Nerubian Darkcaster",
"Skittering Breach",
"enUS",
},
[214251] = {
"Kobyss Witherer",
"Tak-Rethan Abyss",
"enUS",
},
[208241] = {
"Unknown <Slayer of Lumiha-TarrenMill>",
"Skittering Breach",
"enUS",
},
[95834] = {
"Valarjar Mystic",
"Halls of Valor",
},
[244302] = {
"Binding Javelin",
"Eco-Dome Al'dani",
"enUS",
},
[92612] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[141285] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[246733] = {
"Soaring Devilfish",
"Tak-Rethan Abyss",
"enUS",
},
[239702] = {
"Watcher Gaz'Kreth",
"Manaforge Omega",
"enUS",
},
[199037] = {
"Primalist Shocktrooper",
"Halls of Infusion",
"enUS",
},
[230748] = {
"Darkfuse Bloodwarper",
"Operation: Floodgate",
"enUS",
},
[206710] = {
"Lightspawn",
"Priory of the Sacred Flame",
"enUS",
},
[177808] = {
"Armored Overseer",
"Tazavesh, the Veiled Market",
"enUS",
},
[186120] = {
"Treemouth",
"Brackenhide Hollow",
"enUS",
},
[190340] = {
"Refti Defender",
"Halls of Infusion",
"enUS",
},
[136249] = {
"Guardian Elemental",
"Shrine of the Storm",
},
[204918] = {
"Iridikron's Creation",
"Dawn of the Infinite",
"enUS",
},
[226403] = {
"Keeza Quickfuse",
"Operation: Floodgate",
"enUS",
},
[208243] = {
"Nerubian Slasher",
"Skittering Breach",
"enUS",
},
[229854] = {
"Inquisitor Speaker",
"Nightfall Sanctum",
"enUS",
},
[223844] = {
"Covert Webmancer",
"City of Threads",
"enUS",
},
[171799] = {
"Depths Warden",
"Sanguine Depths",
},
[166302] = {
"Corpse Harvester",
"The Necrotic Wake",
"enUS",
},
[167963] = {
"Headless Client",
"De Other Side",
},
[226402] = {
"Bront",
"Operation: Floodgate",
"enUS",
},
[180495] = {
"Enraged Direhorn",
"Tazavesh, the Veiled Market",
"enUS",
},
[215405] = {
"Anub'zekt",
"Ara-Kara, City of Echoes",
"enUS",
},
[229855] = {
"Shadeguard Speaker",
"Nightfall Sanctum",
"enUS",
},
[134251] = {
"Seneschal M'bara",
"Kings' Rest",
},
[193457] = {
"Balara",
"The Nokhud Offensive",
"enUS",
},
[190342] = {
"Containment Apparatus",
"Halls of Infusion",
"enUS",
},
[101437] = {
"Burning Geode",
"Neltharion's Lair",
},
[122984] = {
"Dazar'ai Colossus",
"Atal'Dazar",
},
[41096] = {
"Naz'jar Oracle",
"Throne of the Tides",
"enUS",
},
[208245] = {
"Skittering Swarmer",
"Skittering Breach",
"enUS",
},
[89] = {
"Infernal",
"Theater of Pain",
"enUS",
},
[164557] = {
"Shard of Halkias",
"Halls of Atonement",
"enUS",
},
[189901] = {
"Warlord Sargha",
"Neltharus",
"enUS",
},
[165919] = {
"Skeletal Marauder",
"The Necrotic Wake",
"enUS",
},
[167965] = {
"Lubricator",
"De Other Side",
},
[226404] = {
"Geezle Gigazap",
"Operation: Floodgate",
"enUS",
},
[195842] = {
"Ukhel Corruptor",
"The Nokhud Offensive",
"enUS",
},
[229729] = {
"Nullbot",
"Awakening The Machine",
"enUS",
},
[165408] = {
"Halkias",
"Halls of Atonement",
"enUS",
},
[173720] = {
"Mistveil Gorgegullet",
"Mists of Tirna Scithe",
"enUS",
},
[163618] = {
"Zolramus Necromancer",
"The Necrotic Wake",
"enUS",
},
[200126] = {
"Fallen Waterspeaker",
"Temple of the Jade Serpent",
},
[215407] = {
"Ki'katal the Harvester",
"Ara-Kara, City of Echoes",
"enUS",
},
[130635] = {
"Stonefury",
"The MOTHERLODE!!",
"enUS",
},
[169927] = {
"Putrid Butcher",
"Theater of Pain",
"enUS",
},
[224616] = {
"Animated Shadow",
"The Dawnbreaker",
"enUS",
},
[231904] = {
"Punchy Thug",
"Kriegval's Rest",
"enUS",
},
[194181] = {
"Vexamus",
"Algeth'ar Academy",
"enUS",
},
[186125] = {
"Tricktotem",
"Brackenhide Hollow",
"enUS",
},
[190345] = {
"Primalist Geomancer",
"Halls of Infusion",
"enUS",
},
[167967] = {
"Sentient Oil",
"De Other Side",
},
[137405] = {
"Gripping Terror",
"Siege of Boralus",
"enUS",
},
[206074] = {
"Pendule",
"Dawn of the Infinite",
"enUS",
},
[233823] = {
"The Royal Voidwing",
"Manaforge Omega",
"enUS",
},
[137517] = {
"Ashvane Destroyer",
"Siege of Boralus",
"enUS",
},
[241240] = {
"Budding Silkgrub",
"Manaforge Omega",
"enUS",
},
[242648] = {
"Nascent Shadowguard",
"Manaforge Omega",
"enUS",
},
[205691] = {
"Iridikron's Creation",
"Dawn of the Infinite",
"enUS",
},
[98370] = {
"Ghostly Councilor",
"Black Rook Hold",
"enUS",
},
[237660] = {
"Velaryn Bloodwrath",
"Manaforge Omega",
"enUS",
},
[239834] = {
"Taener Duelmal",
"Priory of the Sacred Flame",
"enUS",
},
[233824] = {
"Dimensius",
"Manaforge Omega",
"enUS",
},
[231906] = {
"Aerial Support Bot",
"Kriegval's Rest",
"enUS",
},
[211063] = {
"Fungal Podling",
"Kriegval's Rest",
"enUS",
},
[163621] = {
"Goregrind",
"The Necrotic Wake",
"enUS",
},
[129208] = {
"Dread Captain Lockwood",
"Siege of Boralus",
"enUS",
},
[168992] = {
"Risen Cultist",
"De Other Side",
},
[134338] = {
"Tidesage Enforcer",
"Shrine of the Storm",
},
[240091] = {
"Monstrous Larva",
"Fungal Folly",
"enUS",
},
[45477] = {
"Gust Soldier",
"The Vortex Pinnacle",
},
[196102] = {
"Conjured Lasher",
"The Azure Vault",
"enUS",
},
[241242] = {
"Shadowguard Harvester",
"Manaforge Omega",
"enUS",
},
[98243] = {
"Soul-Torn Champion",
"Black Rook Hold",
"enUS",
},
[190348] = {
"Primalist Ravager",
"Halls of Infusion",
"enUS",
},
[242649] = {
"Nascent Acolyte",
"Manaforge Omega",
"enUS",
},
[237662] = {
"Ilyssa Darksorrow",
"Manaforge Omega",
"enUS",
},
[239836] = {
"Sergeant Shaynemail",
"Priory of the Sacred Flame",
"enUS",
},
[136295] = {
"Sunken Denizen",
"Shrine of the Storm",
},
[129529] = {
"Blacktooth Scrapper",
"Freehold",
},
[177817] = {
"Support Officer",
"Tazavesh, the Veiled Market",
"enUS",
},
[189235] = {
"Overseer Lahar",
"Neltharus",
"enUS",
},
[131819] = {
"Coven Diviner",
"Waycrest Manor",
"enUS",
},
[135235] = {
"Spectral Beastmaster",
"Kings' Rest",
},
[208450] = {
"Wandering Candle",
"Darkflame Cleft",
"enUS",
},
[133007] = {
"Unbound Abomination",
"The Underrot",
},
[242209] = {
"Overgorged Mite",
"Eco-Dome Al'dani",
"enUS",
},
[165414] = {
"Depraved Obliterator",
"Halls of Atonement",
"enUS",
},
[231014] = {
"Loaderbot",
"Operation: Floodgate",
"enUS",
},
[151476] = {
"Blastatron X-80",
"Operation: Mechagon",
"enUS",
},
[239454] = {
"Darkmage Zadus",
"Manaforge Omega",
"enUS",
},
[205408] = {
"Infinite Timeslicer",
"Dawn of the Infinite",
"enUS",
},
[144293] = {
"Waste Processing Unit",
"Operation: Mechagon",
"enUS",
},
[135365] = {
"Matron Alma",
"Waycrest Manor",
},
[136643] = {
"Azerite Extractor",
"The MOTHERLODE!!",
"enUS",
},
[165415] = {
"Toiling Groundskeeper",
"Halls of Atonement",
"enUS",
},
[194316] = {
"Stormcaller Zarii",
"The Nokhud Offensive",
"enUS",
},
[194315] = {
"Stormcaller Solongo",
"The Nokhud Offensive",
"enUS",
},
[186644] = {
"Leymor",
"The Azure Vault",
"enUS",
},
[244444] = {
"Great Devourer",
"Nightfall Sanctum",
"enUS",
},
[130661] = {
"Venture Co. Earthshaper",
"The MOTHERLODE!!",
"enUS",
},
[214264] = {
"Cursedforge Honor Guard",
"The Stonevault",
"enUS",
},
[168357] = {
"Zolramus Sorcerer",
"The Necrotic Wake",
},
[175646] = {
"P.O.S.T. Master",
"Tazavesh, the Veiled Market",
"enUS",
},
[211228] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[187155] = {
"Rune Seal Keeper",
"The Azure Vault",
"enUS",
},
[210812] = {
"Royal Wicklighter",
"Darkflame Cleft",
"enUS",
},
[245722] = {
"Ethereal Scallywag",
"Archival Assault",
"enUS",
},
[190609] = {
"Echo of Doragosa",
"Algeth'ar Academy",
"enUS",
},
[195851] = {
"Ukhel Deathspeaker",
"The Nokhud Offensive",
"enUS",
},
[134599] = {
"Imbued Stormcaller",
"Temple of Sethraliss",
},
[224271] = {
"Twilight Warlock",
"Grim Batol",
"enUS",
},
[229739] = {
"Malfunctioning Pylon",
"Awakening The Machine",
"enUS",
},
[194317] = {
"Stormcaller Boroo",
"The Nokhud Offensive",
"enUS",
},
[169893] = {
"Nefarious Darkspeaker",
"Theater of Pain",
"enUS",
},
[220148] = {
"Gem Hoarder",
"The Dread Pit",
"enUS",
},
[246874] = {
"Influx Warden",
"Manaforge Omega",
"enUS",
},
[231176] = {
"Scaffolding",
"Operation: Floodgate",
"enUS",
},
[134600] = {
"Sandswept Marksman",
"Temple of Sethraliss",
},
[201223] = {
"Infinite Twilight Magus",
"Dawn of the Infinite",
"enUS",
},
[131817] = {
"Cragmaw the Infested",
"The Underrot",
},
[231325] = {
"Darkfuse Jumpstarter",
"Operation: Floodgate",
"enUS",
},
[218103] = {
"Nerubian Lord",
"Skittering Breach",
"enUS",
},
[135240] = {
"Soul Essence",
"UNKNOWN",
"enUS",
},
[217208] = {
"Zekvir",
"Mycomancer Cavern",
"enUS",
},
[178139] = {
"Murkbrine Shellcrusher",
"Tazavesh, the Veiled Market",
"enUS",
},
[59545] = {
"The Golden Beetle",
"Temple of the Jade Serpent",
},
[186739] = {
"Azureblade",
"The Azure Vault",
"enUS",
},
[247387] = {
"Zekvir",
"Skittering Breach",
"enUS",
},
[216441] = {
"Pale Illusion",
"Tak-Rethan Abyss",
"enUS",
},
[207468] = {
"Gnarled Reviver",
"Mycomancer Cavern",
"enUS",
},
[135241] = {
"Bilge Rat Pillager",
"Siege of Boralus",
"enUS",
},
[242784] = {
"Black Blood Leacher",
"Fungal Folly",
"enUS",
},
[134331] = {
"King Rahu'ai",
"Kings' Rest",
},
[170690] = {
"Diseased Horror",
"Theater of Pain",
"enUS",
},
[167493] = {
"Venomous Sniper",
"Plaguefall",
},
[133835] = {
"Feral Bloodswarmer",
"The Underrot",
},
[222964] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[213885] = {
"Nightfall Dark Architect",
"The Dawnbreaker",
"enUS",
},
[190484] = {
"Kyrakka",
"Ruby Life Pools",
"enUS",
},
[100485] = {
"Soul-torn Vanguard",
"Black Rook Hold",
"enUS",
},
[195855] = {
"Risen Warrior",
"The Nokhud Offensive",
"enUS",
},
[234883] = {
"Voracious Gorger",
"Eco-Dome Al'dani",
"enUS",
},
[226398] = {
"Big M.O.M.M.A.",
"Operation: Floodgate",
"enUS",
},
[133836] = {
"Reanimated Guardian",
"The Underrot",
},
[187160] = {
"Crystal Fury",
"The Azure Vault",
"enUS",
},
[163503] = {
"Etherdiver",
"Spires of Ascension",
},
[244448] = {
"Invasive Phasecrawler",
"Kriegval's Rest",
"enUS",
},
[213119] = {
"Void Speaker Eirich",
"The Stonevault",
"enUS",
},
[167876] = {
"Inquisitor Sigar",
"Halls of Atonement",
"enUS",
},
[144294] = {
"Mechagon Tinkerer",
"Operation: Mechagon",
"enUS",
},
[187033] = {
"Stinkbreath",
"Brackenhide Hollow",
"enUS",
},
[247390] = {
"The Underpin",
"Skittering Breach",
"enUS",
},
[214550] = {
"Deepwater Snapper",
"Tak-Rethan Abyss",
"enUS",
},
[210818] = {
"Lowly Moleherd",
"Darkflame Cleft",
"enUS",
},
[189719] = {
"Watcher Irideus",
"Halls of Infusion",
"enUS",
},
[192788] = {
"Qalashi Thaumaturge",
"Neltharus",
"enUS",
},
[47238] = {
"Whipping Wind",
"The Vortex Pinnacle",
},
[59546] = {
"The Talking Fish",
"Temple of the Jade Serpent",
},
[133685] = {
"Befouled Spirit",
"The Underrot",
},
[102788] = {
"Felspite Dominator",
"Black Rook Hold",
"enUS",
},
[131585] = {
"Enthralled Guard",
"Waycrest Manor",
},
[245601] = {
"Enforcer Jak'tull",
"Manaforge Omega",
"enUS",
},
[189464] = {
"Qalashi Irontorch",
"Neltharus",
"enUS",
},
[76446] = {
"Shadowmoon Dominator",
"Shadowmoon Burial Grounds",
},
[192789] = {
"Nokhud Longbow",
"The Nokhud Offensive",
"enUS",
},
[95766] = {
"Crazed Razorbeak",
"Darkheart Thicket",
"enUS",
},
[98691] = {
"Risen Scout",
"Black Rook Hold",
"enUS",
},
[134701] = {
"Blood Effigy",
"The Underrot",
},
[134990] = {
"Charged Dust Devil",
"Temple of Sethraliss",
},
[138187] = {
"Grotesque Horror",
"The Underrot",
},
[215040] = {
"Kobyss Bonechewer",
"Tak-Rethan Abyss",
"enUS",
},
[144295] = {
"Mechagon Mechanic",
"Operation: Mechagon",
"enUS",
},
[197905] = {
"Spellbound Scepter",
"Algeth'ar Academy",
},
[91001] = {
"Tarspitter Lurker",
"Neltharion's Lair",
},
[131666] = {
"Coven Thornshaper",
"Waycrest Manor",
},
[132126] = {
"Gilded Priestess",
"Atal'Dazar",
},
[212739] = {
"Consuming Voidstone",
"The Rookery",
"enUS",
},
[234478] = {
"Dimensius",
"Manaforge Omega",
"enUS",
},
[163891] = {
"Rotmarrow Slime",
"Plaguefall",
},
[45928] = {
"Executor of the Caliph",
"The Vortex Pinnacle",
},
[208745] = {
"The Candle King",
"Darkflame Cleft",
"enUS",
},
[176551] = {
"Vault Purifier",
"Tazavesh, the Veiled Market",
"enUS",
},
[197698] = {
"Thunderhead",
"Ruby Life Pools",
"enUS",
},
[144071] = {
"Irontide Waveshaper",
"Siege of Boralus",
"enUS",
},
[244453] = {
"D'rude",
"The Waterworks",
"enUS",
},
[190362] = {
"Dazzling Dragonfly",
"Halls of Infusion",
"enUS",
},
[189467] = {
"Qalashi Bonesplitter",
"Neltharus",
"enUS",
},
[40167] = {
"Twilight Beguiler",
"Grim Batol",
"enUS",
},
[203951] = {
"Kobold Skullface",
"Kriegval's Rest",
"enUS",
},
[214548] = {
"Slippery Syphoner",
"Tak-Rethan Abyss",
"enUS",
},
[209801] = {
"Quartermaster Koratite",
"The Rookery",
"enUS",
},
[243303] = {
"Lil Leacher",
"Fungal Folly",
"enUS",
},
[223994] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[213892] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[220158] = {
"Under-Lord Vik'tis",
"The Dread Pit",
"enUS",
},
[216338] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[163126] = {
"Brittlebone Mage",
"The Necrotic Wake",
"enUS",
},
[193944] = {
"Qalashi Lavamancer",
"Neltharus",
"enUS",
},
[245222] = {
"Pargoth",
"Manaforge Omega",
"enUS",
},
[81819] = {
"Everbloom Naturalist",
"The Everbloom",
},
[223995] = {
"Nightfall Curseblade",
"The Dawnbreaker",
"enUS",
},
[213893] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[166275] = {
"Mistveil Shaper",
"Mists of Tirna Scithe",
"enUS",
},
[196115] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[102232] = {
"Rockbound Trapper",
"Neltharion's Lair",
},
[214661] = {
"Goldie Baronbottom",
"Cinderbrew Meadery",
"enUS",
},
[131670] = {
"Heartsbane Vinetwister",
"Waycrest Manor",
},
[246374] = {
"Shadowguard Soldier",
"Manaforge Omega",
"enUS",
},
[131812] = {
"Heartsbane Soulcharmer",
"Waycrest Manor",
"enUS",
},
[213894] = {
"Nightfall Curseblade",
"The Dawnbreaker",
"enUS",
},
[189470] = {
"Lava Flare",
"Neltharus",
"enUS",
},
[224249] = {
"Twilight Lavabender",
"Grim Batol",
"enUS",
},
[163128] = {
"Zolramus Sorcerer",
"The Necrotic Wake",
"enUS",
},
[176555] = {
"Achillite",
"Tazavesh, the Veiled Market",
"enUS",
},
[231925] = {
"Drill Sergeant",
"Kriegval's Rest",
"enUS",
},
[81820] = {
"Everbloom Mender",
"The Everbloom",
},
[220060] = {
"Taste Tester",
"Cinderbrew Meadery",
"enUS",
},
[213895] = {
"Nightfall Shadowalker",
"The Dawnbreaker",
"enUS",
},
[237552] = {
"Sprok",
"Kriegval's Rest",
"enUS",
},
[246887] = {
"Charging Devilfish",
"Tak-Rethan Abyss",
"enUS",
},
[192796] = {
"Nokhud Hornsounder",
"The Nokhud Offensive",
"enUS",
},
[176556] = {
"Alcruux",
"Tazavesh, the Veiled Market",
"enUS",
},
[206351] = {
"Alliance Conjuror",
"Dawn of the Infinite",
"enUS",
},
[216337] = {
"Bloodworker",
"Ara-Kara, City of Echoes",
"enUS",
},
[186658] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
"enUS",
},
[241517] = {
"Dimensius",
"Manaforge Omega",
"enUS",
},
[164920] = {
"Drust Soulcleaver",
"Mists of Tirna Scithe",
"enUS",
},
[185508] = {
"Claw Fighter",
"Brackenhide Hollow",
"enUS",
},
[216326] = {
"Ascended Neophyte",
"City of Threads",
"enUS",
},
[131545] = {
"Lady Waycrest",
"Waycrest Manor",
"enUS",
},
[230904] = {
"Unknown <Slayer of Holdmycoffee-TarrenMill>",
"Nightfall Sanctum",
"enUS",
},
[207969] = {
"Horde Raider",
"Dawn of the Infinite",
"enUS",
},
[205723] = {
"Time-Lost Aerobot",
"Dawn of the Infinite",
"enUS",
},
[190368] = {
"Flamecaller Aymi",
"Halls of Infusion",
"enUS",
},
[237554] = {
"Torque Clankfire",
"Kriegval's Rest",
"enUS",
},
[234613] = {
"Shadow Remnant",
"Kriegval's Rest",
"enUS",
},
[95769] = {
"Mindshattered Screecher",
"Darkheart Thicket",
"enUS",
},
[199000] = {
"Chrono-Lord Deios",
"Dawn of the Infinite",
"enUS",
},
[175663] = {
"Hylbrande",
"Tazavesh, the Veiled Market",
"enUS",
},
[167607] = {
"Stoneborn Slasher",
"Halls of Atonement",
"enUS",
},
[188067] = {
"Flashfrost Chillweaver",
"Ruby Life Pools",
"enUS",
},
[168886] = {
"Virulax Blightweaver",
"Plaguefall",
},
[134232] = {
"Hired Assassin",
"The MOTHERLODE!!",
"enUS",
},
[45930] = {
"Minister of Air",
"The Vortex Pinnacle",
},
[211341] = {
"Manifested Shadow",
"The Dawnbreaker",
"enUS",
},
[234870] = {
"Invading Mite",
"Eco-Dome Al'dani",
"enUS",
},
[216584] = {
"Nerubian Captain",
"Skittering Breach",
"enUS",
},
[40943] = {
"Gilgoblin Aquamage",
"Throne of the Tides",
"enUS",
},
[195876] = {
"Desecrated Ohuna",
"The Nokhud Offensive",
"enUS",
},
[75979] = {
"Exhumed Spirit",
"Shadowmoon Burial Grounds",
},
[165946] = {
"Mordretha, the Endless Empress",
"Theater of Pain",
"enUS",
},
[135239] = {
"Spectral Witch Doctor",
"Kings' Rest",
},
[192800] = {
"Nokhud Lancemaster",
"The Nokhud Offensive",
"enUS",
},
[229251] = {
"Venture Co. Architect",
"Operation: Floodgate",
"enUS",
},
[231930] = {
"Obedient-ish Predator",
"Kriegval's Rest",
"enUS",
},
[135007] = {
"Orb Guardian",
"Temple of Sethraliss",
},
[186151] = {
"Balakar Khan",
"The Nokhud Offensive",
"enUS",
},
[216293] = {
"Trilling Attendant",
"Ara-Kara, City of Echoes",
"enUS",
},
[133430] = {
"Venture Co. Mastermind",
"The MOTHERLODE!!",
"enUS",
},
[211087] = {
"Speaker Shadowcrown",
"The Dawnbreaker",
"enUS",
},
[163458] = {
"Forsworn Castigator",
"Spires of Ascension",
},
[234872] = {
"Wastelander Phaseblade",
"Eco-Dome Al'dani",
"enUS",
},
[131677] = {
"Heartsbane Runeweaver",
"Waycrest Manor",
},
[172265] = {
"Remnant of Fury",
"Sanguine Depths",
},
[216583] = {
"Chittering Fearmonger",
"Skittering Breach",
"enUS",
},
[128434] = {
"Feasting Skyscreamer",
"Atal'Dazar",
},
[135258] = {
"Irontide Curseblade",
"Siege of Boralus",
"enUS",
},
[229250] = {
"Venture Co. Contractor",
"Operation: Floodgate",
"enUS",
},
[220423] = {
"Retired Lord Vul'azak",
"City of Threads",
"enUS",
},
[176562] = {
"Brawling Patron",
"Tazavesh, the Veiled Market",
"enUS",
},
[164414] = {
"Reanimated Mage",
"The Necrotic Wake",
"enUS",
},
[133852] = {
"Living Rot",
"The Underrot",
},
[180015] = {
"Burly Deckhand",
"Tazavesh, the Veiled Market",
"enUS",
},
[190373] = {
"Primalist Galesinger",
"Halls of Infusion",
"enUS",
},
[189478] = {
"Forgemaster Gorek",
"Neltharus",
"enUS",
},
[211089] = {
"Anub'ikkaj",
"The Dawnbreaker",
"enUS",
},
[134629] = {
"Scaled Krolusk Rider",
"Temple of Sethraliss",
},
[176563] = {
"Zo'gron",
"Tazavesh, the Veiled Market",
"enUS",
},
[167612] = {
"Stoneborn Reaver",
"Halls of Atonement",
"enUS",
},
[113537] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[84957] = {
"Putrid Pyromancer",
"The Everbloom",
},
[197535] = {
"High Channeler Ryvati",
"Ruby Life Pools",
"enUS",
},
[213008] = {
"Wriggling Darkspawn",
"Darkflame Cleft",
"enUS",
},
[177716] = {
"So' Cartel Assassin",
"Tazavesh, the Veiled Market",
"enUS",
},
[216333] = {
"Bloodstained Assistant",
"Ara-Kara, City of Echoes",
"enUS",
},
[198047] = {
"Tempest Channeler",
"Ruby Life Pools",
"enUS",
},
[176565] = {
"Disruptive Patron",
"Tazavesh, the Veiled Market",
"enUS",
},
[40177] = {
"Forgemaster Throngus",
"Grim Batol",
"enUS",
},
[128435] = {
"Toxic Saurid",
"Atal'Dazar",
},
[245617] = {
"The Bone Melter",
"Manaforge Omega",
"enUS",
},
[133463] = {
"Venture Co. War Machine",
"The MOTHERLODE!!",
"enUS",
},
[134364] = {
"Faithless Tender",
"Temple of Sethraliss",
},
[213905] = {
"Unstable Darkness",
"The Dawnbreaker",
"enUS",
},
[217485] = {
"Nightfall Lookout",
"Nightfall Sanctum",
"enUS",
},
[205337] = {
"Infinite Timebender",
"Dawn of the Infinite",
"enUS",
},
[153292] = {
"Training Dummy",
"Eastern Kingdoms",
},
[139949] = {
"Plague Doctor",
"Temple of Sethraliss",
},
[165824] = {
"Nar'zudah",
"The Necrotic Wake",
"enUS",
},
[164929] = {
"Tirnenn Villager",
"Mists of Tirna Scithe",
"enUS",
},
[130435] = {
"Addled Thug",
"The MOTHERLODE!!",
"enUS",
},
[153285] = {
"Training Dummy",
"Kalimdor",
},
[190407] = {
"Aqua Rager",
"Halls of Infusion",
"enUS",
},
[220141] = {
"Royal Jelly Purveyor",
"Cinderbrew Meadery",
"enUS",
},
[214673] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[217870] = {
"Devouring Shade",
"Nightfall Sanctum",
"enUS",
},
[190377] = {
"Primalist Icecaller",
"Halls of Infusion",
"enUS",
},
[135263] = {
"Ashvane Spotter",
"Siege of Boralus",
"enUS",
},
[98706] = {
"Commander Shemdah'sohn",
"Black Rook Hold",
"enUS",
},
[216336] = {
"Ravenous Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[204188] = {
"Tomb-Raider Drywhisker",
"Kriegval's Rest",
"enUS",
},
[229252] = {
"Darkfuse Hyena",
"Operation: Floodgate",
"enUS",
},
[231928] = {
"Bomb Bot",
"Kriegval's Rest",
"enUS",
},
[164921] = {
"Drust Harvester",
"Mists of Tirna Scithe",
"enUS",
},
[219022] = {
"Ascended Webfriar",
"The Underkeep",
"enUS",
},
[210966] = {
"Sureki Webmage",
"The Dawnbreaker",
"enUS",
},
[126919] = {
"Irontide Stormcaller",
"Freehold",
},
[195877] = {
"Risen Mystic",
"The Nokhud Offensive",
"enUS",
},
[168627] = {
"Plaguebinder",
"Plaguefall",
},
[131436] = {
"Chosen Blood Matron",
"The Underrot",
},
[179893] = {
"Cartel Skulker",
"Tazavesh, the Veiled Market",
"enUS",
},
[215826] = {
"Bloodworker",
"Ara-Kara, City of Echoes",
"enUS",
},
[164804] = {
"Droman Oulfarran",
"Mists of Tirna Scithe",
"enUS",
},
[189340] = {
"Chargath, Bane of Scales",
"Neltharus",
"enUS",
},
[98275] = {
"Risen Archer",
"Black Rook Hold",
"enUS",
},
[195878] = {
"Ukhel Beastcaller",
"The Nokhud Offensive",
"enUS",
},
[175546] = {
"Timecap'n Hooktail",
"Tazavesh, the Veiled Market",
"enUS",
},
[131685] = {
"Runic Disciple",
"Waycrest Manor",
},
[102287] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[163086] = {
"Rancid Gasbag",
"Theater of Pain",
"enUS",
},
[231380] = {
"Undercrawler",
"Operation: Floodgate",
"enUS",
},
[245092] = {
"Burrowing Creeper",
"Eco-Dome Al'dani",
"enUS",
},
[190405] = {
"Infuser Sariya",
"Halls of Infusion",
"enUS",
},
[216339] = {
"Sureki Unnaturaler",
"City of Threads",
"enUS",
},
[214421] = {
"Corrupted Thunderer",
"The Rookery",
"enUS",
},
[137484] = {
"King A'akul",
"Kings' Rest",
},
[220815] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[209230] = {
"Kyrioss",
"The Rookery",
"enUS",
},
[190381] = {
"Rotburst Totem",
"Brackenhide Hollow",
"enUS",
},
[190404] = {
"Subterranean Proto-Dragon",
"Halls of Infusion",
},
[129602] = {
"Irontide Enforcer",
"Freehold",
},
[216340] = {
"Sentry Stagshell",
"Ara-Kara, City of Echoes",
"enUS",
},
[211121] = {
"Rank Overseer",
"Darkflame Cleft",
"enUS",
},
[104270] = {
"Guardian Construct",
"Court of Stars",
},
[186220] = {
"Brackenhide Shaper",
"Brackenhide Hollow",
"enUS",
},
[207459] = {
"Fungal Rotcaster",
"Mycomancer Cavern",
"enUS",
},
[205727] = {
"Time-Lost Rocketeer",
"Dawn of the Infinite",
"enUS",
},
[199717] = {
"Nokhud Defender",
"The Nokhud Offensive",
"enUS",
},
[138465] = {
"Ashvane Cannoneer",
"Siege of Boralus",
"enUS",
},
[216341] = {
"Jabbing Flyer",
"Ara-Kara, City of Echoes",
"enUS",
},
[59552] = {
"The Crybaby Hozen",
"Temple of the Jade Serpent",
},
[175677] = {
"Smuggled Creature",
"Tazavesh, the Veiled Market",
"enUS",
},
[164552] = {
"Rotmarrow Slime",
"Plaguefall",
},
[189232] = {
"Kokia Blazehoof",
"Ruby Life Pools",
"enUS",
},
[231075] = {
"Chrome King Gallywix",
"Liberation of Undermine",
"enUS",
},
[138338] = {
"Reanimated Guardian",
"The Underrot",
},
[179386] = {
"Corsair Officer",
"Tazavesh, the Veiled Market",
"enUS",
},
[216342] = {
"Skittering Assistant",
"City of Threads",
"enUS",
},
[229769] = {
"Medbot",
"Awakening The Machine",
"enUS",
},
[224240] = {
"Twilight Flamerender",
"Grim Batol",
"enUS",
},
[175806] = {
"So'azmi",
"Tazavesh, the Veiled Market",
"enUS",
},
[220946] = {
"Venture Co. Honey Harvester",
"Cinderbrew Meadery",
"enUS",
},
[213913] = {
"Kobold Flametender",
"Darkflame Cleft",
"enUS",
},
[186420] = {
"Earthen Weaver",
"Uldaman: Legacy of Tyr",
"enUS",
},
[167111] = {
"Spinemaw Staghorn",
"Mists of Tirna Scithe",
"enUS",
},
[136549] = {
"Ashvane Cannoneer",
"Siege of Boralus",
"enUS",
},
[163882] = {
"Decaying Flesh Giant",
"Plaguefall",
},
[193293] = {
"Qalashi Warden",
"Neltharus",
"enUS",
},
[131818] = {
"Marked Sister",
"Waycrest Manor",
},
[133432] = {
"Venture Co. Alchemist",
"The MOTHERLODE!!",
"enUS",
},
[75459] = {
"Plagued Bat",
"Shadowmoon Burial Grounds",
},
[168942] = {
"Death Speaker",
"De Other Side",
},
[179388] = {
"Hourglass Tidesage",
"Tazavesh, the Veiled Market",
"enUS",
},
[205151] = {
"Tyr's Vanguard",
"Dawn of the Infinite",
"enUS",
},
[130404] = {
"Vermin Trapper",
"Freehold",
},
[177816] = {
"Interrogation Specialist",
"Tazavesh, the Veiled Market",
"enUS",
},
[136934] = {
"Weapons Tester",
"The MOTHERLODE!!",
"enUS",
},
[216856] = {
"Black Blood",
"Ara-Kara, City of Echoes",
"enUS",
},
[237661] = {
"Adarus Duskblaze",
"Manaforge Omega",
"enUS",
},
[236549] = {
"Crystalline Golem",
"Manaforge Omega",
"enUS",
},
[179733] = {
"Invigorating Fish Stick",
"Tazavesh, the Veiled Market",
"enUS",
},
[133482] = {
"Crawler Mine",
"The MOTHERLODE!!",
"enUS",
},
[41139] = {
"Naz'jar Oracle",
"Throne of the Tides",
"enUS",
},
[137830] = {
"Pallid Gorger",
"Waycrest Manor",
},
[96664] = {
"Valarjar Runecarver",
"Halls of Valor",
},
[239833] = {
"Elaena Emberlanz",
"Priory of the Sacred Flame",
"enUS",
},
[141283] = {
"Kul Tiran Halberd",
"Siege of Boralus",
},
[234206] = {
"Nightmare Crawler",
"The Dread Pit",
"enUS",
},
[185528] = {
"Trickclaw Mystic",
"Brackenhide Hollow",
"enUS",
},
[185656] = {
"Filth Caller",
"Brackenhide Hollow",
"enUS",
},
[244095] = {
"Failed Aspirant",
"Fungal Folly",
"enUS",
},
[176705] = {
"Venza Goldfuse",
"Tazavesh, the Veiled Market",
"enUS",
},
[131821] = {
"Faceless Maiden",
"Waycrest Manor",
"enUS",
},
[234843] = {
"Phase Stalker",
"Manaforge Omega",
"enUS",
},
[141284] = {
"Kul Tiran Wavetender",
"Siege of Boralus",
},
[241666] = {
"Shadowguard Juggernaut",
"Manaforge Omega",
"enUS",
},
[185529] = {
"Bracken Warscourge",
"Brackenhide Hollow",
"enUS",
},
[208244] = {
"Nerubian Threadmancer",
"Skittering Breach",
"enUS",
},
[186121] = {
"Decatriarch Wratheye",
"Brackenhide Hollow",
"enUS",
},
[234842] = {
"Voidveil Manta",
"Manaforge Omega",
"enUS",
},
[233817] = {
"Forgeweaver Araz",
"Manaforge Omega",
"enUS",
},
[166299] = {
"Mistveil Tender",
"Mists of Tirna Scithe",
"enUS",
},
[180159] = {
"Brawling Patron",
"Tazavesh, the Veiled Market",
"enUS",
},
[223253] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[45935] = {
"Temple Adept",
"The Vortex Pinnacle",
},
[241923] = {
"Arcane Echo",
"Manaforge Omega",
"enUS",
},
[144303] = {
"G.U.A.R.D.",
"Operation: Mechagon",
"enUS",
},
[206705] = {
"Arathi Footman",
"Priory of the Sacred Flame",
"enUS",
},
[165529] = {
"Depraved Collector",
"Halls of Atonement",
"enUS",
},
[206064] = {
"Coalesced Moment",
"Dawn of the Infinite",
"enUS",
},
[219034] = {
"Web Marauder",
"The Underkeep",
"enUS",
},
[184580] = {
"Olaf",
"Uldaman: Legacy of Tyr",
"enUS",
},
[214840] = {
"Engorged Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[208165] = {
"Alliance Knight",
"Dawn of the Infinite",
"enUS",
},
[224732] = {
"Covert Webmancer",
"City of Threads",
"enUS",
},
[230927] = {
"Darkfuse Shredder Pilot",
"Operation: Floodgate",
"enUS",
},
[133870] = {
"Diseased Lasher",
"The Underrot",
},
[184125] = {
"Chrono-Lord Deios",
"Uldaman: Legacy of Tyr",
"enUS",
},
[95771] = {
"Dreadsoul Ruiner",
"Darkheart Thicket",
"enUS",
},
[176394] = {
"P.O.S.T. Worker",
"Tazavesh, the Veiled Market",
"enUS",
},
[220314] = {
"Bogpiper",
"Mycomancer Cavern",
"enUS",
},
[131586] = {
"Banquet Steward",
"Waycrest Manor",
},
[244099] = {
"Prowling Voidstalker",
"Fungal Folly",
"enUS",
},
[168318] = {
"Forsworn Goliath",
"Spires of Ascension",
},
[122971] = {
"Dazar'ai Juggernaut",
"Atal'Dazar",
},
[130011] = {
"Irontide Buccaneer",
"Freehold",
},
[231312] = {
"Venture Co. Electrician",
"Operation: Floodgate",
"enUS",
},
[199368] = {
"Hardened Crystal",
"The Azure Vault",
"enUS",
},
[241798] = {
"Nexus-Prince Xevvos",
"Manaforge Omega",
"enUS",
},
[98521] = {
"Lord Etheldrin Ravencrest",
"Black Rook Hold",
"enUS",
},
[234893] = {
"Azhiccar",
"Eco-Dome Al'dani",
"enUS",
},
[219676] = {
"Nerl'athekk the Skulking",
"Skittering Breach",
"enUS",
},
[164562] = {
"Depraved Houndmaster",
"Halls of Atonement",
"enUS",
},
[207207] = {
"Voidstone Monstrosity",
"The Rookery",
"enUS",
},
[215968] = {
"Black Blood",
"Ara-Kara, City of Echoes",
"enUS",
},
[134284] = {
"Fallen Deathspeaker",
"The Underrot",
},
[185534] = {
"Bonebolt Hunter",
"Brackenhide Hollow",
"enUS",
},
[231197] = {
"Bubbles",
"Operation: Floodgate",
"enUS",
},
[244101] = {
"Shadowguard Phasecutter",
"Fungal Folly",
"enUS",
},
[179840] = {
"Market Peacekeeper",
"Tazavesh, the Veiled Market",
"enUS",
},
[213343] = {
"Forge Loader",
"The Stonevault",
"enUS",
},
[221979] = {
"Void Bound Howler",
"The Stonevault",
"enUS",
},
[134418] = {
"Drowned Depthbringer",
"Shrine of the Storm",
},
[179269] = {
"Oasis Security",
"Tazavesh, the Veiled Market",
"enUS",
},
[241800] = {
"Manaforged Titan",
"Manaforge Omega",
"enUS",
},
[240905] = {
"Arcane Collector",
"Manaforge Omega",
"enUS",
},
[212389] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[223770] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[235151] = {
"K'aresh Elemental",
"Eco-Dome Al'dani",
"enUS",
},
[222927] = {
"Sacred Flame Vintner",
"Priory of the Sacred Flame",
"enUS",
},
[196577] = {
"Spellbound Battleaxe",
"Algeth'ar Academy",
"enUS",
},
[214343] = {
"Kobyss Trickster",
"Tak-Rethan Abyss",
"enUS",
},
[241801] = {
"Shadowguard Reaper",
"Manaforge Omega",
"enUS",
},
[134514] = {
"Abyssal Cultist",
"Shrine of the Storm",
},
[129788] = {
"Irontide Bonesaw",
"Freehold",
},
[231497] = {
"Bombshell Crab",
"Operation: Floodgate",
"enUS",
},
[212827] = {
"High Priest Aemya",
"Priory of the Sacred Flame",
"enUS",
},
[184130] = {
"Earthen Custodian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[248707] = {
"Little Unbound Soul",
"Manaforge Omega",
"enUS",
},
[218324] = {
"Nakt",
"Ara-Kara, City of Echoes",
"enUS",
},
[131318] = {
"Elder Leaxa",
"The Underrot",
},
[213338] = {
"Forgebound Mender",
"The Stonevault",
"enUS",
},
[220575] = {
"Shadow Elemental",
"Kriegval's Rest",
"enUS",
},
[245255] = {
"Artoshion",
"Manaforge Omega",
"enUS",
},
[191164] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[212775] = {
"Faceless Seer",
"Throne of the Tides",
"enUS",
},
[207453] = {
"Fungal Rotspreader",
"Mycomancer Cavern",
"enUS",
},
[218961] = {
"Starved Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[241803] = {
"Nexus-Prince Ky'vor",
"Manaforge Omega",
"enUS",
},
[219984] = {
"Xeph'itik",
"City of Threads",
"enUS",
},
[200137] = {
"Depraved Mistweaver",
"Temple of the Jade Serpent",
},
[104278] = {
"Felbound Enforcer",
"Court of Stars",
},
[164567] = {
"Ingra Maloch",
"Mists of Tirna Scithe",
"enUS",
},
[184132] = {
"Earthen Warder",
"Uldaman: Legacy of Tyr",
"enUS",
},
[233152] = {
"Wandering Candle",
"Darkflame Cleft",
"enUS",
},
[208438] = {
"Infinite Saboteur",
"Dawn of the Infinite",
"enUS",
},
[226459] = {
"Glowmite",
"Tak-Rethan Abyss",
"enUS",
},
[129214] = {
"Coin-Operated Crowd Pummeler",
"The MOTHERLODE!!",
"enUS",
},
[214439] = {
"Corrupted Oracle",
"The Rookery",
"enUS",
},
[187969] = {
"Flashfrost Earthshaper",
"Ruby Life Pools",
"enUS",
},
[219810] = {
"Nerubian Ritualist",
"Skittering Breach",
"enUS",
},
[244115] = {
"Shadowguard Null Bastion",
"Fungal Folly",
"enUS",
},
[134174] = {
"Shadow-Borne Witch Doctor",
"Kings' Rest",
},
[234918] = {
"Wastes Creeper",
"Eco-Dome Al'dani",
"enUS",
},
[235807] = {
"Shadowguard Acolyte",
"Manaforge Omega",
"enUS",
},
[134417] = {
"Deepsea Ritualist",
"Shrine of the Storm",
},
[236946] = {
"Wasteland Creeper",
"Manaforge Omega",
"enUS",
},
[223775] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[237871] = {
"Unbound Assassin",
"Manaforge Omega",
"enUS",
},
[212778] = {
"Minion of Ghur'sha",
"Throne of the Tides",
"enUS",
},
[192333] = {
"Alpha Eagle",
"Algeth'ar Academy",
"enUS",
},
[220195] = {
"Sureki Silkbinder",
"City of Threads",
"enUS",
},
[211777] = {
"Spitfire Fusetender",
"Kriegval's Rest",
"enUS",
},
[242586] = {
"Arcane Manifestation",
"Manaforge Omega",
"enUS",
},
[236947] = {
"Burrowing Creeper",
"Manaforge Omega",
"enUS",
},
[113998] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[214697] = {
"Chef Chewie",
"Cinderbrew Meadery",
"enUS",
},
[214348] = {
"Undersea Abomination",
"Tak-Rethan Abyss",
"enUS",
},
[190401] = {
"Gusting Proto-Dragon",
"Halls of Infusion",
},
[220196] = {
"Herald of Ansurek",
"City of Threads",
"enUS",
},
[207949] = {
"Zealous Templar",
"Priory of the Sacred Flame",
"enUS",
},
[95842] = {
"Valarjar Thundercaller",
"Halls of Valor",
},
[237981] = {
"Shadowguard Mage",
"Manaforge Omega",
"enUS",
},
[210478] = {
"Infected Beast",
"The Waterworks",
"enUS",
},
[211262] = {
"Ixkreten the Unbreakable",
"The Dawnbreaker",
"enUS",
},
[208193] = {
"Paladin of the Silver Hand",
"Dawn of the Infinite",
"enUS",
},
[134137] = {
"Temple Attendant",
"Shrine of the Storm",
},
[220197] = {
"Royal Swarmguard",
"City of Threads",
"enUS",
},
[127106] = {
"Irontide Officer",
"Freehold",
},
[217518] = {
"Nightfall Inquisitor",
"Nightfall Sanctum",
"enUS",
},
[248481] = {
"Ky'veza's Shadow Clone",
"Kriegval's Rest",
"enUS",
},
[210479] = {
"Carnivorous Lasher",
"The Waterworks",
"enUS",
},
[174802] = {
"Venomous Sniper",
"Plaguefall",
},
[239379] = {
"Unbound Ethereal",
"Eco-Dome Al'dani",
"enUS",
},
[213932] = {
"Sureki Militant",
"The Dawnbreaker",
"enUS",
},
[129600] = {
"Bilge Rat Brinescale",
"Freehold",
},
[44404] = {
"Naz'jar Frost Witch",
"Throne of the Tides",
"enUS",
},
[229686] = {
"Venture Co. Surveyor",
"Operation: Floodgate",
"enUS",
},
[244111] = {
"Shadowguard Void Adept",
"Fungal Folly",
"enUS",
},
[246285] = {
"Bazaar Overseer",
"Tazavesh, the Veiled Market",
"enUS",
},
[243105] = {
"Anomalous Ectozoon",
"Fungal Folly",
"enUS",
},
[217519] = {
"Nightfall Shadeguard",
"Nightfall Sanctum",
"enUS",
},
},
["aura_cooldown_reverse"] = false,
["npc_colors"] = {
[0] = {
true,
false,
"fuchsia",
},
[190404] = {
true,
false,
"aqua",
},
[196798] = {
true,
false,
"fuchsia",
},
[231197] = {
true,
false,
"aqua",
},
[231325] = {
true,
false,
"orange",
},
[196671] = {
true,
false,
"aqua",
},
[180431] = {
true,
false,
"fuchsia",
},
[216364] = {
true,
false,
"fuchsia",
},
[195265] = {
true,
false,
"fuchsia",
},
[173655] = {
true,
false,
"aqua",
},
[173016] = {
true,
false,
"fuchsia",
},
[129602] = {
true,
false,
"aqua",
},
[229537] = {
true,
false,
"orange",
},
[231839] = {
true,
false,
"orange",
},
[120651] = {
true,
false,
"darkorange",
},
[212786] = {
true,
false,
"aqua",
},
[213937] = {
true,
false,
"aqua",
},
[197697] = {
true,
false,
"aqua",
},
[40633] = {
true,
false,
"aqua",
},
[135167] = {
false,
false,
"peru",
},
[214066] = {
true,
false,
"fuchsia",
},
[131587] = {
true,
false,
"fuchsia",
},
[126918] = {
false,
false,
"lightskyblue",
},
[196548] = {
true,
false,
"fuchsia",
},
[218671] = {
true,
false,
"fuchsia",
},
[236190] = {
true,
false,
"aqua",
},
[186191] = {
true,
false,
"fuchsia",
},
[206140] = {
true,
false,
"fuchsia",
},
[208698] = {
true,
false,
"fuchsia",
},
[221102] = {
true,
false,
"fuchsia",
},
[127111] = {
false,
false,
"fuchsia",
},
[168418] = {
true,
false,
"fuchsia",
},
[213942] = {
true,
false,
"fuchsia",
},
[199748] = {
true,
false,
"fuchsia",
},
[165222] = {
true,
false,
"fuchsia",
},
[199749] = {
true,
false,
"aqua",
},
[199877] = {
true,
false,
"fuchsia",
},
[168420] = {
true,
false,
"fuchsia",
},
[212793] = {
true,
false,
"fuchsia",
},
[134150] = {
false,
false,
"navajowhite",
},
[187602] = {
true,
false,
"dodgerblue",
},
[184022] = {
true,
false,
"fuchsia",
},
[128967] = {
false,
false,
"palegreen",
},
[210109] = {
true,
false,
"aqua",
},
[212411] = {
true,
false,
"orange",
},
[199368] = {
true,
false,
"DEATHKNIGHT",
},
[134024] = {
true,
false,
"fuchsia",
},
[178141] = {
true,
false,
"palegreen",
},
[212412] = {
true,
false,
"fuchsia",
},
[83892] = {
true,
false,
"fuchsia",
},
[178142] = {
true,
false,
"fuchsia",
},
[98406] = {
false,
false,
"transparent",
},
[137478] = {
false,
false,
"lightskyblue",
},
[208193] = {
true,
false,
"fuchsia",
},
[200137] = {
true,
false,
"fuchsia",
},
[135049] = {
true,
false,
"fuchsia",
},
[211263] = {
true,
false,
"aqua",
},
[164461] = {
true,
false,
"fuchsia",
},
[83893] = {
true,
false,
"fuchsia",
},
[128969] = {
true,
false,
"fuchsia",
},
[99366] = {
true,
false,
"fuchsia",
},
[220599] = {
true,
false,
"fuchsia",
},
[207940] = {
true,
false,
"fuchsia",
},
[223541] = {
true,
false,
"aqua",
},
[217531] = {
true,
false,
"fuchsia",
},
[98280] = {
true,
false,
"fuchsia",
},
[225204] = {
true,
false,
"fuchsia",
},
[205384] = {
true,
false,
"fuchsia",
},
[212673] = {
true,
false,
"aqua",
},
[136076] = {
false,
false,
"lightcoral",
},
[134158] = {
false,
false,
"navajowhite",
},
[172265] = {
true,
false,
"fuchsia",
},
[217533] = {
true,
false,
"fuchsia",
},
[220730] = {
true,
false,
"aqua",
},
[165872] = {
true,
false,
"fuchsia",
},
[214209] = {
true,
false,
"fuchsia",
},
[131858] = {
false,
false,
"dodgerblue",
},
[129547] = {
false,
false,
"fuchsia",
},
[45912] = {
true,
false,
"fuchsia",
},
[127757] = {
false,
false,
"lightcoral",
},
[208456] = {
true,
false,
"fuchsia",
},
[189531] = {
true,
false,
"fuchsia",
},
[137486] = {
false,
false,
"lightskyblue",
},
[219454] = {
true,
false,
"fuchsia",
},
[137103] = {
false,
false,
"lightsalmon",
},
[207946] = {
true,
false,
"fuchsia",
},
[162039] = {
true,
false,
"fuchsia",
},
[75713] = {
true,
false,
"fuchsia",
},
[138255] = {
false,
false,
"maroon",
},
[162040] = {
true,
false,
"fuchsia",
},
[195927] = {
true,
false,
"fuchsia",
},
[181861] = {
true,
false,
"aqua",
},
[195928] = {
true,
false,
"fuchsia",
},
[97197] = {
true,
false,
"fuchsia",
},
[126928] = {
false,
false,
"navajowhite",
},
[203857] = {
true,
false,
"fuchsia",
},
[195929] = {
true,
false,
"fuchsia",
},
[221760] = {
true,
false,
"fuchsia",
},
[131864] = {
true,
false,
"fuchsia",
},
[231223] = {
true,
false,
"fuchsia",
},
[186339] = {
true,
false,
"fuchsia",
},
[223423] = {
true,
false,
"aqua",
},
[195930] = {
true,
false,
"fuchsia",
},
[104295] = {
true,
false,
"fuchsia",
},
[193373] = {
true,
false,
"fuchsia",
},
[228539] = {
true,
false,
"fuchsia",
},
[133912] = {
true,
false,
"fuchsia",
},
[136214] = {
false,
false,
"plum",
},
[136470] = {
true,
false,
"fuchsia",
},
[90997] = {
true,
false,
"aqua",
},
[173044] = {
true,
false,
"fuchsia",
},
[214348] = {
true,
false,
"fuchsia",
},
[90998] = {
true,
false,
"fuchsia",
},
[224962] = {
true,
false,
"fuchsia",
},
[168058] = {
true,
false,
"fuchsia",
},
[105704] = {
true,
false,
"fuchsia",
},
[127315] = {
false,
false,
"plum",
},
[129553] = {
true,
false,
"fuchsia",
},
[174197] = {
true,
false,
"magenta",
},
[214350] = {
true,
false,
"fuchsia",
},
[168443] = {
true,
false,
"fuchsia",
},
[84989] = {
true,
false,
"fuchsia",
},
[196576] = {
true,
false,
"fuchsia",
},
[180336] = {
true,
false,
"fuchsia",
},
[170490] = {
true,
false,
"fuchsia",
},
[168572] = {
true,
false,
"fuchsia",
},
[134174] = {
false,
false,
"honeydew",
},
[225605] = {
true,
false,
"fuchsia",
},
[91000] = {
true,
false,
"aqua",
},
[84990] = {
true,
false,
"fuchsia",
},
[81985] = {
true,
false,
"fuchsia",
},
[122969] = {
true,
false,
"fuchsia",
},
[100527] = {
true,
false,
"fuchsia",
},
[197985] = {
true,
false,
"fuchsia",
},
[163459] = {
true,
false,
"fuchsia",
},
[178165] = {
true,
false,
"orange",
},
[104300] = {
true,
false,
"fuchsia",
},
[233152] = {
true,
false,
"orange",
},
[131492] = {
true,
false,
"fuchsia",
},
[76104] = {
true,
false,
"fuchsia",
},
[135329] = {
false,
false,
"plum",
},
[210264] = {
true,
false,
"aqua",
},
[219983] = {
true,
false,
"aqua",
},
[136353] = {
false,
false,
"royalblue",
},
[123227] = {
true,
false,
"fuchsia",
},
[219984] = {
true,
false,
"fuchsia",
},
[228424] = {
true,
false,
"fuchsia",
},
[162057] = {
true,
false,
"fuchsia",
},
[211289] = {
true,
false,
"orange",
},
[207453] = {
true,
false,
"fuchsia",
},
[186226] = {
true,
false,
"fuchsia",
},
[135204] = {
false,
false,
"honeydew",
},
[122972] = {
true,
false,
"fuchsia",
},
[205152] = {
true,
false,
"aqua",
},
[129366] = {
false,
false,
"goldenrod",
},
[170882] = {
true,
false,
"magenta",
},
[178171] = {
true,
false,
"aqua",
},
[139425] = {
false,
false,
"honeydew",
},
[218324] = {
true,
false,
"aqua",
},
[207199] = {
true,
false,
"fuchsia",
},
[196202] = {
true,
false,
"fuchsia",
},
[212826] = {
true,
false,
"orange",
},
[122973] = {
true,
false,
"fuchsia",
},
[100531] = {
true,
false,
"aqua",
},
[210269] = {
true,
false,
"orange",
},
[236995] = {
true,
false,
"aqua",
},
[207456] = {
true,
false,
"fuchsia",
},
[186229] = {
true,
false,
"aqua",
},
[129559] = {
false,
false,
"navajowhite",
},
[186741] = {
true,
false,
"fuchsia",
},
[174210] = {
true,
false,
"magenta",
},
[100532] = {
true,
false,
"fuchsia",
},
[207202] = {
true,
false,
"fuchsia",
},
[165515] = {
false,
false,
"aqua",
},
[229069] = {
true,
false,
"fuchsia",
},
[137511] = {
false,
false,
"navajowhite",
},
[217561] = {
true,
false,
"fuchsia",
},
[91006] = {
true,
false,
"fuchsia",
},
[40484] = {
true,
false,
"aqua",
},
[205158] = {
true,
false,
"fuchsia",
},
[195696] = {
true,
false,
"magenta",
},
[213343] = {
true,
false,
"aqua",
},
[171656] = {
true,
false,
"fuchsia",
},
[138281] = {
true,
false,
"aqua",
},
[213216] = {
true,
false,
"aqua",
},
[187897] = {
true,
false,
"aqua",
},
[129370] = {
true,
false,
"fuchsia",
},
[213217] = {
true,
false,
"fuchsia",
},
[207207] = {
true,
false,
"fuchsia",
},
[206696] = {
true,
false,
"orange",
},
[165137] = {
true,
false,
"fuchsia",
},
[234957] = {
true,
false,
"fuchsia",
},
[206697] = {
true,
false,
"fuchsia",
},
[137517] = {
false,
false,
"peru",
},
[130011] = {
true,
false,
"aqua",
},
[242631] = {
true,
false,
"orange",
},
[105715] = {
true,
false,
"fuchsia",
},
[212453] = {
true,
false,
"fuchsia",
},
[144296] = {
true,
false,
"aqua",
},
[179334] = {
true,
false,
"aqua",
},
[132532] = {
false,
false,
"palegreen",
},
[234960] = {
true,
false,
"aqua",
},
[139949] = {
false,
false,
"honeydew",
},
[224219] = {
true,
false,
"fuchsia",
},
[191739] = {
true,
false,
"aqua",
},
[224731] = {
false,
false,
"fuchsia",
},
[168594] = {
true,
false,
"fuchsia",
},
[144298] = {
true,
false,
"orange",
},
[176395] = {
true,
false,
"fuchsia",
},
[234962] = {
true,
false,
"fuchsia",
},
[167956] = {
true,
false,
"fuchsia",
},
[184580] = {
true,
false,
"fuchsia",
},
[129374] = {
true,
false,
"aqua",
},
[190207] = {
true,
false,
"fuchsia",
},
[169875] = {
true,
false,
"magenta",
},
[184581] = {
true,
false,
"aqua",
},
[104247] = {
true,
false,
"fuchsia",
},
[130909] = {
true,
false,
"aqua",
},
[186116] = {
true,
false,
"fuchsia",
},
[220003] = {
true,
false,
"aqua",
},
[206065] = {
true,
false,
"fuchsia",
},
[165529] = {
true,
false,
"magenta",
},
[98813] = {
true,
false,
"fuchsia",
},
[231385] = {
true,
false,
"aqua",
},
[45922] = {
true,
false,
"fuchsia",
},
[206066] = {
true,
false,
"fuchsia",
},
[214762] = {
true,
false,
"orange",
},
[186246] = {
true,
false,
"fuchsia",
},
[92612] = {
true,
false,
"aqua",
},
[166299] = {
true,
false,
"fuchsia",
},
[190340] = {
true,
false,
"aqua",
},
[136249] = {
false,
false,
"plum",
},
[204918] = {
true,
false,
"fuchsia",
},
[223844] = {
true,
false,
"fuchsia",
},
[171799] = {
true,
false,
"fuchsia",
},
[167963] = {
true,
false,
"fuchsia",
},
[180495] = {
true,
false,
"aqua",
},
[199037] = {
true,
false,
"fuchsia",
},
[206710] = {
true,
false,
"orange",
},
[101437] = {
false,
false,
"fuchsia",
},
[122984] = {
false,
false,
"peru",
},
[41096] = {
true,
false,
"fuchsia",
},
[166302] = {
true,
false,
"fuchsia",
},
[167965] = {
true,
false,
"fuchsia",
},
[226404] = {
true,
false,
"aqua",
},
[195842] = {
true,
false,
"fuchsia",
},
[163618] = {
true,
false,
"fuchsia",
},
[186125] = {
true,
false,
"fuchsia",
},
[190345] = {
true,
false,
"fuchsia",
},
[167967] = {
true,
false,
"fuchsia",
},
[137405] = {
true,
false,
"fuchsia",
},
[206074] = {
true,
false,
"fuchsia",
},
[205691] = {
true,
false,
"fuchsia",
},
[98370] = {
true,
false,
"fuchsia",
},
[239834] = {
true,
false,
"orange",
},
[163621] = {
true,
false,
"aqua",
},
[168992] = {
true,
false,
"fuchsia",
},
[134338] = {
false,
false,
"navajowhite",
},
[45477] = {
true,
false,
"aqua",
},
[196102] = {
true,
false,
"fuchsia",
},
[177816] = {
false,
false,
"fuchsia",
},
[98243] = {
true,
false,
"aqua",
},
[190348] = {
true,
false,
"fuchsia",
},
[239836] = {
true,
false,
"orange",
},
[177817] = {
true,
false,
"fuchsia",
},
[135235] = {
false,
false,
"goldenrod",
},
[165414] = {
true,
false,
"magenta",
},
[151476] = {
true,
false,
"aqua",
},
[136643] = {
true,
false,
"orange",
},
[165415] = {
false,
false,
"aqua",
},
[194315] = {
true,
false,
"fuchsia",
},
[130661] = {
true,
false,
"fuchsia",
},
[214264] = {
true,
false,
"aqua",
},
[168357] = {
true,
false,
"fuchsia",
},
[187155] = {
true,
false,
"fuchsia",
},
[210812] = {
true,
false,
"fuchsia",
},
[163882] = {
true,
false,
"fuchsia",
},
[195851] = {
false,
false,
"white",
},
[134599] = {
false,
false,
"lightskyblue",
},
[194317] = {
true,
false,
"fuchsia",
},
[169893] = {
true,
false,
"aqua",
},
[224240] = {
true,
false,
"aqua",
},
[134600] = {
false,
false,
"peru",
},
[201223] = {
true,
false,
"fuchsia",
},
[135240] = {
true,
false,
"fuchsia",
},
[217208] = {
true,
false,
"fuchsia",
},
[59545] = {
true,
false,
"fuchsia",
},
[135241] = {
true,
false,
"fuchsia",
},
[133835] = {
true,
false,
"fuchsia",
},
[222964] = {
true,
false,
"fuchsia",
},
[100485] = {
true,
false,
"aqua",
},
[133836] = {
true,
false,
"fuchsia",
},
[187160] = {
true,
false,
"aqua",
},
[187033] = {
true,
false,
"aqua",
},
[210818] = {
true,
false,
"fuchsia",
},
[192788] = {
true,
false,
"fuchsia",
},
[59546] = {
true,
false,
"fuchsia",
},
[102788] = {
true,
false,
"fuchsia",
},
[189464] = {
true,
false,
"fuchsia",
},
[76446] = {
true,
false,
"dodgerblue",
},
[198927] = {
true,
false,
"aqua",
},
[134990] = {
false,
false,
"honeydew",
},
[138187] = {
true,
false,
"fuchsia",
},
[197905] = {
true,
false,
"fuchsia",
},
[131666] = {
true,
false,
"fuchsia",
},
[212739] = {
true,
false,
"orange",
},
[163891] = {
true,
false,
"fuchsia",
},
[45928] = {
true,
false,
"aqua",
},
[144071] = {
true,
false,
"fuchsia",
},
[190362] = {
true,
false,
"fuchsia",
},
[224249] = {
true,
false,
"aqua",
},
[223994] = {
true,
false,
"fuchsia",
},
[213892] = {
true,
false,
"fuchsia",
},
[220158] = {
true,
false,
"aqua",
},
[163126] = {
true,
false,
"fuchsia",
},
[193944] = {
true,
false,
"fuchsia",
},
[81819] = {
true,
false,
"fuchsia",
},
[213893] = {
true,
false,
"fuchsia",
},
[131670] = {
false,
false,
"palegreen",
},
[189470] = {
true,
false,
"fuchsia",
},
[163128] = {
true,
false,
"fuchsia",
},
[168627] = {
true,
false,
"fuchsia",
},
[186658] = {
true,
false,
"fuchsia",
},
[206351] = {
true,
false,
"fuchsia",
},
[164920] = {
true,
false,
"aqua",
},
[216326] = {
true,
false,
"fuchsia",
},
[131545] = {
true,
false,
"fuchsia",
},
[190368] = {
true,
false,
"fuchsia",
},
[164921] = {
true,
false,
"fuchsia",
},
[167607] = {
true,
false,
"aqua",
},
[168886] = {
true,
false,
"fuchsia",
},
[134232] = {
true,
false,
"fuchsia",
},
[45930] = {
true,
false,
"fuchsia",
},
[205151] = {
true,
false,
"aqua",
},
[40943] = {
true,
false,
"fuchsia",
},
[160495] = {
true,
false,
"magenta",
},
[129367] = {
true,
false,
"fuchsia",
},
[40634] = {
true,
false,
"fuchsia",
},
[209801] = {
true,
false,
"aqua",
},
[192800] = {
true,
false,
"fuchsia",
},
[44404] = {
true,
false,
"fuchsia",
},
[129600] = {
true,
false,
"fuchsia",
},
[213932] = {
true,
false,
"fuchsia",
},
[212827] = {
true,
false,
"fuchsia",
},
[101991] = {
true,
false,
"fuchsia",
},
[210539] = {
true,
false,
"orange",
},
[211087] = {
true,
false,
"fuchsia",
},
[207198] = {
true,
false,
"fuchsia",
},
[234872] = {
false,
false,
"fuchsia",
},
[131677] = {
false,
false,
"lightskyblue",
},
[130404] = {
false,
false,
"peru",
},
[133463] = {
true,
false,
"orange",
},
[213934] = {
true,
false,
"aqua",
},
[135258] = {
false,
false,
"peru",
},
[75459] = {
true,
false,
"fuchsia",
},
[220423] = {
true,
false,
"aqua",
},
[43873] = {
true,
false,
"aqua",
},
[164414] = {
true,
false,
"fuchsia",
},
[133852] = {
false,
false,
"olivedrab",
},
[128434] = {
true,
false,
"fuchsia",
},
[190373] = {
true,
false,
"fuchsia",
},
[134418] = {
false,
false,
"dodgerblue",
},
[134364] = {
false,
false,
"honeydew",
},
[223777] = {
true,
false,
"fuchsia",
},
[139422] = {
false,
false,
"lightskyblue",
},
[134417] = {
false,
false,
"lightskyblue",
},
[167612] = {
true,
false,
"orange",
},
[84957] = {
true,
false,
"fuchsia",
},
[197535] = {
true,
false,
"fuchsia",
},
[191847] = {
true,
false,
"fuchsia",
},
[189340] = {
true,
false,
"aqua",
},
[137484] = {
false,
false,
"lightskyblue",
},
[198047] = {
true,
false,
"fuchsia",
},
[231075] = {
true,
false,
"aqua",
},
[229686] = {
true,
false,
"fuchsia",
},
[128435] = {
false,
false,
"aqua",
},
[113998] = {
true,
false,
"aqua",
},
[91001] = {
true,
false,
"aqua",
},
[188067] = {
true,
false,
"fuchsia",
},
[130635] = {
true,
false,
"fuchsia",
},
[176565] = {
true,
false,
"fuchsia",
},
[205337] = {
true,
false,
"fuchsia",
},
[153292] = {
false,
false,
"fuchsia",
},
[196115] = {
true,
false,
"fuchsia",
},
[165824] = {
true,
false,
"fuchsia",
},
[164929] = {
true,
false,
"aqua",
},
[224732] = {
true,
false,
"fuchsia",
},
[230748] = {
true,
false,
"fuchsia",
},
[132126] = {
false,
false,
"honeydew",
},
[131585] = {
false,
false,
"navajowhite",
},
[214673] = {
true,
false,
"fuchsia",
},
[135007] = {
false,
false,
"lightskyblue",
},
[190377] = {
true,
false,
"fuchsia",
},
[135263] = {
false,
false,
"maroon",
},
[98792] = {
true,
false,
"aqua",
},
[195876] = {
true,
false,
"fuchsia",
},
[149740] = {
true,
false,
"aqua",
},
[192789] = {
true,
false,
"aqua",
},
[98275] = {
true,
false,
"aqua",
},
[163086] = {
true,
false,
"orange",
},
[229252] = {
true,
false,
"fuchsia",
},
[210966] = {
true,
false,
"fuchsia",
},
[231496] = {
true,
false,
"fuchsia",
},
[195877] = {
true,
false,
"fuchsia",
},
[194895] = {
true,
false,
"fuchsia",
},
[179893] = {
true,
false,
"aqua",
},
[98706] = {
true,
false,
"aqua",
},
[216293] = {
true,
false,
"fuchsia",
},
[164804] = {
true,
false,
"aqua",
},
[194894] = {
true,
false,
"fuchsia",
},
[128455] = {
true,
false,
"aqua",
},
[195878] = {
true,
false,
"fuchsia",
},
[196043] = {
true,
false,
"fuchsia",
},
[131685] = {
true,
false,
"fuchsia",
},
[102287] = {
true,
false,
"aqua",
},
[206704] = {
true,
false,
"orange",
},
[184132] = {
true,
false,
"fuchsia",
},
[144303] = {
false,
false,
"fuchsia",
},
[104278] = {
true,
false,
"fuchsia",
},
[216339] = {
true,
false,
"fuchsia",
},
[214421] = {
true,
false,
"orange",
},
[125977] = {
false,
false,
"plum",
},
[220815] = {
true,
false,
"fuchsia",
},
[47238] = {
true,
false,
"fuchsia",
},
[95766] = {
true,
false,
"aqua",
},
[216338] = {
true,
false,
"orange",
},
[166275] = {
true,
false,
"fuchsia",
},
[75979] = {
true,
false,
"fuchsia",
},
[200126] = {
true,
false,
"fuchsia",
},
[104270] = {
true,
false,
"fuchsia",
},
[197912] = {
true,
false,
"fuchsia",
},
[167876] = {
true,
false,
"orange",
},
[205727] = {
true,
false,
"fuchsia",
},
[199717] = {
true,
false,
"fuchsia",
},
[138465] = {
true,
false,
"aqua",
},
[170690] = {
true,
false,
"magenta",
},
[59552] = {
true,
false,
"fuchsia",
},
[167493] = {
true,
false,
"fuchsia",
},
[164552] = {
true,
false,
"fuchsia",
},
[192333] = {
true,
false,
"fuchsia",
},
[131586] = {
false,
false,
"peru",
},
[138338] = {
true,
false,
"fuchsia",
},
[197698] = {
true,
false,
"aqua",
},
[216342] = {
true,
false,
"fuchsia",
},
[199603] = {
true,
false,
"fuchsia",
},
[134331] = {
false,
false,
"lightskyblue",
},
[131817] = {
true,
false,
"aqua",
},
[220946] = {
true,
false,
"orange",
},
[213913] = {
true,
false,
"fuchsia",
},
[186420] = {
true,
false,
"fuchsia",
},
[167111] = {
true,
false,
"fuchsia",
},
[136549] = {
true,
false,
"aqua",
},
[189265] = {
true,
false,
"fuchsia",
},
[163458] = {
true,
false,
"fuchsia",
},
[131818] = {
false,
false,
"plum",
},
[129788] = {
true,
false,
"fuchsia",
},
[190381] = {
true,
false,
"fuchsia",
},
[134139] = {
false,
false,
"lightskyblue",
},
[179388] = {
true,
false,
"fuchsia",
},
[144295] = {
true,
false,
"fuchsia",
},
[132491] = {
false,
false,
"palegreen",
},
[190342] = {
true,
false,
"fuchsia",
},
[136934] = {
true,
false,
"lightgreen",
},
[189235] = {
true,
false,
"fuchsia",
},
[131436] = {
true,
false,
"aqua",
},
[136295] = {
false,
false,
"peru",
},
[169927] = {
true,
false,
"fuchsia",
},
[133482] = {
true,
false,
"aqua",
},
[41139] = {
true,
false,
"fuchsia",
},
[137830] = {
true,
false,
"fuchsia",
},
[96664] = {
true,
false,
"fuchsia",
},
[212389] = {
true,
false,
"fuchsia",
},
[141283] = {
false,
false,
"navajowhite",
},
[163503] = {
true,
false,
"fuchsia",
},
[185528] = {
true,
false,
"fuchsia",
},
[185656] = {
true,
false,
"fuchsia",
},
[102232] = {
true,
false,
"fuchsia",
},
[113537] = {
true,
false,
"aqua",
},
[164557] = {
true,
false,
"orange",
},
[144293] = {
true,
false,
"orange",
},
[193457] = {
true,
false,
"aqua",
},
[134251] = {
false,
false,
"honeydew",
},
[185529] = {
true,
false,
"fuchsia",
},
[95769] = {
true,
false,
"fuchsia",
},
[190407] = {
true,
false,
"fuchsia",
},
[135239] = {
false,
false,
"paleturquoise",
},
[133685] = {
true,
false,
"fuchsia",
},
[130435] = {
false,
false,
"magenta",
},
[129529] = {
false,
false,
"goldenrod",
},
[223253] = {
true,
false,
"fuchsia",
},
[45935] = {
true,
false,
"fuchsia",
},
[137516] = {
false,
false,
"lightsalmon",
},
[220141] = {
true,
false,
"fuchsia",
},
[220060] = {
true,
false,
"fuchsia",
},
[95842] = {
true,
false,
"fuchsia",
},
[133430] = {
true,
false,
"orange",
},
[207969] = {
true,
false,
"fuchsia",
},
[135474] = {
true,
false,
"fuchsia",
},
[242209] = {
true,
false,
"fuchsia",
},
[208165] = {
true,
false,
"fuchsia",
},
[211228] = {
true,
false,
"fuchsia",
},
[141285] = {
false,
false,
"lightgreen",
},
[133870] = {
true,
false,
"fuchsia",
},
[207459] = {
true,
false,
"fuchsia",
},
[95771] = {
true,
false,
"fuchsia",
},
[178139] = {
true,
false,
"fuchsia",
},
[220314] = {
true,
false,
"fuchsia",
},
[224271] = {
true,
false,
"fuchsia",
},
[186220] = {
true,
false,
"fuchsia",
},
[189266] = {
true,
false,
"aqua",
},
[190405] = {
true,
false,
"fuchsia",
},
[81820] = {
true,
false,
"fuchsia",
},
[231312] = {
true,
false,
"fuchsia",
},
[193293] = {
true,
false,
"aqua",
},
[164501] = {
false,
false,
"fuchsia",
},
[98521] = {
true,
false,
"fuchsia",
},
[131821] = {
true,
false,
"fuchsia",
},
[170572] = {
true,
false,
"fuchsia",
},
[164562] = {
true,
false,
"fuchsia",
},
[134144] = {
false,
false,
"lightgreen",
},
[193462] = {
true,
false,
"fuchsia",
},
[228540] = {
true,
false,
"fuchsia",
},
[134701] = {
false,
false,
"maroon",
},
[95834] = {
true,
false,
"fuchsia",
},
[164506] = {
true,
false,
"fuchsia",
},
[194316] = {
true,
false,
"fuchsia",
},
[133432] = {
true,
false,
"fuchsia",
},
[221979] = {
true,
false,
"fuchsia",
},
[141284] = {
false,
false,
"lightskyblue",
},
[179269] = {
true,
false,
"fuchsia",
},
[126919] = {
true,
false,
"fuchsia",
},
[163157] = {
true,
false,
"fuchsia",
},
[59555] = {
true,
false,
"fuchsia",
},
[223770] = {
true,
false,
"fuchsia",
},
[235151] = {
true,
false,
"fuchsia",
},
[131819] = {
true,
false,
"fuchsia",
},
[137521] = {
false,
false,
"cornflowerblue",
},
[144294] = {
true,
false,
"fuchsia",
},
[165076] = {
true,
false,
"magenta",
},
[134514] = {
false,
false,
"lightgreen",
},
[204206] = {
true,
false,
"fuchsia",
},
[207468] = {
true,
false,
"fuchsia",
},
[206698] = {
true,
false,
"fuchsia",
},
[184130] = {
true,
false,
"aqua",
},
[219040] = {
true,
false,
"aqua",
},
[184023] = {
true,
false,
"fuchsia",
},
[131318] = {
false,
false,
"fuchsia",
},
[135365] = {
true,
false,
"fuchsia",
},
[134629] = {
false,
false,
"navajowhite",
},
[223772] = {
true,
false,
"fuchsia",
},
[191164] = {
true,
false,
"fuchsia",
},
[212775] = {
true,
false,
"fuchsia",
},
[98691] = {
false,
false,
"aqua",
},
[168578] = {
true,
false,
"fuchsia",
},
[196045] = {
true,
false,
"fuchsia",
},
[229251] = {
true,
false,
"orange",
},
[168318] = {
true,
false,
"fuchsia",
},
[223773] = {
true,
false,
"fuchsia",
},
[164567] = {
true,
false,
"fuchsia",
},
[189247] = {
true,
false,
"fuchsia",
},
[165919] = {
true,
false,
"fuchsia",
},
[190294] = {
true,
false,
"fuchsia",
},
[168942] = {
true,
false,
"fuchsia",
},
[134284] = {
true,
false,
"fuchsia",
},
[214439] = {
true,
false,
"fuchsia",
},
[131812] = {
true,
false,
"fuchsia",
},
[176564] = {
true,
false,
"aqua",
},
[122971] = {
true,
false,
"fuchsia",
},
[231380] = {
true,
false,
"fuchsia",
},
[211121] = {
true,
false,
"orange",
},
[213338] = {
true,
false,
"fuchsia",
},
[177716] = {
true,
false,
"fuchsia",
},
[153285] = {
false,
false,
"no color",
},
[223775] = {
true,
false,
"fuchsia",
},
[212403] = {
true,
false,
"fuchsia",
},
[196044] = {
true,
false,
"fuchsia",
},
[133007] = {
true,
false,
"aqua",
},
[220195] = {
true,
false,
"fuchsia",
},
[45919] = {
true,
false,
"aqua",
},
[208438] = {
true,
false,
"aqua",
},
[40167] = {
true,
false,
"fuchsia",
},
[223776] = {
true,
false,
"fuchsia",
},
[214697] = {
true,
false,
"orange",
},
[184301] = {
true,
false,
"fuchsia",
},
[190401] = {
true,
false,
"aqua",
},
[220196] = {
true,
false,
"fuchsia",
},
[234955] = {
true,
false,
"orange",
},
[136186] = {
false,
false,
"honeydew",
},
[230740] = {
true,
false,
"aqua",
},
[205363] = {
true,
false,
"fuchsia",
},
[211089] = {
true,
false,
"aqua",
},
[177998] = {
true,
false,
"fuchsia",
},
[134137] = {
false,
false,
"dodgerblue",
},
[220197] = {
true,
false,
"aqua",
},
[127106] = {
false,
false,
"peru",
},
[180091] = {
true,
false,
"aqua",
},
[206064] = {
true,
false,
"fuchsia",
},
[134157] = {
false,
false,
"peru",
},
[174802] = {
true,
false,
"fuchsia",
},
[177999] = {
true,
false,
"fuchsia",
},
[190403] = {
true,
false,
"aqua",
},
[151657] = {
true,
false,
"fuchsia",
},
[180429] = {
true,
false,
"aqua",
},
[213806] = {
true,
false,
"fuchsia",
},
[89] = {
true,
false,
"fuchsia",
},
[179841] = {
true,
false,
"fuchsia",
},
[208450] = {
true,
false,
"orange",
},
[176396] = {
false,
false,
"fuchsia",
},
},
["aura_stack_shadow_color"] = {
nil,
nil,
nil,
0,
},
["minor_height_scale"] = 0.9999999403953552,
["bossmod_cooldown_text_size"] = 10,
["cast_statusbar_spark_half"] = true,
["aura_padding"] = 2,
["hook_data"] = {
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    \n    --ATTENTION: after enabling this mod, you may have to adjust the anchor point at the Buff Settings tab\n    \n    local sortByTime = false\n    local invertSort = false\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        [\"Vampiric Touch\"] = 50,\n        [\"Shadow Word: Pain\"] = 22,\n        [\"Mind Flay\"] = 5,\n        [\"Pistol Shot\"] = 50,\n        [\"Marked for Death\"] = 99,\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or 1\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                 return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1754710660,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_reorder",
["Enabled"] = true,
["Revision"] = 372,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Desc"] = "Reorder buffs and debuffs following the settings set in the constructor.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "Aura Reorder [Plater]",
},
{
["Enabled"] = true,
["Revision"] = 146,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Author"] = "????????-Illidan",
["PlaterCore"] = 1,
["Desc"] = "Config aura borders",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border thickness\n    local size = 1 \n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (0, 0, 0, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()\n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end\n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame2.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (0, 0, 0, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()            \n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end    \nend",
},
["Prio"] = 99,
["Time"] = 1755150006,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["HooksTemp"] = {
},
["Name"] = "Advanced Debuff Border",
["Icon"] = 133006,
["Options"] = {
},
},
{
["Enabled"] = true,
["Revision"] = 105,
["OptionsValues"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Cyclopes-Turalyon",
["PlaterCore"] = 1,
["Desc"] = "Add an icon to indicate an unit has Aggro on you. By default only show for units using a custom color from Npc Colors.",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.ThreatIcon) then\n        unitFrame.ThreatIcon:Hide()\n    end\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIndicator (unitFrame)\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateThreatState (unitFrame, unitId)\n    \nend\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.ThreatIcon) then\n        unitFrame.ThreatIcon:Hide()\n    end\nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.ThreatIcon) then\n        unitFrame.ThreatIcon:Hide()\n    end    \nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdatePlayerRole (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.Anchor = {side = 11, x = -2, y = 0}\n    envTable.Texture = \"Interface\\\\AddOns\\\\Plater\\\\media\\\\exclamation2_64\"\n    \n    --it'll only use the icon if the nameplate has a color from the Npc Colors tab and \"Only Scripts\" disabled.\n    envTable.OnlyWhenUsingNpcColor = true --if false, it'll always use the icon\n    \n    --private\n    envTable.PlayerRole = \"NONE\" --automatically changed by the script\n    \n    function envTable.CreateIndicator (unitFrame)\n        if (not unitFrame.ThreatIcon) then\n            unitFrame.ThreatIcon = unitFrame.healthBar:CreateTexture (nil, \"overlay\")\n        end\n    end\n    \n    function envTable.UpdateIndicator (unitFrame)\n        envTable.CreateIndicator (unitFrame)\n        \n        unitFrame.ThreatIcon:SetTexture (envTable.Texture)\n        Plater.SetAnchor (unitFrame.ThreatIcon, envTable.Anchor)\n        unitFrame.ThreatIcon:SetSize (unitFrame.healthBar:GetHeight(), unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateThreatState (unitFrame, unitId)\n        if (not unitFrame.ThreatIcon) then --if there's no icon created yet\n            return\n            \n        elseif (not Plater.IsInCombat()) then --not in combat\n            unitFrame.ThreatIcon:Hide()\n            return\n            \n        elseif (unitFrame.IsSelf) then --personal bar\n            unitFrame.ThreatIcon:Hide()\n            return\n            \n        elseif (envTable.OnlyWhenUsingNpcColor) then --must be using a npc color?\n            if (not unitFrame.UsingCustomColor) then\n                unitFrame.ThreatIcon:Hide()\n                return\n            end\n        end\n        \n        local isTanking, threatStatus, threatpct = UnitDetailedThreatSituation (\"player\", unitId)\n        \n        if (isTanking) then\n            if (envTable.PlayerRole == \"TANK\") then\n                unitFrame.ThreatIcon:Hide()\n            else\n                unitFrame.ThreatIcon:Show()\n                unitFrame.ThreatIcon:SetVertexColor (unpack (envTable.NameplateAggroColor))\n            end\n        else\n            if (envTable.PlayerRole == \"TANK\") then\n                unitFrame.ThreatIcon:Show()\n                unitFrame.ThreatIcon:SetVertexColor (unpack (envTable.NameplateNoAggroColor))                \n            else\n                unitFrame.ThreatIcon:Hide()                \n            end\n        end\n    end\n    \n    function envTable.UpdatePlayerRole (unitFrame)\n        local profile = Plater.db.profile\n        local role = Plater:GetPlayerRole()\n        \n        if (role == \"TANK\") then\n            envTable.PlayerRole = \"TANK\"\n            envTable.NameplateAggroColor = profile.tank.colors.aggro\n            envTable.NameplateNoAggroColor = profile.tank.colors.noaggro\n            \n        else\n            envTable.PlayerRole = \"DAMAGER\"\n            envTable.NameplateAggroColor = profile.dps.colors.aggro\n            envTable.NameplateNoAggroColor = profile.dps.colors.noaggro\n            \n        end        \n    end\n    \n    envTable.UpdatePlayerRole (unitFrame)\n    \nend",
},
["Prio"] = 33,
["Time"] = 1755593477,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["HooksTemp"] = {
},
["Name"] = "Aggro Indicator",
["Icon"] = 132344,
["Options"] = {
},
},
{
["Enabled"] = true,
["Revision"] = 148,
["OptionsValues"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Izimode-Azralon",
["PlaterCore"] = 1,
["Desc"] = "Adds a pixels perfect border around the cast bar.",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder:Hide()\n    end    \nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    \n    --hide the icon of the spell, may require /reload after changing\n    envTable.HideIcon = false\n    \n    --border settings\n    envTable.BorderThickness = 1.5\n    envTable.BorderColor = \"black\"\n    \n    --private\n    --create the border\n    if (not unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder = CreateFrame (\"frame\", nil, unitFrame.castBar, \"NamePlateFullBorderTemplate\")\n    end    \n    \n    --update the border\n    function envTable.UpdateBorder (unitFrame)\n        local castBar = unitFrame.castBar\n        \n        local r, g, b, a = DetailsFramework:ParseColors (envTable.BorderColor)\n        castBar.CastBarBorder:SetVertexColor (r, g, b, a)\n        \n        local size = envTable.BorderThickness\n        castBar.CastBarBorder:SetBorderSizes (size, size, size, size)\n        castBar.CastBarBorder:UpdateSizes()        \n        \n        if (envTable.HideIcon) then\n            castBar.Icon:Hide()\n        end\n        \n        castBar.CastBarBorder:Show()\n    end\n    \nend\n\n\n\n\n",
},
["Prio"] = 99,
["Name"] = "Cast Bar Border",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["HooksTemp"] = {
},
["Time"] = 1755230118,
["Icon"] = 133004,
["Options"] = {
},
},
{
["Enabled"] = true,
["Revision"] = 98,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Author"] = "?????-Illidan",
["PlaterCore"] = 1,
["Desc"] = "Format Buff Special icons like the regular aura icons.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --    if false then return end\n    \n    for _, iconFrame in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n        \n        unitFrame.ExtraIconFrame.options.show_text = true\n        \n        local profile = Plater.db.profile\n        \n        Plater.SetAnchor (iconFrame.CountdownText, profile.aura_timer_text_anchor)\n        Plater:SetFontSize (iconFrame.CountdownText, profile.aura_timer_text_size)\n        Plater:SetFontFace (iconFrame.CountdownText, profile.aura_timer_text_font)\n        \n        Plater.SetFontOutlineAndShadow (iconFrame.CountdownText, profile.aura_timer_text_outline, profile.aura_timer_text_shadow_color, profile.aura_timer_text_shadow_color_offset[1], profile.aura_timer_text_shadow_color_offset[2])\n        \n        iconFrame.Cooldown:SetEdgeTexture (profile.aura_cooldown_edge_texture)\n        iconFrame.Cooldown:SetReverse (profile.aura_cooldown_reverse)\n        iconFrame.Cooldown:SetDrawSwipe (profile.aura_cooldown_show_swipe)        \n        \n    end\n    \nend",
},
["Prio"] = 99,
["Time"] = 1754710658,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["HooksTemp"] = {
},
["Name"] = "Buff Special Mod",
["Icon"] = 136139,
["Options"] = {
},
},
{
["Enabled"] = true,
["Revision"] = 64,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Author"] = "Ditador-Azralon",
["PlaterCore"] = 1,
["Desc"] = "Set the unit name to be above the target shading texture.",
["Hooks"] = {
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    unitFrame.unitName:SetDrawLayer (\"overlay\", 7)\nend\n\n\n\n\n\n\n\n\n",
},
["Prio"] = 99,
["Time"] = 1754710639,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["HooksTemp"] = {
},
["Name"] = "Unit Name Over Target Shading",
["Icon"] = 237377,
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    function envTable.CheckAggro (unitFrame)\n        --if the player isn't in combat, ignore this check\n        if (not Plater.IsInCombat()) then\n            return\n        end\n        \n        --Disable in PVP\n        if (UnitPlayerControlled(unitFrame.unit))\n        then \n            return     \n        end\n        \n        --if this unit isn't in combat, ignore\n        if (not unitFrame.InCombat) then\n            return \n        end\n        \n        --player is a tank?\n        if (Plater.PlayerIsTank) then\n            --player isn't tanking this unit?\n            if (not unitFrame.namePlateThreatIsTanking) then\n                --check if a second tank is tanking it\n                if (Plater.ZoneInstanceType == \"raid\") then\n                    --return a list with the name of tanks in the raid\n                    local tankPlayersInTheRaid = Plater.GetTanks()\n                    \n                    --get the target name of this unit\n                    local unitTargetName = UnitName (unitFrame.targetUnitID)\n                    \n                    --check if the unit isn't targeting another tank in the raid and paint the color\n                    if (not tankPlayersInTheRaid [unitTargetName]) then\n                        Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                    else\n                        --another tank is tanking this unit\n                        --do nothing\n                    end\n                    \n                else\n                    Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                end\n            end\n            \n        else\n            --player is a dps or healer\n            if (unitFrame.namePlateThreatIsTanking) then\n                Plater.SetNameplateColor (unitFrame, Plater.db.profile.dps.colors.aggro)\n            end\n            \n        end        \n    end\nend\n\n\n\n\n\n\n",
},
["Time"] = 1756735050,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/id_wRWfKp/2",
["Icon"] = "Interface\\AddOns\\Plater\\media\\checked_64",
["Enabled"] = true,
["Revision"] = 69,
["semver"] = "1.0.1",
["Author"] = "Kastfall-Azralon",
["Desc"] = "When a mob is attacking you, force show the threat color. For tanks, force threat color if the mob is not attacking you.",
["Prio"] = 20,
["version"] = 2,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "Force Threat Color",
},
{
["OptionsValues"] = {
["manualNameOverwrites"] = {
{
"Mordretha, the Endless Empress",
"Mordretha",
},
},
["abbreviateLeftToRight"] = false,
["nameLength"] = 15,
["abbreviate"] = true,
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.shortenNameplateName(unitId, unitFrame, modTable.config, envTable)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.shortenNameplateName(unitId, unitFrame, modTable.config, envTable)\nend",
["Initialization"] = "function (modTable)\n    local cache = {}\n    local concat = table.concat\n    local utf8Enabled = string.utf8len and string.utf8sub and true\n    \n    local utf8len = function(str)\n        if utf8Enabled then\n            return str:utf8len()\n        end\n        \n        local count = 0\n        for _ in str:gmatch(\"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") do\n            count = count + 1\n        end\n        \n        return count\n    end\n    \n    local utf8sub = function(str, from, to)\n        if utf8Enabled then\n            return str:utf8sub(from, to)\n        end\n        \n        local extracted = {}\n        local size = 0\n        local count = 0\n        for char in str:gmatch(\"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") do\n            count = count + 1\n            \n            if count >= from and count <= to then\n                size = size + 1\n                extracted[size] = char\n            end\n            \n            if count >= to then return concat(extracted) end\n        end\n        \n        return \"\"\n    end\n    \n    -- Left to right works in the following steps for \"The Best Warrior Linaori\":\n    -- T. Best Warrior Linaori\n    -- T.B. Warrior Linaori\n    -- T.B.W. Linaori\n    local reduceLeftToRight\n    reduceLeftToRight = function (leftPart, rightPart, lastPartLength, nameLength)\n        if not rightPart or utf8len(rightPart) == 0 then\n            return leftPart, rightPart\n        end\n        \n        -- 2 spaces added to the length after concat\n        if 2 + utf8len(leftPart) + utf8len(rightPart) + lastPartLength <= nameLength then\n            return leftPart .. \" \" .. rightPart, \"\"\n        end\n        \n        local firstWord, remainingRightPart = rightPart:match(\"^([^ ]*)[ ](.*)$\")\n        if not firstWord then\n            firstWord = rightPart\n            remainingRightPart = \"\"\n        end\n        leftPart = leftPart .. utf8sub(firstWord, 1, 1) .. \".\"\n        \n        return reduceLeftToRight(leftPart, remainingRightPart, lastPartLength, nameLength)\n    end\n    \n    -- Right to left works in the following steps for \"The Best Warrior Linaori\":\n    -- The Best W. Linaori\n    -- The B.W. Linaori\n    -- T.B.W. Linaori\n    local reduceRightToLeft\n    reduceRightToLeft = function (leftPart, rightPart, lastPartLength, nameLength)\n        if not leftPart or utf8len(leftPart) == 0 then\n            return leftPart, rightPart\n        end\n        \n        -- 2 spaces added to the length after concat\n        if 2 + utf8len(leftPart) + utf8len(rightPart) + lastPartLength <= nameLength then\n            return \"\", leftPart .. \" \" .. rightPart\n        end\n        \n        local remainingLeftPart, lastWord = leftPart:match(\"^(.*)[ ]([^ ]*)$\")\n        \n        if not remainingLeftPart then\n            remainingLeftPart = \"\"\n            lastWord = leftPart\n        end\n        \n        rightPart = utf8sub(lastWord, 1, 1) .. \".\" .. rightPart\n        \n        return reduceRightToLeft(remainingLeftPart, rightPart, lastPartLength, nameLength)\n    end\n    \n    local cutOffName = function (wholeName, config)\n        if config.noSplitCutoff then\n            return utf8sub(wholeName, 1, config.nameLength)\n        end\n        \n        return wholeName\n    end\n    \n    local shorten = function (unitId, nameplateUnitName, config, nameLength)\n        -- let the player overwrite the name regardless of length based on the NPC name\n        local manualNameOverwrite = config.manualNameOverwrites[nameplateUnitName]\n        if manualNameOverwrite then\n            return manualNameOverwrite\n        end\n        \n        -- let the player overwrite the name regardless of length based on the NPC ID\n        local npcId = select(6, strsplit(\"-\", UnitGUID(unitId)))\n        local manualNpcIdOverwrite = config.manualNameOverwrites[npcId]\n        if manualNpcIdOverwrite then\n            return manualNpcIdOverwrite\n        end\n        \n        -- the original name is short enough already\n        if utf8len(nameplateUnitName) <= nameLength then\n            return nameplateUnitName\n        end\n        \n        -- Naming often implies \"<name>, <title>\" or \"<title> <name>\"\n        if nameplateUnitName:find(\",\") then\n            -- assumed that \",\" implies a title, and try to strip them of their title\n            local possibleName = nameplateUnitName:match(\"^(.*)[,][^,]*$\")\n            \n            if possibleName then\n                if utf8len(possibleName) <= nameLength then\n                    return possibleName\n                end\n                \n                -- in case of longer names: \"Linaori the best fury warrior ever, of the deeps\n                nameplateUnitName = possibleName\n            end\n        end\n        \n        -- Forsworn Squad-Leader -> Forsworn Squad Leader\n        -- Squad-Leader of the Forsworn -> Squad Leader of the Forsworn\n        if config.hyphenAsSpace then\n            local lastPart\n            \n            -- keep \"Forsworn Squad-Leader\" as is, while still replacing \"Squad-Leader of the Forsworn\"\n            if config.keepHyphenInLastName then\n                local _, spaces = nameplateUnitName:gsub(\" \", \"\")\n                if spaces > 0 then\n                    nameplateUnitName, lastPart = nameplateUnitName:match(\"^(.*)[ ]([^ ]*)$\")\n                end\n            end\n            \n            nameplateUnitName = nameplateUnitName:gsub(\"-\", \" \")\n            if lastPart then\n                nameplateUnitName = nameplateUnitName .. \" \" .. lastPart\n            end\n        end\n        \n        -- amount of times we can check if the name needs replacing\n        local _, occurrences = nameplateUnitName:gsub(\" \", \"\")\n        \n        -- no spaces left to split on, just return whatever can be made of it\n        if occurrences == 0 then\n            return cutOffName(nameplateUnitName, config)\n        end\n        \n        local nameToShorten, nameToKeep, nameToKeepLength\n        if config.keepRightSide then\n            -- we always want the last name if possible\n            -- example: Cleave Training Dummy -> Dummy\n            nameToShorten, nameToKeep = nameplateUnitName:match(\"^(.*)[ ]([^ ]*)$\")\n            nameToKeepLength = utf8len(nameToKeep)\n        else\n            -- we always want the first name if possible\n            -- example: Cleave Training Dummy -> Cleave\n            nameToKeep, nameToShorten = nameplateUnitName:match(\"^([^ ]*)[ ](.*)$\")\n            nameToKeepLength = utf8len(nameToKeep)\n        end\n        \n        -- in case the name to keep is too long, just use that\n        if nameToKeepLength > nameLength or not config.abbreviate then\n            return cutOffName(nameToKeep, config)\n        end\n        \n        local shortenedName\n        if config.abbreviateLeftToRight then\n            shortenedName, _ = reduceLeftToRight(\"\", nameToShorten, nameToKeepLength, nameLength)\n        else\n            _, shortenedName = reduceRightToLeft(nameToShorten, \"\", nameToKeepLength, nameLength)\n        end\n        \n        if config.keepRightSide then\n            return shortenedName .. \" \" .. nameToKeep\n        else\n            return nameToKeep .. \" \" .. shortenedName\n        end\n    end\n    \n    local tryCache = function (unitId, nameplateUnitName, config, nameLength)\n        if cache[nameLength] == nil then\n            cache[nameLength] = {}\n        end\n        \n        if cache[nameLength][nameplateUnitName] == nil then\n            cache[nameLength][nameplateUnitName] = shorten(unitId, nameplateUnitName, config, nameLength)\n        end\n        \n        return cache[nameLength][nameplateUnitName]\n    end\n    \n    modTable.shortenNameplateName = function (unitId, unitFrame, config)\n        if not unitId or not unitFrame.namePlateUnitName then return end\n        \n        if config.ignorePlayers and unitFrame.isPlayer then return end\n        if config.ignoreFriendlyNpcNameplate and unitFrame.actorType == \"friendlynpc\" then return end\n        if config.ignoreObjectNameplate and unitFrame.isObject then return end\n        \n        local name = tryCache(unitId, unitFrame.namePlateUnitName, config, config.nameLength)\n        \n        if name == unitFrame.namePlateUnitName then return end\n        \n        unitFrame.namePlateUnitName = name\n        unitFrame.PlateFrame.namePlateUnitName = name\n        unitFrame.healthBar.unitName:SetText(name)\n        unitFrame.ActorNameSpecial:SetText(name)\n    end\n    \n    modTable.shortenCastBarName = function (unitId, unitFrame, config)\n        if not unitId then return end\n        \n        local castBar = unitFrame.castBar\n        if not castBar.unit then return end\n        local targetUnitId = castBar.unit .. \"target\"\n        \n        if not UnitExists(targetUnitId) then return end\n        \n        local isPlayer = UnitIsPlayer(targetUnitId)\n        if config.ignorePlayers and isPlayer then return end\n        if config.ignoreFriendlyNpcCastBar and not isPlayer and UnitIsFriend(\"player\", targetUnitId) then return end\n        \n        local targetName = castBar.FrameOverlay.TargetName\n        local oldName = targetName:GetText()\n        if not oldName then return end\n        \n        local newName = tryCache(unitId, oldName, config, config.castBarNameLength)\n        if oldName == newName then return end\n        \n        targetName:SetText(newName)\n    end\nend",
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.shortenCastBarName(unitId, unitFrame, modTable.config, envTable)\nend\n\n\n",
},
["Time"] = 1757544355,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/name-shortener-for-plater/18",
["Icon"] = 134331,
["Enabled"] = true,
["Revision"] = 1038,
["semver"] = "1.1.4",
["Author"] = "Linalori-Ragnaros",
["Desc"] = "Tries to make sense of long names",
["Prio"] = 99,
["Name"] = "Smart Name Shortener",
["PlaterCore"] = 1,
["version"] = 18,
["HooksTemp"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.shortenNameplateName(unitId, unitFrame, modTable.config, envTable)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.shortenNameplateName(unitId, unitFrame, modTable.config, envTable)\nend",
["Initialization"] = "function (modTable)\n    local cache = {}\n    local concat = table.concat\n    local utf8Enabled = string.utf8len and string.utf8sub and true\n    \n    local utf8len = function(str)\n        if utf8Enabled then\n            return str:utf8len()\n        end\n        \n        local count = 0\n        for _ in str:gmatch(\"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") do\n            count = count + 1\n        end\n        \n        return count\n    end\n    \n    local utf8sub = function(str, from, to)\n        if utf8Enabled then\n            return str:utf8sub(from, to)\n        end\n        \n        local extracted = {}\n        local size = 0\n        local count = 0\n        for char in str:gmatch(\"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") do\n            count = count + 1\n            \n            if count >= from and count <= to then\n                size = size + 1\n                extracted[size] = char\n            end\n            \n            if count >= to then return concat(extracted) end\n        end\n        \n        return \"\"\n    end\n    \n    -- Left to right works in the following steps for \"The Best Warrior Linaori\":\n    -- T. Best Warrior Linaori\n    -- T.B. Warrior Linaori\n    -- T.B.W. Linaori\n    local reduceLeftToRight\n    reduceLeftToRight = function (leftPart, rightPart, lastPartLength, nameLength)\n        if not rightPart or utf8len(rightPart) == 0 then\n            return leftPart, rightPart\n        end\n        \n        -- 2 spaces added to the length after concat\n        if 2 + utf8len(leftPart) + utf8len(rightPart) + lastPartLength <= nameLength then\n            return leftPart .. \" \" .. rightPart, \"\"\n        end\n        \n        local firstWord, remainingRightPart = rightPart:match(\"^([^ ]*)[ ](.*)$\")\n        if not firstWord then\n            firstWord = rightPart\n            remainingRightPart = \"\"\n        end\n        leftPart = leftPart .. utf8sub(firstWord, 1, 1) .. \".\"\n        \n        return reduceLeftToRight(leftPart, remainingRightPart, lastPartLength, nameLength)\n    end\n    \n    -- Right to left works in the following steps for \"The Best Warrior Linaori\":\n    -- The Best W. Linaori\n    -- The B.W. Linaori\n    -- T.B.W. Linaori\n    local reduceRightToLeft\n    reduceRightToLeft = function (leftPart, rightPart, lastPartLength, nameLength)\n        if not leftPart or utf8len(leftPart) == 0 then\n            return leftPart, rightPart\n        end\n        \n        -- 2 spaces added to the length after concat\n        if 2 + utf8len(leftPart) + utf8len(rightPart) + lastPartLength <= nameLength then\n            return \"\", leftPart .. \" \" .. rightPart\n        end\n        \n        local remainingLeftPart, lastWord = leftPart:match(\"^(.*)[ ]([^ ]*)$\")\n        \n        if not remainingLeftPart then\n            remainingLeftPart = \"\"\n            lastWord = leftPart\n        end\n        \n        rightPart = utf8sub(lastWord, 1, 1) .. \".\" .. rightPart\n        \n        return reduceRightToLeft(remainingLeftPart, rightPart, lastPartLength, nameLength)\n    end\n    \n    local cutOffName = function (wholeName, config)\n        if config.noSplitCutoff then\n            return utf8sub(wholeName, 1, config.nameLength)\n        end\n        \n        return wholeName\n    end\n    \n    local shorten = function (unitId, nameplateUnitName, config, nameLength)\n        -- let the player overwrite the name regardless of length based on the NPC name\n        local manualNameOverwrite = config.manualNameOverwrites[nameplateUnitName]\n        if manualNameOverwrite then\n            return manualNameOverwrite\n        end\n        \n        -- let the player overwrite the name regardless of length based on the NPC ID\n        local npcId = select(6, strsplit(\"-\", UnitGUID(unitId)))\n        local manualNpcIdOverwrite = config.manualNameOverwrites[npcId]\n        if manualNpcIdOverwrite then\n            return manualNpcIdOverwrite\n        end\n        \n        -- the original name is short enough already\n        if utf8len(nameplateUnitName) <= nameLength then\n            return nameplateUnitName\n        end\n        \n        -- Naming often implies \"<name>, <title>\" or \"<title> <name>\"\n        if nameplateUnitName:find(\",\") then\n            -- assumed that \",\" implies a title, and try to strip them of their title\n            local possibleName = nameplateUnitName:match(\"^(.*)[,][^,]*$\")\n            \n            if possibleName then\n                if utf8len(possibleName) <= nameLength then\n                    return possibleName\n                end\n                \n                -- in case of longer names: \"Linaori the best fury warrior ever, of the deeps\n                nameplateUnitName = possibleName\n            end\n        end\n        \n        -- Forsworn Squad-Leader -> Forsworn Squad Leader\n        -- Squad-Leader of the Forsworn -> Squad Leader of the Forsworn\n        if config.hyphenAsSpace then\n            local lastPart\n            \n            -- keep \"Forsworn Squad-Leader\" as is, while still replacing \"Squad-Leader of the Forsworn\"\n            if config.keepHyphenInLastName then\n                local _, spaces = nameplateUnitName:gsub(\" \", \"\")\n                if spaces > 0 then\n                    nameplateUnitName, lastPart = nameplateUnitName:match(\"^(.*)[ ]([^ ]*)$\")\n                end\n            end\n            \n            nameplateUnitName = nameplateUnitName:gsub(\"-\", \" \")\n            if lastPart then\n                nameplateUnitName = nameplateUnitName .. \" \" .. lastPart\n            end\n        end\n        \n        -- amount of times we can check if the name needs replacing\n        local _, occurrences = nameplateUnitName:gsub(\" \", \"\")\n        \n        -- no spaces left to split on, just return whatever can be made of it\n        if occurrences == 0 then\n            return cutOffName(nameplateUnitName, config)\n        end\n        \n        local nameToShorten, nameToKeep, nameToKeepLength\n        if config.keepRightSide then\n            -- we always want the last name if possible\n            -- example: Cleave Training Dummy -> Dummy\n            nameToShorten, nameToKeep = nameplateUnitName:match(\"^(.*)[ ]([^ ]*)$\")\n            nameToKeepLength = utf8len(nameToKeep)\n        else\n            -- we always want the first name if possible\n            -- example: Cleave Training Dummy -> Cleave\n            nameToKeep, nameToShorten = nameplateUnitName:match(\"^([^ ]*)[ ](.*)$\")\n            nameToKeepLength = utf8len(nameToKeep)\n        end\n        \n        -- in case the name to keep is too long, just use that\n        if nameToKeepLength > nameLength or not config.abbreviate then\n            return cutOffName(nameToKeep, config)\n        end\n        \n        local shortenedName\n        if config.abbreviateLeftToRight then\n            shortenedName, _ = reduceLeftToRight(\"\", nameToShorten, nameToKeepLength, nameLength)\n        else\n            _, shortenedName = reduceRightToLeft(nameToShorten, \"\", nameToKeepLength, nameLength)\n        end\n        \n        if config.keepRightSide then\n            return shortenedName .. \" \" .. nameToKeep\n        else\n            return nameToKeep .. \" \" .. shortenedName\n        end\n    end\n    \n    local tryCache = function (unitId, nameplateUnitName, config, nameLength)\n        if cache[nameLength] == nil then\n            cache[nameLength] = {}\n        end\n        \n        if cache[nameLength][nameplateUnitName] == nil then\n            cache[nameLength][nameplateUnitName] = shorten(unitId, nameplateUnitName, config, nameLength)\n        end\n        \n        return cache[nameLength][nameplateUnitName]\n    end\n    \n    modTable.shortenNameplateName = function (unitId, unitFrame, config)\n        if not unitId or not unitFrame.namePlateUnitName then return end\n        \n        if config.ignorePlayers and unitFrame.isPlayer then return end\n        if config.ignoreFriendlyNpcNameplate and unitFrame.actorType == \"friendlynpc\" then return end\n        if config.ignoreObjectNameplate and unitFrame.isObject then return end\n        \n        local name = tryCache(unitId, unitFrame.namePlateUnitName, config, config.nameLength)\n        \n        if name == unitFrame.namePlateUnitName then return end\n        \n        unitFrame.namePlateUnitName = name\n        unitFrame.PlateFrame.namePlateUnitName = name\n        unitFrame.healthBar.unitName:SetText(name)\n        unitFrame.ActorNameSpecial:SetText(name)\n    end\n    \n    modTable.shortenCastBarName = function (unitId, unitFrame, config)\n        if not unitId then return end\n        \n        local castBar = unitFrame.castBar\n        if not castBar.unit then return end\n        local targetUnitId = castBar.unit .. \"target\"\n        \n        if not UnitExists(targetUnitId) then return end\n        \n        local isPlayer = UnitIsPlayer(targetUnitId)\n        if config.ignorePlayers and isPlayer then return end\n        if config.ignoreFriendlyNpcCastBar and not isPlayer and UnitIsFriend(\"player\", targetUnitId) then return end\n        \n        local targetName = castBar.FrameOverlay.TargetName\n        local oldName = targetName:GetText()\n        if not oldName then return end\n        \n        local newName = tryCache(unitId, oldName, config, config.castBarNameLength)\n        if oldName == newName then return end\n        \n        targetName:SetText(newName)\n    end\nend",
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.shortenCastBarName(unitId, unitFrame, modTable.config, envTable)\nend\n\n\n",
},
["Options"] = {
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "The length of the name can be on nameplates before cutoff is applied",
["Min"] = 1,
["Key"] = "nameLength",
["Value"] = 18,
["Name"] = "Nameplate name length",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "The length of the name can be on the cast bar before cutoff is applied",
["Min"] = 1,
["Key"] = "castBarNameLength",
["Value"] = 15,
["Name"] = "Cast bar name length",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 4,
["Key"] = "hyphenAsSpace",
["Value"] = true,
["Name"] = "Treat hyphens (-) as space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Also split names on hyphens instead of just the whole word",
},
{
["Type"] = 4,
["Key"] = "keepHyphenInLastName",
["Value"] = true,
["Name"] = "Keep hyphen in the last name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When hyphens are treated as spaces, keep the last part of the name intact",
},
{
["Type"] = 4,
["Key"] = "noSplitCutoff",
["Value"] = true,
["Name"] = "Cutoff when no split can be done",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When the smallest word is still longer than \"Name length\", cut it off to the name length. If unchecked, will return the full name",
},
{
["Type"] = 4,
["Key"] = "abbreviate",
["Value"] = true,
["Name"] = "Abbreviate names (W.O. Warcraft)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If unchecked, nothing is shown instead",
},
{
["Type"] = 4,
["Key"] = "abbreviateLeftToRight",
["Value"] = false,
["Name"] = "Abbreviate left to right",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Where to start abbreviation. (ltr) \"T. Best Linaori\" vs (rtl) \"The B. Linaori\"",
},
{
["Type"] = 4,
["Key"] = "keepRightSide",
["Value"] = true,
["Name"] = "Keep right side",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Keep the right side instead of left side of the name. Right side: \"T.B. Warrior\". Left side: \"The B.L.\"",
},
{
["Type"] = 4,
["Key"] = "ignorePlayers",
["Value"] = false,
["Name"] = "Ignore Players",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore player characters",
},
{
["Type"] = 4,
["Key"] = "ignoreFriendlyNpcNameplate",
["Value"] = false,
["Name"] = "Ignore Friendly NPC nameplate",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore friendly NPC on the nameplate",
},
{
["Type"] = 4,
["Key"] = "ignoreObjectNameplate",
["Value"] = true,
["Name"] = "Ignore Object Nameplate",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore nameplates from objects",
},
{
["Type"] = 4,
["Key"] = "ignoreFriendlyNpcCastBar",
["Value"] = false,
["Name"] = "Ignore Friendly NPC cast bar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore friendly NPC on the cast bar",
},
{
["Type"] = 7,
["Key"] = "manualNameOverwrites",
["Value"] = {
{
"Mordretha, the Endless Empress",
"Mordretha",
},
},
["Name"] = "Manual name overwrites",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "If a name matches the key, overwrite it with value and don't guess anything after",
},
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "Constructor",
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    envTable.color = \"#57f609\"\n    \n    envTable.npcs = {\n        [61056] = \"Greater Earth Elemental\",\n        [61146] = \"Black Ox Statue\",\n        [95072] = \"Earth Elemental\",\n        [103822] = \"Treant\"\n    }\n    \n    envTable.rules = {\n        [\"Pet\"] = true,\n        [\"Creature\"] = function(npcID)\n            return (envTable.npcs[npcID] ~= nil)\n        end\n    }\n    \n    envTable.getTypeAndID = function(guid)\n        local unitType, _, _, _, _, npcID = strsplit(\"-\", guid)\n        return unitType, tonumber(npcID or \"0\") or 0\n    end\n    \n    envTable.shallHighlight = function(self, guid)\n        local unitType, npcID = envTable.getTypeAndID(guid)\n        if unitType then\n            local value = envTable.rules[unitType]\n            if value then\n                if type(value) == \"boolean\" then\n                    return value\n                elseif type(value) == \"function\" then\n                    return value(npcID)\n                end\n            end -- value\n        end -- unitType\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)    \n    local inCombat = self.InCombat\n    local isTanking = self.namePlateThreatIsTanking\n    local isTapDenied = UnitIsTapDenied(unitId)\n    \n    if inCombat and not isTanking and not isTapDenied then\n        local exists = UnitExists(self.targetUnitID)\n        if exists then\n            local role = UnitGroupRolesAssigned(self.targetUnitID)\n            local isTank = (role == \"TANK\")\n            \n            if not isTank then\n                local guid = UnitGUID(self.targetUnitID)\n                if envTable.shallHighlight(self, guid) then\n                    Plater.SetNameplateColor(unitFrame, envTable.color)\n                end\n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1756735063,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
["Enabled"] = true,
["TANK"] = true,
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 627607,
["Enabled"] = true,
["Revision"] = 176,
["semver"] = "",
["Author"] = "Brewdux-Tarren Mill",
["Desc"] = "Recolors the nameplate, if you the unit is tanked by a pet.",
["Prio"] = 50,
["Name"] = "Pet Threat Highlighter",
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
},
["version"] = -1,
},
{
["OptionsValues"] = {
["readyColor"] = {
0,
1,
0,
1,
},
["borderThickness"] = 1,
["defaultBorderToggle"] = true,
["interruptIndicatorColor"] = {
0,
1,
0,
1,
},
},
["LastHookEdited"] = "",
["UID"] = "0x661711831a72796",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if(unitFrame.ActorType ~= \"friendlyplayer\" and unitFrame.ActorType ~= \"friendlynpc\"  ) then\n        \n        if self.IsInterrupted then\n            Plater.SetCastBarColor(unitFrame, modTable.config[\"interruptedColor\"])\n            return\n        end\n        \n        local interruptCooldownStart, duration = nil\n        local interruptEndTime = nil\n        \n        if envTable.kickId ~= nil then\n            local cd = C_Spell.GetSpellCooldown(envTable.kickId)\n            interruptCooldownStart, duration = cd.startTime,  cd.duration\n            interruptEndTime =  interruptCooldownStart + duration\n            local   interruptRemainingCooldown = max ( interruptEndTime - GetTime(), 0)\n            local  castRemainingCooldown = max (unitFrame.castBar.spellEndTime - GetTime(), 0)\n            \n            if interruptCooldownStart  ~= 0 then\n                if ( interruptRemainingCooldown + modTable.config[\"reactionTime\"] - castRemainingCooldown ) < 0 then\n                    interruptCooldownStart  = -1\n                end\n            end\n        else\n            interruptCooldownStart = 1\n        end\n        \n        envTable.updateBorder(interruptCooldownStart,  interruptEndTime)\n    end\n    \nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    self.ThrottleUpdate = 0.016\n    \n    local _, _, class = UnitClass(\"player\")\n    envTable.class = class\n    \n    local dummyFrame =  nil\n    if not dummyFrame then\n        dummyFrame = CreateFrame (\"frame\", nil, unitFrame.castBar)\n        dummyFrame:SetPoint(\"TOPLEFT\",0+modTable.config[\"borderThickness\"],0-modTable.config[\"borderThickness\"])\n        dummyFrame:SetPoint(\"BOTTOMRIGHT\",0-modTable.config[\"borderThickness\"],0+modTable.config[\"borderThickness\"])\n        dummyFrame:Show()\n    end\n    \n    function envTable.showBorder(r,g,b,a)\n        unitFrame.castBar.CastBarBorder:SetVertexColor (r, g, b, a)\n        unitFrame.castBar.CastBarBorder:Show()\n    end\n    \n    function envTable.removeBorder()\n        if modTable.config[\"defaultBorderToggle\"] then\n            local  r, g, b, a = Plater:ParseColors (modTable.config[\"defaultColor\"])\n            envTable.showBorder(r,g,b,a)\n        else\n            unitFrame.castBar.CastBarBorder:SetVertexColor (255, 255, 255, 0)\n        end\n    end\n    \n    \n    if not unitFrame.castBar.CastBarBorder then\n        unitFrame.castBar.CastBarBorder = CreateFrame (\"frame\", nil, dummyFrame, \"NamePlateFullBorderTemplate\")\n        \n        unitFrame.castBar.CastBarBorder:SetBorderSizes(modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"])\n        unitFrame.castBar.CastBarBorder:UpdateSizes()\n    end\n    \n    if modTable.config[\"defaultBorderToggle\"] then\n        local r, g, b, a = Plater:ParseColors (modTable.config[\"defaultColor\"])\n        envTable.showBorder(r,g,b,a)\n    else\n        unitFrame.castBar.CastBarBorder:SetVertexColor (255, 255, 255, 0)\n    end\n    \n    function envTable.showIndicatorWhenInterruptUp(interruptEndTime)\n        \n        if not unitFrame.castBar.interruptIsUpIndicator then\n            unitFrame.castBar.interruptIsUpIndicator = CreateFrame (\"frame\", nil, unitFrame.castBar)\n            unitFrame.castBar.interruptIsUpIndicator:SetWidth(1)\n            unitFrame.castBar.interruptIsUpIndicator:SetHeight(unitFrame.castBar:GetHeight() - (2*modTable.config[\"borderThickness\"]))\n            local t = unitFrame.castBar.interruptIsUpIndicator:CreateTexture(nil,\"OVERLAY\")\n            t:SetTexture(\"Interface\\\\AddOns\\\\Plater\\\\images\\\\regular_white.blp\")\n            t:SetAllPoints(unitFrame.castBar.interruptIsUpIndicator)\n            local r,g,b,a = Plater:ParseColors(modTable.config[\"interruptIndicatorColor\"])\n            t:SetVertexColor(r,g,b,a)\n            unitFrame.castBar.interruptIsUpIndicator.texture = t\n            \n        end\n        \n        local isUpIndicatorLocation = (interruptEndTime - unitFrame.castBar.spellStartTime) / unitFrame.castBar.maxValue\n        unitFrame.castBar.interruptIsUpIndicator:SetPoint(\"CENTER\", unitFrame.castBar.CastBarBorder, \"LEFT\", isUpIndicatorLocation *  unitFrame.castBar:GetWidth() , 0)\n        \n        if unitFrame.castBar.channeling then\n            isUpIndicatorLocation = 1 - isUpIndicatorLocation\n        end\n        \n        unitFrame.castBar. interruptIsUpIndicator:Show()\n        \n    end\n    \n    function envTable.updateBorder(interruptCooldownStart,  interruptEndTime)\n        \n        local r, g, b, a = nil\n        \n        if unitFrame.castBar.canInterrupt then\n            if  interruptCooldownStart > 0 then\n                envTable.removeBorder()\n            elseif  interruptCooldownStart < 0 then\n                r, g, b, a = DetailsFramework:ParseColors (modTable.config[\"willBeReadyColor\"])\n                envTable.showBorder(r,g,b,a)\n                \n                if modTable.config[\"castBarIndicatorToggle\"] then\n                    envTable.showIndicatorWhenInterruptUp(interruptEndTime)\n                end\n                \n            else\n                r, g, b, a = DetailsFramework:ParseColors (modTable.config[\"readyColor\"])\n                envTable.showBorder(r,g,b,a)\n                if unitFrame.castBar.interruptIsUpIndicator then\n                    unitFrame.castBar. interruptIsUpIndicator:Hide()\n                end\n            end\n        else\n            --if a spell would turn from interruptable to not interruptable\n            envTable.removeBorder()\n        end\n        \n    end\n    \nend",
["Initialization"] = "function (modTable)\n    modTable.kickIndex = {\n        [1] = {[1] = 6552, [2] = 6552, [3] = 6552}, -- Warrior\n        [2] = {[1] = 96231, [2] = 96231, [3] = 96231}, -- Paladin\n        [3] = {[1] = 147362, [2] = 147362, [3] = 187707}, -- Hunter\n        [4] = {[1] = 1766, [2] = 1766, [3] = 1766} ,-- Rogue\n        [5] = {[1] = nil, [2] = nil, [3] = 15487}, -- Priest\n        [6] = {[1] = 47528, [2] = 47528, [3] = 47528}, -- Death Knight\n        [7] = {[1] = 57994, [2] = 57994, [3] = 57994}, -- Shaman\n        [8] = {[1] = 2139, [2] = 2139, [3] = 2139}, -- Mage\n        [10] = {[1] = 116705, [2] = 116705, [3] = 116705}, -- Monk\n        [11] = {[1] = 78675, [2] = 106839, [3] = 106839, [4] = 106839}, -- Druid\n        [12] = {[1] = 183752, [2] = 183752}, -- Demon Hunter\n        [13] = {[1] = 351338, [2] = 351338, [3] = 351338} -- Evoker\n    }\n    \nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Only proceed if the unit is an enemy\n    if unitFrame.ActorType ~= \"friendlyplayer\" and unitFrame.ActorType ~= \"friendlynpc\" then\n        envTable.spec = GetSpecialization()\n        \n        -- Check if the class is not Warlock (class ID 9)\n        if envTable.class ~= 9 then\n            -- Assign kick ability based on class and specialization\n            envTable.kickId = modTable.kickIndex[envTable.class][envTable.spec]\n        else\n            -- Warlock logic for interrupt abilities\n            if envTable.spec == 1 or envTable.spec == 3 then -- Affliction or Destruction\n                if IsSpellKnown(19647, true) then -- Felhunter present\n                    envTable.kickId = 119910 -- Spell Lock\n                else\n                    -- Check for Grimoire of Sacrifice\n                    local spellInfo = C_Spell.GetSpellInfo(108503) -- get SpellInfo for \"108503\" what is \"Grimoire of Sacrifice\"\n                    local spellName = spellInfo and spellInfo.name -- get \"localized\" name for \"Grimoire of Sacrifice\"\n                    if spellName then\n                        local auraData = C_UnitAuras.GetAuraDataBySpellName(\"player\", spellName)\n                        \n                        -- Confirm the player has the \"Grimoire of Sacrifice\" buff\n                        if auraData and auraData.isHelpful and auraData.sourceUnit == \"player\" then\n                            envTable.kickId = 132409 -- Spell Lock\n                        else\n                            envTable.kickId = nil\n                        end\n                    end\n                end\n                \n            elseif envTable.spec == 2 then -- Demonology\n                if IsSpellKnown(89766, true) then -- Felguard present\n                    envTable.kickId = 119914\n                elseif IsSpellKnown(19647, true) then -- Felhunter present\n                    envTable.kickId = 119910\n                else \n                    envTable.kickId = nil \n                end\n            end\n        end\n    end\nend",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.spec = GetSpecialization()\nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if unitFrame.castBar.interruptIsUpIndicator then\n        unitFrame.castBar. interruptIsUpIndicator:Hide()\n    end\n    envTable.removeBorder()\nend\n\n\n",
},
["Time"] = 1756735056,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 608940,
["Enabled"] = false,
["Revision"] = 971,
["semver"] = "",
["Author"] = "Maeliin-Silvermoon",
["Desc"] = "Changes the color of the nameplate castbar border based on the current cooldown of the player's interrupt.",
["Prio"] = 35,
["Name"] = "Quazii Interrupt CD Indicator",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "qweqew",
["Value"] = 0,
["Name"] = "qwdqwd",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option7",
["Value"] = "IMPORTANT: UI Reload is needed after changing settings below",
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "blank space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "readyColor",
["Value"] = {
0,
1,
0,
1,
},
["Name"] = "Interrupt ready color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The color of the cast bar border when your interrupt is ready.",
},
{
["Type"] = 1,
["Key"] = "willBeReadyColor",
["Value"] = {
1,
0.35686275362968,
0,
1,
},
["Name"] = "Will be ready color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The color of the cast bar border when your interrupt will be ready intime.",
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Value of how many seconds the interrupt has to be off cooldown before the cast ends to indicate that it will be ready in time.",
["Min"] = 0,
["Name"] = "Reaction time",
["Value"] = 0.3,
["Key"] = "reactionTime",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Set border thickness in pixel",
["Min"] = 0,
["Name"] = "Border thickness",
["Value"] = 0.5,
["Key"] = "borderThickness",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "blank space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "defaultBorderToggle",
["Value"] = false,
["Name"] = "Enable default border",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Check to enable a border around your cast bar by default. This border is shown always, even when your interrupt is on cd.",
},
{
["Type"] = 1,
["Key"] = "defaultColor",
["Value"] = {
0,
0,
0,
1,
},
["Name"] = "Default Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The default border color",
},
{
["Type"] = 6,
["Key"] = "option12",
["Value"] = 0,
["Name"] = "blank space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "castBarIndicatorToggle",
["Value"] = true,
["Name"] = "Exact indicator in cast bar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Activate to have an indicator inside the cast bar that shows the exact moment when your interrupt will come up.",
},
{
["Type"] = 1,
["Key"] = "interruptIndicatorColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Indicator color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The color of the indicator inside the castbar for when the cast is going to be up.",
},
},
["HooksTemp"] = {
},
["version"] = -1,
},
{
["OptionsValues"] = {
["debuff1"] = "207771",
["borderWidth"] = 1,
["debuff2"] = "000000",
["color1"] = {
1,
1,
1,
1,
},
},
["LastHookEdited"] = "",
["UID"] = "0x67dbf822de10633",
["Hooks"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if unitFrame.healthBar and unitFrame.healthBar.border then\n        unitFrame.healthBar.border:SetVertexColor(0, 0, 0, 1)\n    end\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Reset color if no debuffs are found\n    local foundDebuff = false\n    local highestPriorityColor = nil\n    local highestPriorityIndex = 0\n    \n    -- Check each buff/debuff on the unit\n    for i = 1, #unitFrame.BuffFrame.PlaterBuffList do\n        local auraIconFrame = unitFrame.BuffFrame.PlaterBuffList[i]\n        \n        if auraIconFrame:IsShown() then\n            local currentSpellId = auraIconFrame.SpellId\n            \n            -- Check each configured debuff\n            for index = 1, 7 do\n                local debuffKey = \"debuff\" .. index\n                local colorKey = \"color\" .. index\n                \n                local spellIdToCheck = tonumber(modTable.config[debuffKey])\n                \n                if spellIdToCheck and currentSpellId == spellIdToCheck then\n                    -- If this is a higher priority debuff (higher index), use its color\n                    if index > highestPriorityIndex then\n                        highestPriorityIndex = index\n                        highestPriorityColor = modTable.config[colorKey]\n                        foundDebuff = true\n                    end\n                end\n            end\n        end\n    end\n    \n    -- Update the nameplate border color if we found a matching debuff\n    if foundDebuff and highestPriorityColor then\n        modTable.UpdateColor(unitFrame, highestPriorityColor)\n        if unitFrame.healthBar and unitFrame.healthBar.border then\n            unitFrame.healthBar.border:SetBorderSizes(modTable.config.borderWidth)\n            unitFrame.healthBar.border:UpdateSizes()\n        end\n    else\n        -- Reset to default border color if no debuffs are found\n        if unitFrame.healthBar and unitFrame.healthBar.border then\n            unitFrame.healthBar.border:SetVertexColor(0, 0, 0, 1)\n            unitFrame.healthBar.border:SetBorderSizes(1.5)\n            unitFrame.healthBar.border:UpdateSizes()\n        end\n    end\nend",
["Initialization"] = "function (modTable)\n    -- Initialize tracking variables\n    modTable.debuffStates = {}\n    \n    -- Function to update the nameplate border color based on debuff ID\n    function modTable.UpdateColor(unitFrame, color)\n        if not unitFrame then return end\n        -- Unpack the color table into individual r,g,b,a values\n        local r, g, b, a = unpack(color)\n        if unitFrame.healthBar and unitFrame.healthBar.border then\n            unitFrame.healthBar.border:SetVertexColor(r, g, b, a)\n        end\n    end\n    \n    -- Setup the options panel\n    modTable.options = {\n       \n        -- Debuff-Color Pair 1\n        {\n            type = \"text\",\n            key = \"debuff1\",\n            name = \"Debuff ID #1\",\n            desc = \"Enter the spell ID of the first debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color1\",\n            name = \"Border Color #1\",\n            desc = \"Choose the border color for debuff #1\",\n            value = {1, 0, 0, 1}\n        },\n        -- Debuff-Color Pair 2\n        {\n            type = \"text\",\n            key = \"debuff2\",\n            name = \"Debuff ID #2\",\n            desc = \"Enter the spell ID of the second debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color2\",\n            name = \"Border Color #2\",\n            desc = \"Choose the border color for debuff #2\",\n            value = {0, 1, 0, 1}\n        },\n        -- Debuff-Color Pair 3\n        {\n            type = \"text\",\n            key = \"debuff3\",\n            name = \"Debuff ID #3\",\n            desc = \"Enter the spell ID of the third debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color3\",\n            name = \"Border Color #3\",\n            desc = \"Choose the border color for debuff #3\",\n            value = {0, 0, 1, 1}\n        },\n        -- Debuff-Color Pair 4\n        {\n            type = \"text\",\n            key = \"debuff4\",\n            name = \"Debuff ID #4\",\n            desc = \"Enter the spell ID of the fourth debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color4\",\n            name = \"Border Color #4\",\n            desc = \"Choose the border color for debuff #4\",\n            value = {1, 1, 0, 1}\n        },\n        -- Debuff-Color Pair 5\n        {\n            type = \"text\",\n            key = \"debuff5\",\n            name = \"Debuff ID #5\",\n            desc = \"Enter the spell ID of the fifth debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color5\",\n            name = \"Border Color #5\",\n            desc = \"Choose the border color for debuff #5\",\n            value = {1, 0, 1, 1}\n        },\n        -- Debuff-Color Pair 6\n        {\n            type = \"text\",\n            key = \"debuff6\",\n            name = \"Debuff ID #6\",\n            desc = \"Enter the spell ID of the sixth debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color6\",\n            name = \"Border Color #6\",\n            desc = \"Choose the border color for debuff #6\",\n            value = {0, 1, 1, 1}\n        },\n        -- Debuff-Color Pair 7\n        {\n            type = \"text\",\n            key = \"debuff7\",\n            name = \"Debuff ID #7\",\n            desc = \"Enter the spell ID of the seventh debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color7\",\n            name = \"Border Color #7\",\n            desc = \"Choose the border color for debuff #7\",\n            value = {0.5, 0, 1, 1}\n        }\n    }\nend",
},
["Time"] = 1756735054,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["race"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 2065559,
["Enabled"] = false,
["Revision"] = 475,
["semver"] = "",
["Author"] = "Blindmonkas-Tichondrius",
["Desc"] = "When a tracked debuff is active on a target, their nameplate border will change to your chosen color.",
["Prio"] = 26,
["Name"] = "Quazii Debuff Border Color",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 3,
["Name"] = "Debuff #1",
["Value"] = "000000",
["Key"] = "debuff1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #1",
},
{
["Type"] = 1,
["Name"] = "Color #1",
["Value"] = {
0.6666666865348816,
1,
0,
1,
},
["Key"] = "color1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #1",
},
{
["Type"] = 3,
["Name"] = "Debuff #2",
["Value"] = "000000",
["Key"] = "debuff2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #2",
},
{
["Type"] = 1,
["Key"] = "color2",
["Value"] = {
1,
0.501960813999176,
0,
1,
},
["Name"] = "Color #2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #2",
},
{
["Type"] = 3,
["Key"] = "debuff3",
["Value"] = "000000",
["Name"] = "Debuff #3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #3",
},
{
["Type"] = 1,
["Name"] = "Color #3",
["Value"] = {
0,
0.7019608020782471,
0.5254902243614197,
1,
},
["Key"] = "color3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #3",
},
{
["Type"] = 3,
["Name"] = "Debuff #4",
["Value"] = "000000",
["Key"] = "debuff4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #4",
},
{
["Type"] = 1,
["Key"] = "color4",
["Value"] = {
0.5882353186607361,
0.294117659330368,
0,
1,
},
["Name"] = "Color #4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #4",
},
{
["Type"] = 3,
["Key"] = "debuff5",
["Value"] = "000000",
["Name"] = "Debuff #5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #5",
},
{
["Type"] = 1,
["Name"] = "Color #5",
["Value"] = {
0.6901960968971252,
0.6901960968971252,
0.6901960968971252,
1,
},
["Key"] = "color5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #5",
},
{
["Type"] = 3,
["Name"] = "Debuff #6",
["Value"] = "000000",
["Key"] = "debuff6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #6",
},
{
["Type"] = 1,
["Key"] = "color6",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Color #6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #6",
},
{
["Type"] = 3,
["Key"] = "debuff7",
["Value"] = "000000",
["Name"] = "Debuff #7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #7",
},
{
["Type"] = 1,
["Name"] = "Color #7",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "color7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #7",
},
{
["Type"] = 2,
["Max"] = 15,
["Desc"] = "Increase size of colored border here.",
["Min"] = 1,
["Name"] = "Border Size",
["Value"] = 1,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "borderWidth",
},
},
["HooksTemp"] = {
},
["version"] = -1,
},
{
["Enabled"] = false,
["Revision"] = 169,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["HooksTemp"] = {
},
["Author"] = "Deafndk-Tichondrius",
["PlaterCore"] = 1,
["UID"] = "0x67e3cb5c6e405d5",
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --[[ ==== HOW TO USE THIS QUAZII  MOD ====\n    \n    This mod changes nameplate and border colors based on combinations of debuffs on the target.\n    \n    === BASIC SETUP ===\n    1. Add your debuff combinations to the \"matchMultipleBuffs\" table below\n    2. Each combo needs \"auras\" array with spell IDs to detect\n    3. You can use idTip like I recommended in the video to identify the debuff ID to track \n    \n    === CUSTOMIZATION OPTIONS ===\n    For each debuff combination, you can set:\n    \n    - nameplateColor: Changes the color of the entire nameplate\n                      Remove this line to keep default nameplate color\n    \n    - borderColor: Changes ONLY the border color\n                   Remove this line to keep default border color\n    \n    - textColor: Changes ONLY the name text color\n                 Remove this line to keep default text color (white)\n    \n    You can use any combination of these options. For example:\n    \n    -- Change only nameplate color:\n    { \n        auras = {34914, 589},\n        nameplateColor = \"blue\",\n    }\n    \n    -- Change only border color:\n    { \n        auras = {34914, 589},\n        borderColor = \"red\",\n    }\n    \n    -- Change only text color:\n    { \n        auras = {34914, 589},\n        textColor = \"yellow\",\n    }\n    \n    -- Change border and text to different colors:\n    { \n        auras = {34914, 589},\n        borderColor = \"red\",\n        textColor = \"yellow\",\n    }\n    \n    -- Change all three elements:\n    { \n        auras = {34914, 589},\n        nameplateColor = \"blue\",\n        borderColor = \"red\",\n        textColor = \"yellow\",\n    }\n    \n    === COLOR FORMATS ===\n    You can use any of these formats for colors:\n    \n    1. Plater color names: \"red\", \"blue\", \"violet\", etc.\n    2. Hex colors: \"#FF0000\" (red), \"#00FF00\" (green), etc.\n    3. RGB/RGBA tables: {1, 0, 0} (red), {0, 1, 0, 0.5} (semi-transparent green)\n    \n    === PRIORITY SYSTEM ===\n    The FIRST matching combination in the list is used! \n    Put more specific combinations (with more debuffs) at the TOP of the list.\n    \n    For example, if you want Moonfire + Sunfire + Solar Beam to be white, but Moonfire + Sunfire to be purple:\n    1. Put the Moonfire + Sunfire + Solar Beam combo FIRST\n    2. Put the Moonfire + Sunfire combo SECOND\n    \n    === EXAMPLES ===\n    Balance Example:\n    { \n        auras = {164812, 164815, 81261}, -- Moonfire + Sunfire + Solar Beam\n        nameplateColor = \"#ff8000\",    -- Orange Color\n        borderColor = \"violet\",        -- Purple border\n    }\n    \n    --]]\n    \n    envTable.matchMultipleBuffs = {\n        { \n            auras = {164812, 164815, 81261}, -- Moonfire + Sunfire + Solar Beam\n            nameplateColor = \"#ff8000\",    -- Orange Color\n            borderColor = \"violet\",        -- Purple border\n        },\n        { \n            auras = {164812, 164815},         -- Moonfire + Sunfire\n            nameplateColor = \"#b9a2ff\",    -- Light Purple Color\n            borderColor = \"#ff8000\",          -- Orange border\n        },\n        -- Add more combinations below\n    }\n    \n    -- DO NOT TOUCH\n    local DF = _G [\"DetailsFramework\"]\n    \n    -- Function to match multiple debuffs and set colors\n    function envTable.matchMultiple(unitFrame)\n        for _, v in ipairs(envTable.matchMultipleBuffs) do\n            local match = true\n            for _, aura in ipairs(v.auras) do\n                if not Plater.NameplateHasAura (unitFrame, aura) then\n                    match = false\n                    break\n                end\n            end\n            \n            if match then\n                if v.nameplateColor then\n                    Plater.SetNameplateColor (unitFrame, v.nameplateColor)\n                end\n                if v.borderColor then\n                    Plater.SetBorderColor (unitFrame, v.borderColor)\n                end\n                if v.textColor then\n                    local nameString = unitFrame.healthBar.unitName\n                    DF:SetFontColor (nameString, v.textColor)\n                end\n                return\n            else\n                -- Reset colors to default if no matches\n                local npcColor = Plater.GetNpcColor (unitFrame)\n                if npcColor then\n                    Plater.SetNameplateColor (unitFrame, npcColor)\n                elseif unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"enemyplayer\" then\n                    Plater.FindAndSetNameplateColor (unitFrame)\n                else\n                    Plater.RefreshNameplateColor (unitFrame)\n                end\n                \n                Plater.SetBorderColor (unitFrame)\n                \n                local nameString = unitFrame.healthBar.unitName\n                DF:SetFontColor (nameString, {1, 1, 1}) -- Reset name text to white\n            end\n        end\n    end\n    \n    -- Function to set Colors\n    function envTable.SetNameplateColors()\n        local raidMark = nil\n        if envTable.useRaidMarks and unitFrame.unit then\n            raidMark = Plater.GetRaidMark (unitFrame)\n        end\n        if (raidMark) then\n            Plater.SetNameplateColor (unitFrame, envTable.ColorByMark[raidMark])\n        else \n            envTable.matchMultiple(unitFrame) \n        end \n    end\n    \nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.SetNameplateColors()\nend",
},
["Prio"] = 24,
["Time"] = 1756735054,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["race"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Name"] = "Quazii Debuffs Combo Color",
["Desc"] = "If multiple debuffs are on nameplate at the same time, nameplate changes to your specified color.",
["Icon"] = 4728198,
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    local buffSpecialGlow = true\n    \n    -- functions --\n    local auraContainers = {unitFrame.BuffFrame.PlaterBuffList}\n    \n    if (Plater.db.profile.buffs_on_aura2) then\n        auraContainers [2] = unitFrame.BuffFrame2.PlaterBuffList\n    end\n    \n    for containerID = 1, #auraContainers do\n        local auraContainer = auraContainers [containerID]\n        for index, auraIcon in ipairs (auraContainer) do\n            if (auraIcon:IsShown() and auraIcon.CanStealOrPurge) then\n                local glowColorOverride = auraIcon.debuffType == \"\" and modTable.config.glowColorE or auraIcon.debuffType == \"Magic\" and modTable.config.glowColorM\n                if modTable.doDesaturate and auraIcon.isBuff then\n                    if not modTable.isPurgeUsable(unitId, auraIcon.AuraType == \"enrage\", auraIcon.AuraType == \"magic\") then\n                        auraIcon.Icon:SetDesaturated(true)\n                        --desatColor = \"dimgrey\"\n                    else\n                        auraIcon.Icon:SetDesaturated(false)\n                    end\n                end\n                Plater.StartGlow(auraIcon, glowColorOverride, modTable.options)\n                if modTable.config.outerGlow and auraIcon.__PlaterGlowFrame then\n                    auraIcon.__PlaterGlowFrame:ClearAllPoints()\n                    local offset = modTable.config.antsThickness\n                    auraIcon.__PlaterGlowFrame:SetPoint(\"topleft\", auraIcon, \"topleft\", -offset, offset)\n                    auraIcon.__PlaterGlowFrame:SetPoint(\"bottomright\", auraIcon, \"bottomright\", offset, -offset)\n                end\n                \n            else\n                Plater.StopGlow(auraIcon, modTable.options.glowType, modTable.options.key)\n            end\n        end\n    end\n    \n    if buffSpecialGlow then\n        for _, auraIcon in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n            if auraIcon:IsShown() then\n                if (auraIcon:IsShown() and auraIcon.canStealOrPurge) then\n                    local glowColorOverride = auraIcon.debuffType == \"\" and modTable.config.glowColorE or auraIcon.debuffType == \"Magic\" and modTable.config.glowColorM\n                    if modTable.doDesaturate and auraIcon.isBuff then\n                        if not modTable.isPurgeUsable(unitId, auraIcon.debuffType == \"\", auraIcon.debuffType == \"Magic\") then\n                            auraIcon.Texture:SetDesaturated(true)\n                        else\n                            auraIcon.Texture:SetDesaturated(false)\n                        end\n                    end\n                    Plater.StartGlow(auraIcon, glowColorOverride, modTable.options)\n                    if modTable.config.outerGlow and auraIcon.__PlaterGlowFrame then\n                        auraIcon.__PlaterGlowFrame:ClearAllPoints()\n                        local offset = modTable.config.antsThickness\n                        auraIcon.__PlaterGlowFrame:SetPoint(\"topleft\", auraIcon, \"topleft\", -offset, offset)\n                        auraIcon.__PlaterGlowFrame:SetPoint(\"bottomright\", auraIcon, \"bottomright\", offset, -offset)\n                    end\n                else\n                    Plater.StopGlow(auraIcon, modTable.options.glowType, modTable.options.key)\n                end                \n            end\n        end\n    end\n    \nend",
["Initialization"] = "function (modTable)\n    -- settings:\n    \n    -- for the LibCustomGlow implementation:\n    modTable.options = {\n        glowType = \"pixel\",\n        color = modTable.config.glowColorE,--\"red\", -- all plater color types accepted, from lib: {r,g,b,a}, color of lines and opacity, from 0 to 1. Defaul value is {0.95, 0.95, 0.32, 1}\n        N = modTable.config.antsAmount, --8, -- number of lines. Defaul value is 8;\n        frequency = modTable.config.frequency, -- frequency, set to negative to inverse direction of rotation. Default value is 0.25;\n        length = modTable.config.antsLength, -- length of lines. Default value depends on region size and number of lines;\n        th = modTable.config.antsThickness, -- thickness of lines. Default value is 2;\n        xOffset = 0,\n        yOffset = 0, -- offset of glow relative to region border;\n        border = modTable.config.antsBorder, -- set to true to create border under lines;\n        key = \"StealPurgeAuraGlow\", -- key of glow, allows for multiple glows on one frame;\n    }\n    \n    \n    local GetSpellCooldown = GetSpellCooldown or function(spellID)\n        local spellCooldownInfo = C_Spell.GetSpellCooldown(spellID)\n        if spellCooldownInfo then\n            return spellCooldownInfo.startTime, spellCooldownInfo.duration, spellCooldownInfo.isEnabled, spellCooldownInfo.modRate\n        end\n    end\n    local IsSpellInRange = IsSpellInRange and function(id) return IsSpellInRange(GetSpellInfo(id)) end or function(id, unit)\n        local result = C_Spell.IsSpellInRange(id, unit)\n        if result == true then\n            return 1\n        elseif result == false then\n            return 0\n        end\n        return nil\n    end\n    local GetSpellInfo = GetSpellInfo or function(spellID)\n        if not spellID then\n            return nil;\n        end\n        \n        local spellInfo = C_Spell.GetSpellInfo(spellID);\n        if spellInfo then\n            return spellInfo.name, nil, spellInfo.iconID, spellInfo.castTime, spellInfo.minRange, spellInfo.maxRange, spellInfo.spellID, spellInfo.originalIconID;\n        end\n    end\n    \n    modTable.doDesaturate = modTable.config.outOfRange or modTable.config.desaturate\n    -- functions:\n    function modTable.isPurgeUsable(unit, isEnrage, isMagic)\n        local purgeCD, purgeDur, purgeStart, spellOutOfRange, purgeID\n        for purgeSpellId, purgeSpellData in pairs(modTable.purgeSpellIDs or {}) do\n            \n            if (isEnrage and purgeSpellData.soothe) or (isMagic and purgeSpellData.purge) then\n                if not purgeSpellData.override then\n                    if modTable.isSpellOrTalentKnown(purgeSpellId) then\n                        local cdStart, cdDur =  GetSpellCooldown(purgeSpellId)\n                        local tmppurgeCD = (cdStart > 0 and  cdDur - (GetTime() - cdStart)) or 0\n                        if not purgeCD or (tmppurgeCD < purgeCD) then\n                            purgeID = purgeSpellId\n                            purgeCD = tmppurgeCD\n                            purgeDur = cdDur\n                            purgeStart = cdStart\n                            spellOutOfRange = unit and (IsSpellInRange(GetSpellInfo(purgeSpellId), unit) == 0) and true or false\n                        end\n                    end\n                else\n                    -- workaround for spell overrides (on WL command ability, etc.) or pet spells\n                    if FindSpellOverrideByID(purgeSpellData.override) == purgeSpellId then\n                        local cdStart, cdDur =  GetSpellCooldown(purgeSpellId)\n                        local tmppurgeCD = (cdStart > 0 and  cdDur - (GetTime() - cdStart)) or 0\n                        if not purgeCD or  (tmppurgeCD < purgeCD) then\n                            purgeID = purgeSpellId\n                            purgeCD = tmppurgeCD\n                            purgeDur = cdDur\n                            purgeStart = cdStart\n                            spellOutOfRange = unit and (IsSpellInRange(GetSpellInfo(purgeSpellId), unit) == 0) and true or false\n                        end \n                    end\n                end\n            end\n        end\n        \n        \n        \n        \n        if not purgeCD then\n            return true\n        elseif ((spellOutOfRange == true) and modTable.config.outOfRange) then\n            return false\n        elseif not (C_Spell.IsSpellUsable(purgeID) and (purgeCD == 0)) and modTable.config.desaturate then\n            return false\n        elseif GetSpellCooldown(61304) >= purgeCD then --GCD check necessary...\n            return false\n        else\n            return true\n        end\n    end\n    \n    function modTable.updatePurgeId ()\n        if not GetSpecializationInfo then return end --well, retail only.\n        local curSpec = GetSpecialization()\n        if not curSpec then return end\n        local specId = GetSpecializationInfo(curSpec)\n        if not modTable.interruptSpellIDs or modTable.knownSpecID ~= specId then\n            modTable.updatePurgeIDs()\n        end\n    end\n    \n    -- determine purge spell according to spec\n    function modTable.updatePurgeIDs ()\n        if not GetSpecializationInfo then return end --well, retail only.\n        local curSpec = GetSpecialization()\n        if not curSpec then return end\n        local specId = GetSpecializationInfo(curSpec)\n        modTable.knownSpecID = specId\n        local purgeIDs = {} -- contains: [spellID] = <is player ability>, false meaning pet or weird workarounds needed\n        if Plater.PlayerClass == \"ROGUE\" then\n            purgeIDs[5938] = {soothe = true, purge = false, override = nil} --Shiv\n        elseif Plater.PlayerClass == \"DEATHKNIGHT\" then\n            --\n        elseif Plater.PlayerClass == \"DEMONHUNTER\" then\n            purgeIDs[278326] = {soothe = false, purge = true, override = nil} -- Consume Magic\n        elseif Plater.PlayerClass == \"DRUID\" then\n            purgeIDs[2908] = {soothe = true, purge = false, override = nil} -- Soothe\n        elseif Plater.PlayerClass == \"HUNTER\" then\n            purgeIDs[19801] = {soothe = true, purge = true, override = nil} -- Tranquilizing Shot\n        elseif Plater.PlayerClass == \"MONK\" then\n            --\n        elseif Plater.PlayerClass == \"PALADIN\" then\n            --\n        elseif Plater.PlayerClass == \"SHAMAN\" then\n            purgeIDs[370] = {soothe = false, purge = true, override = nil} -- Purge\n            purgeIDs[378773] = {soothe = false, purge = true, override = nil} -- Greater Purge\n        elseif Plater.PlayerClass == \"WARRIOR\" then\n            --\n        elseif Plater.PlayerClass == \"MAGE\" then\n            purgeIDs[255361] = {soothe = false, purge = true, override = nil} -- Spellsteal\n        elseif Plater.PlayerClass == \"PRIEST\" then\n            purgeIDs[32375] = {soothe = false, purge = true, override = nil} -- Mass Dispel\n            purgeIDs[235101] = {soothe = false, purge = true, override = nil} -- Dispel Magic\n        elseif Plater.PlayerClass == \"WARLOCK\" then\n            purgeIDs[19505] = {soothe = false, purge = true, override = nil} -- Devour Magic (Pet)\n        elseif Plater.PlayerClass == \"EVOKER\" then\n            purgeIDs[372048] = {soothe = true, purge = false, override = nil} -- Oppressing Roar\n        end\n        purgeIDs[25046] = {soothe = false, purge = true, override = nil} -- Arcane Torrent\n        \n        modTable.purgeSpellIDs = purgeIDs\n    end\n    \n    function modTable.isTalentLearned(nodeID)\n        local talentConfig = C_ClassTalents.GetActiveConfigID()\n        local nodeInfo = talentConfig and nodeID and C_Traits.GetNodeInfo(talentConfig, nodeID)\n        return nodeInfo and nodeInfo.entryIDsWithCommittedRanks and nodeInfo.entryIDsWithCommittedRanks[1] and true or false\n    end\n    \n    function modTable.isSpellOrTalentKnown(spellId)\n        if IsSpellKnown(spellId) then\n            return true\n        elseif modTable.isTalentLearned(spellId) then\n            return true\n        end\n    end\n    \n    modTable.updatePurgeIDs()\n    \n    modTable.lastUpdateTime = time()\n    \nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updatePurgeId ()\nend\n\n\n",
},
["Time"] = 1754710639,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/turHC0a5k/13",
["Icon"] = "INTERFACE\\ICONS\\Ability_Creature_Cursed_04",
["Enabled"] = true,
["Revision"] = 543,
["semver"] = "1.0.12",
["Author"] = "Viash-Thrall",
["Desc"] = "Adds a glow to the aura if you can steal or purge the buff.",
["Prio"] = 99,
["Name"] = "Steal/Purge Aura Glow",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "@scriptname Options:",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option16",
["Value"] = "Ants options:",
["Name"] = "option16",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColorE",
["Value"] = {
1,
0,
0,
1,
},
["Name"] = "Glow Color (Enrage)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The color of the glow ants.",
},
{
["Type"] = 1,
["Key"] = "glowColorM",
["Value"] = {
0,
0,
1,
1,
},
["Name"] = "Glow Color (Magic)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 16,
["Desc"] = "Amount of ants in the glow effect.",
["Min"] = 1,
["Name"] = "Ants Amount",
["Value"] = 6,
["Key"] = "antsAmount",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Ants move speed",
["Min"] = -1,
["Name"] = "Speed",
["Value"] = 0.25,
["Key"] = "frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "",
["Min"] = 1,
["Name"] = "Ants length",
["Value"] = 4,
["Key"] = "antsLength",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 4,
["Desc"] = "",
["Min"] = 1,
["Name"] = "Ants Thickness",
["Value"] = 2,
["Key"] = "antsThickness",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option14",
["Value"] = 0,
["Name"] = "Option 14",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "antsBorder",
["Value"] = false,
["Name"] = "Ants Border",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "outerGlow",
["Value"] = false,
["Name"] = "Outer Glow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option17",
["Value"] = 0,
["Name"] = "Option 17",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option15",
["Value"] = "Desaturation (Retail only)",
["Name"] = "Option 15",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "desaturate",
["Value"] = false,
["Name"] = "Desaturate if not usable",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Retail only.",
},
{
["Type"] = 4,
["Key"] = "outOfRange",
["Value"] = false,
["Name"] = "Desaturate when out of range",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Retail only.",
},
},
["HooksTemp"] = {
},
["version"] = 13,
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["UID"] = "0x64123ca337069ce",
["Hooks"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not envTable.originalLevel then\n        envTable.originalLevel = unitFrame:GetFrameLevel()\n        envTable.originalAlpha = unitFrame:GetEffectiveAlpha()\n    end\n    \n    -- Create a unique identifier for this unitFrame if it doesn't exist\n    if not modTable.unitKeys[unitFrame] then\n        modTable.unitKeys[unitFrame] = #modTable.unitKeys + 1\n    end\n    \n    if not modTable.castingUnits[unitFrame] then\n        modTable.castCounter = modTable.castCounter + 1\n        envTable.castOrder = modTable.castCounter\n        \n        modTable.castingUnits[unitFrame] = envTable.castOrder\n    else\n        envTable.castOrder = modTable.castingUnits[unitFrame]\n    end\n    \n    -- Use original level as base and add a large offset for casting\n    -- Add unitKey to ensure uniqueness even for simultaneous casts\n    local castingOffset = 100\n    local frameLevel = envTable.originalLevel + castingOffset + (envTable.castOrder * 10) + modTable.unitKeys[unitFrame]\n    \n    if unitFrame.castBar and unitFrame.castBar.isSpecialCast then\n        frameLevel = frameLevel + 50\n    end\n    \n    unitFrame:SetFrameLevel(frameLevel)\n    \n    if modTable.config and modTable.config[\"fullOpacityOnCast\"] then\n        unitFrame:SetAlpha(1.0)\n    end\nend",
["Initialization"] = "function(modTable)\n    modTable.castingUnits = {}\n    modTable.castCounter = 0\n    modTable.unitKeys = {}  -- To store unique identifiers for each unitFrame\nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if envTable.originalLevel then\n        modTable.castingUnits[unitFrame] = nil\n        -- Don't remove from unitKeys to maintain consistent unique IDs\n        \n        unitFrame:SetFrameLevel(envTable.originalLevel)\n        unitFrame:SetAlpha(envTable.originalAlpha)\n        envTable.originalLevel = nil\n        envTable.originalAlpha = nil\n        envTable.castOrder = nil\n    end\nend",
},
["Time"] = 1754710657,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/L7KPSDPMK/15",
["Icon"] = 4640492,
["Enabled"] = false,
["Revision"] = 563,
["semver"] = "1.0.14",
["Author"] = "Ryowarsu-Sanguino",
["Desc"] = "",
["Prio"] = 31,
["Name"] = "Casting on top",
["PlaterCore"] = 1,
["version"] = 15,
["HooksTemp"] = {
},
["Options"] = {
{
["Type"] = 4,
["Key"] = "fullOpacityOnCast",
["Value"] = true,
["Name"] = "Force full opacity when casting",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
},
{
["Enabled"] = false,
["Revision"] = 395,
["OptionsValues"] = {
["threshold2"] = 5,
["debuff3"] = "",
["debuff2"] = "442624",
["color1"] = {
0.2980392277240753,
0.8509804606437683,
0.3921568989753723,
1,
},
["color2"] = {
0.6666666865348816,
1,
0,
1,
},
["low_time_color2"] = {
0.4549019932746887,
0.6784313917160034,
0,
1,
},
["low_time_color1"] = {
0.4549019932746887,
0.6784313917160034,
0,
1,
},
["debuff1"] = "",
["threshold1"] = 0,
["color3"] = {
1,
1,
1,
1,
},
["low_time_color3"] = {
1,
1,
1,
1,
},
},
["LastHookEdited"] = "",
["HooksTemp"] = {
},
["Author"] = "Blindmonkas-Tichondrius",
["PlaterCore"] = 1,
["UID"] = "0x6816fa86ef28426",
["Hooks"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Reset the nameplate color to default when removed\n    Plater.RefreshNameplateColor(unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Initialize variables\n    local foundDebuff = false\n    local highestPriorityColor = nil\n    local highestPriorityIndex = 0\n    \n    -- Track found debuff information\n    local foundDebuffId = nil\n    local foundRemainingTime = nil\n    \n    -- Check each buff/debuff on the unit\n    for i = 1, #unitFrame.BuffFrame.PlaterBuffList do\n        local auraIconFrame = unitFrame.BuffFrame.PlaterBuffList[i]\n        \n        if auraIconFrame:IsShown() then\n            local currentSpellId = auraIconFrame.SpellId\n            \n            -- Check each configured debuff\n            for index = 1, 3 do\n                local debuffKey = \"debuff\" .. index\n                local colorKey = \"color\" .. index\n                local thresholdKey = \"threshold\" .. index\n                local lowTimeColorKey = \"low_time_color\" .. index\n                \n                local spellIdToCheck = tonumber(modTable.config[debuffKey])\n                \n                if spellIdToCheck and currentSpellId == spellIdToCheck then\n                    -- This debuff is active, store info\n                    local remainingTime = nil\n                    if auraIconFrame.ExpirationTime then\n                        remainingTime = auraIconFrame.ExpirationTime - GetTime()\n                    end\n                    \n                    -- If this is a higher priority debuff (higher index), use it\n                    if index > highestPriorityIndex then\n                        highestPriorityIndex = index\n                        foundDebuff = true\n                        foundDebuffId = index\n                        foundRemainingTime = remainingTime\n                    end\n                end\n            end\n        end\n    end\n    \n    -- Apply color based on found debuff and its remaining time\n    if foundDebuff then\n        local debuffIndex = foundDebuffId\n        local remainingTime = foundRemainingTime\n        local threshold = tonumber(modTable.config[\"threshold\" .. debuffIndex]) or 5\n        \n        -- Check if we should use the normal color or low time color\n        if remainingTime and remainingTime < threshold then\n            -- Low time color\n            local lowTimeColorKey = \"low_time_color\" .. debuffIndex\n            if modTable.config[lowTimeColorKey] then\n                modTable.UpdateColor(unitFrame, modTable.config[lowTimeColorKey])\n            end\n        else\n            -- Normal color\n            local colorKey = \"color\" .. debuffIndex\n            if modTable.config[colorKey] then\n                modTable.UpdateColor(unitFrame, modTable.config[colorKey])\n            end\n        end\n    else\n        -- Reset to default color if no debuffs are found\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend",
["Initialization"] = "function (modTable)\n    -- Initialize tracking variables\n    modTable.debuffStates = {}\n    \n    -- Function to update the nameplate color based on debuff ID\n    function modTable.UpdateColor(unitFrame, color)\n        if not unitFrame or unitFrame.IsNpcWithoutHealthbar or unitFrame.IsFriendlyPlayerWithoutHealthbar then return end\n        Plater.SetNameplateColor(unitFrame, color)\n    end\n    \n    -- Setup the options panel\n    modTable.options = {\n        -- Debuff 1\n        {\n            type = \"text\",\n            key = \"debuff1\",\n            name = \"Debuff #1\",\n            desc = \"Enter the spell ID of the first debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color1\",\n            name = \"Normal Color #1\",\n            desc = \"Color when debuff #1 is active\",\n            value = {1, 0, 0, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold1\",\n            name = \"Time Threshold #1 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color1\",\n            name = \"Low Time Color #1\",\n            desc = \"Color when debuff #1 is about to expire\",\n            value = {1, 0.5, 0, 1},\n        },\n        \n        -- Debuff 2\n        {\n            type = \"text\",\n            key = \"debuff2\",\n            name = \"Debuff #2\",\n            desc = \"Enter the spell ID of the second debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color2\",\n            name = \"Normal Color #2\",\n            desc = \"Color when debuff #2 is active\",\n            value = {0, 1, 0, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold2\",\n            name = \"Time Threshold #2 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color2\",\n            name = \"Low Time Color #2\",\n            desc = \"Color when debuff #2 is about to expire\",\n            value = {0.5, 1, 0, 1},\n        },\n        \n        -- Debuff 3\n        {\n            type = \"text\",\n            key = \"debuff3\",\n            name = \"Debuff #3\",\n            desc = \"Enter the spell ID of the third debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color3\",\n            name = \"Normal Color #3\",\n            desc = \"Color when debuff #3 is active\",\n            value = {0, 0, 1, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold3\",\n            name = \"Time Threshold #3 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color3\",\n            name = \"Low Time Color #3\",\n            desc = \"Color when debuff #3 is about to expire\",\n            value = {0.5, 0, 1, 1},\n        }\n    }\nend",
},
["Prio"] = 25,
["Time"] = 1756735052,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["Name"] = "Quazii Debuff Nameplate Colors",
["Desc"] = "When a tracked debuff is active on a target, their nameplate will change to your chosen color. Also changes color when debuff duration is low.",
["Icon"] = 4635182,
["Options"] = {
{
["Type"] = 3,
["Name"] = "Debuff #1 ID",
["Value"] = "000000",
["Key"] = "debuff1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter debuff ID of debuff you want to track",
},
{
["Type"] = 1,
["Name"] = "Color for Debuff #1",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "color1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate changes to this color when Debuff #1 is active",
},
{
["Type"] = 2,
["Max"] = 60,
["Desc"] = "Debuff durationremaining in seconds, to trigger color change",
["Min"] = 0,
["Key"] = "threshold1",
["Value"] = 5,
["Name"] = "Low Time #1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Name"] = "Low Time Color #1",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "low_time_color1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color when debuff duration crosses the Low Time Threshold",
},
{
["Type"] = 3,
["Key"] = "debuff2",
["Value"] = "000000",
["Name"] = "Debuff #2 ID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter debuff ID of debuff you want to track",
},
{
["Type"] = 1,
["Key"] = "color2",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Color for Debuff #2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate changes to this color when Debuff #1 is active",
},
{
["Type"] = 2,
["Max"] = 60,
["Desc"] = "Debuff durationremaining in seconds, to trigger color change",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 5,
["Key"] = "threshold2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Low Time #2",
},
{
["Type"] = 1,
["Key"] = "low_time_color2",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Low Time Color #2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color when debuff duration crosses the Low Time Threshold",
},
{
["Type"] = 3,
["Name"] = "Debuff #3 ID",
["Value"] = "000000",
["Key"] = "debuff3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter debuff ID of debuff you want to track",
},
{
["Type"] = 1,
["Name"] = "Color for Debuff #3",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "color3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate changes to this color when Debuff #1 is active",
},
{
["Type"] = 2,
["Max"] = 60,
["Desc"] = "Debuff durationremaining in seconds, to trigger color change",
["Min"] = 0,
["Name"] = "Low Time #3",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "threshold3",
},
{
["Type"] = 1,
["Name"] = "Low Time Color #3",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "low_time_color3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color when debuff duration crosses the Low Time Threshold",
},
},
},
},
["last_news_time"] = 1743878608,
["auras_experimental_update_classic_era"] = true,
["cast_statusbar_fadeout_time"] = 0.4899999797344208,
["auras_per_row_amount2"] = 2,
["plater_resources_align"] = "horizontal",
["aura_width"] = 16,
["aura_height2"] = 12,
["ghost_auras"] = {
["auras"] = {
["WARLOCK"] = {
{
[172] = true,
[980] = true,
},
},
["PRIEST"] = {
[3] = {
[589] = true,
[34914] = true,
},
},
},
},
["cast_audiocues"] = {
[384524] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[376683] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[375727] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[412129] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[372222] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[267354] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Stop.ogg",
[372223] = "nil",
[382233] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[323137] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[372735] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[266209] = "nil",
[283422] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[388801] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[340160] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[260894] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[461796] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Stop.ogg",
[387910] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[226406] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[183088] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[267551] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[412200] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[197974] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[370764] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[201226] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[259940] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[377204] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[412012] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[427376] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[465754] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[332708] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[275907] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[447395] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[395184] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[372107] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[257870] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[256627] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[447270] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[424958] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[472452] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[439621] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[451543] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[376892] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[367521] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[340300] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[320729] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[257426] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[1214546] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[397931] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[473220] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[434779] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[369563] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[200913] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[422414] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[427323] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[429427] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[412215] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[323143] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[322711] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[257397] = "nil",
[333294] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[375943] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[372225] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[317231] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[377383] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[448619] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[413529] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[257862] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[372311] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[449130] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[437719] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[333488] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[272609] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[369061] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[421910] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[257288] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[323608] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[377732] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[408141] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[388060] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[450854] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[369828] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[269029] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[1217653] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[164357] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[375439] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[378818] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[411012] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[376170] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[386660] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[377034] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[382708] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[421277] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[200345] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[381525] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[188169] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[385578] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[459779] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[451496] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[333477] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[375351] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[385958] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[268260] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[1222356] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[374361] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[427869] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[428293] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[382712] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[199805] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[265540] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[369573] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[260793] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[372087] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[330614] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[411994] = "nil",
[465682] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[426893] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[326997] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[323236] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[253721] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[321834] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[440218] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[1217294] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[374839] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[375251] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[397889] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[257756] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[1226111] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[453161] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[473114] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[1227900] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[324323] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[1217496] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[331718] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[426260] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[434824] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[88308] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[188404] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[323496] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[199151] = "nil",
[387629] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[200784] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[87618] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[393432] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[426645] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[347149] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[321968] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[375327] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[396812] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[387950] = "nil",
[377559] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[374563] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[320822] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[448640] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[200291] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[169179] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[265721] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[367484] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[425027] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[369465] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[431494] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[441119] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[200768] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[293986] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[449090] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[382277] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[1236348] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[445457] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[388911] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[436592] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[462216] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[432198] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[156718] = "nil",
[388976] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[209628] = "nil",
[416139] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[427025] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[426261] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[372201] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[265019] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[226296] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[383823] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[373742] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[385536] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[432520] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Stop.ogg",
[268202] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[200261] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[432967] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Stop.ogg",
[1214315] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[169929] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[369409] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[426860] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[474087] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[419351] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[412505] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[226304] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[391723] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[355577] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[193505] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[352390] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[435012] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[255567] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[265372] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[183465] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[1235368] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[384868] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[396665] = "nil",
[262377] = "Interface\\AddOns\\WeakAuras\\Media\\Sounds\\RunAway.ogg",
[339706] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[1215738] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[1225174] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[451843] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[391118] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[443500] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
[375348] = "Interface\\AddOns\\QuaziiUI\\voicepack\\QUI2_Front.ogg",
},
["cast_colors"] = {
[384524] = {
true,
"orangered",
"",
},
[376683] = {
true,
"orangered",
"",
},
[375727] = {
true,
"orangered",
"",
},
[411300] = {
false,
"blue",
},
[412129] = {
true,
"orangered",
"",
},
[265568] = {
false,
"white",
},
[372222] = {
true,
"orangered",
"",
},
[267354] = {
true,
"orchid",
"",
},
[427176] = {
false,
"orchid",
"",
},
[382233] = {
true,
"orangered",
"",
},
[323137] = {
true,
"orangered",
"",
},
[372735] = {
true,
"orchid",
"",
},
[266209] = {
true,
"white",
"",
},
[269843] = {
true,
"orangered",
"",
},
[283422] = {
true,
"orangered",
"",
},
[388801] = {
true,
"orchid",
"",
},
[340160] = {
true,
"orangered",
"",
},
[260894] = {
true,
"orangered",
"",
},
[461796] = {
true,
"orchid",
"",
},
[387910] = {
true,
"orchid",
"",
},
[226406] = {
true,
"orangered",
"",
},
[183088] = {
true,
"orangered",
"",
},
[267551] = {
true,
"orangered",
"",
},
[412200] = {
true,
"orchid",
"",
},
[197974] = {
true,
"orangered",
"",
},
[384597] = {
false,
"white",
},
[370764] = {
true,
"orchid",
"",
},
[323143] = {
true,
"orangered",
"",
},
[259940] = {
true,
"orangered",
},
[377204] = {
true,
"orangered",
"",
},
[412012] = {
true,
"orchid",
"",
},
[427376] = {
true,
"orchid",
},
[372615] = {
false,
"orangered",
"",
},
[465754] = {
true,
"orangered",
"",
},
[332708] = {
true,
"orangered",
"",
},
[413607] = {
false,
"white",
"",
},
[432031] = {
true,
"orchid",
"",
},
[447395] = {
true,
"orangered",
"",
},
[395184] = {
false,
"orangered",
"",
},
[372107] = {
true,
"orangered",
"",
},
[257870] = {
true,
"orchid",
"",
},
[256627] = {
true,
"orangered",
"",
},
[199151] = {
true,
"blue",
"",
},
[472452] = {
true,
"orangered",
"",
},
[447270] = {
true,
"orangered",
"",
},
[1215738] = {
true,
"orangered",
"",
},
[424958] = {
true,
"orangered",
"",
},
[333477] = {
true,
"orangered",
"",
},
[439621] = {
true,
"orangered",
"",
},
[377383] = {
true,
"orangered",
"",
},
[413529] = {
true,
"orangered",
"",
},
[451543] = {
true,
"orangered",
"",
},
[376892] = {
true,
"orangered",
"",
},
[367521] = {
true,
"orchid",
"",
},
[340300] = {
true,
"orangered",
"",
},
[169929] = {
true,
"orangered",
"",
},
[257426] = {
true,
"orangered",
"",
},
[1214546] = {
true,
"orangered",
"",
},
[419351] = {
true,
"orangered",
"",
},
[473220] = {
true,
"orangered",
"",
},
[269029] = {
true,
"orangered",
"",
},
[369563] = {
true,
"orangered",
"",
},
[255567] = {
true,
"orangered",
"",
},
[257288] = {
true,
"orangered",
"",
},
[435012] = {
true,
"orangered",
"",
},
[88308] = {
true,
"orangered",
"",
},
[376170] = {
true,
"orangered",
"",
},
[200913] = {
true,
"orangered",
"",
},
[422541] = {
false,
"orchid",
"",
},
[448105] = {
true,
"orangered",
"",
},
[422414] = {
true,
"orangered",
"",
},
[427323] = {
true,
"orangered",
"",
},
[429427] = {
true,
"orchid",
"",
},
[1235368] = {
true,
"orangered",
"",
},
[412215] = {
true,
"orangered",
"",
},
[201226] = {
true,
"orangered",
"",
},
[466124] = {
false,
"orangered",
"",
},
[375943] = {
true,
"orangered",
"",
},
[322711] = {
true,
"orangered",
"",
},
[257397] = {
true,
"darkorange",
"",
},
[333294] = {
true,
"orangered",
"",
},
[1214315] = {
true,
"orangered",
"",
},
[265019] = {
true,
"orangered",
"",
},
[333488] = {
true,
"orangered",
"",
},
[421910] = {
true,
"orangered",
"",
},
[448619] = {
true,
"orangered",
"",
},
[355577] = {
true,
"orangered",
"",
},
[459779] = {
true,
"orangered",
"",
},
[372311] = {
true,
"orangered",
"",
},
[449130] = {
true,
"orangered",
"",
},
[437719] = {
true,
"orchid",
"",
},
[391118] = {
true,
"orangered",
"",
},
[226304] = {
true,
"orangered",
"",
},
[369061] = {
true,
"orangered",
"",
},
[396665] = {
true,
"orangered",
"",
},
[450854] = {
true,
"orangered",
"",
},
[323608] = {
true,
"orangered",
"",
},
[377732] = {
true,
"orchid",
"",
},
[408141] = {
true,
"orangered",
"",
},
[388060] = {
true,
"orangered",
"",
},
[272609] = {
true,
"orangered",
"",
},
[369573] = {
true,
"orangered",
"",
},
[378818] = {
true,
"orchid",
"",
},
[372087] = {
true,
"orangered",
"",
},
[164357] = {
true,
"orangered",
"",
},
[375439] = {
true,
"orangered",
"",
},
[444608] = {
false,
"gray",
"",
},
[411012] = {
true,
"orangered",
"",
},
[317231] = {
true,
"orangered",
"",
},
[386660] = {
true,
"orangered",
"",
},
[377034] = {
true,
"orangered",
"",
},
[382708] = {
true,
"orangered",
"",
},
[421277] = {
true,
"orangered",
"",
},
[200345] = {
true,
"orchid",
"",
},
[291865] = {
false,
"orangered",
"",
},
[188169] = {
true,
"orangered",
"",
},
[385578] = {
true,
"orangered",
"",
},
[369409] = {
true,
"orangered",
"",
},
[451496] = {
true,
"orangered",
"",
},
[384868] = {
true,
"orangered",
"",
},
[1217294] = {
true,
"orangered",
"",
},
[275907] = {
true,
"orangered",
"",
},
[375351] = {
true,
"orangered",
"",
},
[443500] = {
true,
"orangered",
"",
},
[428293] = {
true,
"orangered",
},
[374361] = {
true,
"orangered",
"",
},
[279118] = {
false,
"blue",
},
[382712] = {
true,
"orangered",
"",
},
[199805] = {
true,
"orangered",
"",
},
[265540] = {
true,
"orchid",
"",
},
[1217496] = {
true,
"orangered",
"",
},
[375348] = {
true,
"orangered",
"",
},
[188404] = {
true,
"orangered",
"",
},
[369828] = {
true,
"orchid",
"",
},
[372225] = {
true,
"orchid",
"",
},
[257899] = {
false,
"lightslategray",
},
[426893] = {
true,
"orangered",
"",
},
[326997] = {
true,
"orangered",
"",
},
[323236] = {
true,
"orangered",
"",
},
[385958] = {
true,
"orangered",
"",
},
[321834] = {
true,
"orangered",
"",
},
[440218] = {
true,
"orangered",
"",
},
[324323] = {
true,
"orangered",
"",
},
[397889] = {
true,
"mediumturquoise",
"",
},
[1227900] = {
true,
"orangered",
"",
},
[473114] = {
true,
"orangered",
"",
},
[257756] = {
true,
"orchid",
"",
},
[1226111] = {
true,
"orangered",
"",
},
[453161] = {
true,
"orangered",
"",
},
[253517] = {
false,
"white",
},
[427025] = {
true,
"orangered",
"",
},
[331718] = {
true,
"orangered",
"",
},
[388392] = {
false,
"darkorange",
"",
},
[474018] = {
true,
"orangered",
"",
},
[426260] = {
true,
"orangered",
"",
},
[200291] = {
true,
"orchid",
"",
},
[432198] = {
true,
"orangered",
"",
},
[426261] = {
true,
"orangered",
"",
},
[462216] = {
true,
"orangered",
"",
},
[397931] = {
true,
"mediumturquoise",
"",
},
[367484] = {
true,
"orchid",
"",
},
[320822] = {
true,
"orchid",
"",
},
[387950] = {
true,
"orangered",
"",
},
[449090] = {
true,
"orangered",
"",
},
[426645] = {
true,
"orangered",
},
[347149] = {
true,
"orangered",
"",
},
[321968] = {
true,
"orangered",
"",
},
[375327] = {
true,
"orangered",
"",
},
[396812] = {
true,
"orchid",
"",
},
[448640] = {
true,
"orangered",
"",
},
[377559] = {
true,
"orangered",
"",
},
[200768] = {
true,
"orangered",
"",
},
[436592] = {
true,
"orangered",
"",
},
[393432] = {
true,
"orangered",
"",
},
[375251] = {
true,
"orangered",
"",
},
[441119] = {
true,
"orangered",
"",
},
[169179] = {
true,
"orangered",
"",
},
[416139] = {
true,
"orangered",
"",
},
[382277] = {
true,
"orangered",
"",
},
[369465] = {
true,
"orchid",
"",
},
[431494] = {
true,
"orangered",
"",
},
[209628] = {
true,
"blue",
"",
},
[433662] = {
true,
"orchid",
"",
},
[293986] = {
true,
"orangered",
"",
},
[426905] = {
false,
"white",
"",
},
[87618] = {
true,
"orangered",
"",
},
[1236348] = {
true,
"orangered",
"",
},
[445457] = {
true,
"orangered",
"",
},
[388911] = {
true,
"orangered",
"",
},
[323496] = {
true,
"orangered",
"",
},
[372201] = {
true,
"orangered",
"",
},
[102569] = {
false,
"orangered",
"",
},
[156718] = {
true,
"darkorange",
"",
},
[388976] = {
true,
"orangered",
"",
},
[427342] = {
true,
"orchid",
"",
},
[226296] = {
true,
"orangered",
"",
},
[434824] = {
true,
"orangered",
"",
},
[384978] = {
true,
"orchid",
"",
},
[265721] = {
true,
"orangered",
"",
},
[465682] = {
true,
"orangered",
"",
},
[427869] = {
true,
"orangered",
"",
},
[88194] = {
false,
"white",
},
[373742] = {
true,
"orangered",
"",
},
[385536] = {
true,
"orchid",
"",
},
[432520] = {
true,
"orchid",
"",
},
[383823] = {
true,
"orchid",
"",
},
[200261] = {
true,
"orangered",
"",
},
[432967] = {
true,
"orchid",
"",
},
[268202] = {
true,
"orchid",
"",
},
[330614] = {
true,
"orangered",
"",
},
[411994] = {
true,
"darkorange",
"",
},
[426860] = {
true,
"orangered",
"",
},
[474087] = {
true,
"orangered",
"",
},
[1217653] = {
true,
"orangered",
"",
},
[412505] = {
true,
"orangered",
"",
},
[427359] = {
true,
"orchid",
"",
},
[391723] = {
true,
"orangered",
"",
},
[260793] = {
true,
"orangered",
"",
},
[193505] = {
true,
"orangered",
"",
},
[352390] = {
true,
"orangered",
"",
},
[1222356] = {
true,
"orangered",
"",
},
[320729] = {
true,
"orangered",
"",
},
[265372] = {
true,
"orangered",
"",
},
[183465] = {
true,
"orangered",
"",
},
[381525] = {
true,
"orangered",
"",
},
[425027] = {
true,
"orangered",
"",
},
[253721] = {
true,
"orchid",
"",
},
[262377] = {
true,
"orangered",
"",
},
[339706] = {
true,
"orangered",
"",
},
[257862] = {
true,
"orangered",
"",
},
[1225174] = {
true,
"orangered",
"",
},
[451843] = {
true,
"orangered",
"",
},
[434779] = {
true,
"orangered",
"",
},
[200784] = {
true,
"orchid",
"",
},
[268260] = {
true,
"orangered",
"",
},
},
["pet_width_scale"] = 0.9999999403953552,
["ui_parent_cast_strata"] = "DIALOG",
["quick_hide"] = true,
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
},
["extra_icon_timer_size"] = 10,
["target_highlight_color"] = {
nil,
0.52156862745098,
},
["extra_icon_anchor"] = {
["y"] = -8,
["x"] = 2,
["side"] = 7,
},
["range_check_alpha"] = 1,
["click_space"] = {
115,
},
["extra_icon_auras"] = {
277242,
},
["aura2_grow_direction"] = 3,
["semver"] = "1.0.2",
["bossmod_aura_glow_expiring"] = true,
["aura_frame2_anchor"] = {
["y"] = 0,
["x"] = 2.099990844726563,
["side"] = 6,
},
["extra_icon_show_enrage"] = true,
["aura_alpha"] = 0.84999996423721,
["auto_toggle_friendly"] = {
["cities"] = false,
["world"] = false,
},
["aura_cooldown_edge_texture"] = "Interface\\AddOns\\Plater\\images\\transparent",
["extra_icon_height"] = 10,
["plater_resources_show_number"] = false,
["first_run3"] = true,
["extra_icon_show_purge"] = true,
["ui_parent_scale_tune"] = 1.562500034924597,
["ui_parent_buff_strata"] = "LOW",
["healthbar_framelevel"] = 0,
["aura_consolidate"] = true,
["health_statusbar_bgtexture"] = "Quazii",
["indicator_raidmark_anchor"] = {
["side"] = 9,
["x"] = 0,
},
["extra_icon_width"] = 16,
["tank"] = {
["colors"] = {
["aggro"] = {
0.501960813999176,
0.501960813999176,
},
["noaggro"] = {
[3] = 0.1960784494876862,
},
["pulling"] = {
nil,
0,
0.77647058823529,
},
},
},
["health_statusbar_texture"] = "Quazii",
["hook_auto_imported"] = {
["Color Automation"] = 1,
["Blockade Encounter"] = 1,
["Cast Bar Icon Config"] = 2,
["Hide Neutral Units"] = 1,
["Aura Reorder"] = 3,
["Targetting Alpha"] = 3,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Bwonsamdi Reaping"] = 1,
["Jaina Encounter"] = 6,
["Monk Statue"] = 2,
["Combo Points"] = 6,
["Extra Border"] = 2,
["Reorder Nameplate"] = 4,
["Target Color"] = 3,
["Execute Range"] = 1,
["Attacking Specific Unit"] = 2,
},
["castbar_target_show"] = true,
["cast_statusbar_color"] = {
nil,
0.85882352941176,
nil,
0.96000000089407,
},
["update_throttle"] = 0.3499999940395355,
["minor_width_scale"] = 0.9999999403953552,
["color_override"] = false,
["indicator_pet"] = false,
["aura_frame1_anchor"] = {
["y"] = 2,
["side"] = 1,
},
["tocversion"] = 110200,
["castbar_icon_show"] = false,
["indicator_extra_raidmark"] = false,
["aura_timer_text_font"] = "Quazii",
["extra_icon_timer_font"] = "Quazii",
["not_affecting_combat_alpha"] = 0.7999999523162842,
["bossmod_aura_width"] = 32,
["extra_icon_stack_font"] = "Quazii",
["show_healthbars_on_not_attackable"] = true,
["aura_height"] = 12,
["cast_statusbar_texture"] = "Quazii",
["use_health_animation"] = true,
["cast_statusbar_bgtexture"] = "PlaterBackground",
["aura2_x_offset"] = 2.099990844726563,
["target_indicator"] = "Arrow Thin",
["indicator_raidmark_scale"] = 0.6499999761581421,
["script_auto_imported"] = {
["Aura - Is Cast Bar [P]"] = 1,
["Aura - Buff Alert"] = 15,
["Cast - Effect After Cast [P]"] = 2,
["Cast - Circular Swipe"] = 4,
["Aura - Debuff Alert"] = 12,
["Unit - Show Energy"] = 11,
["Blink by Time Left"] = 1,
["Cast - Castbar is Timer [P]"] = 2,
["Cast - Ultra Important"] = 14,
["Cast - Voidzone [P]"] = 2,
["Add - Health Markers [P]"] = 3,
["Cast - Small Alert"] = 12,
["Unit - Health Markers"] = 12,
["Aura - Invalidate Unit"] = 1,
["Add - Important [P]"] = 4,
["Add - Explode on Die [P]"] = 1,
["Unit - Main Target"] = 11,
["Aura - Blink Time Left"] = 13,
["Cast - Stop Casting"] = 4,
["Add - Tag Number [P]"] = 2,
["Unit Power"] = 1,
["Cast - AoE With Range [P]"] = 2,
["Cast - Special Ability [P]"] = 3,
["Cast - Tank Interrupt"] = 12,
["Countdown"] = 12,
["Cast - Spark Color [P]"] = 2,
["Cast - Heal Stun [P]"] = 2,
["Explosion Affix M+"] = 14,
["Cast - Tankbuster [P]"] = 1,
["Cast - Important Target [P]"] = 2,
["Relics 9.2 M Dungeons"] = 2,
["Unit - Important"] = 11,
["Cast - Very Important"] = 15,
["Cast - Quick Flash"] = 2,
["Cast - AoE Hit All [P]"] = 3,
["Spiteful Affix"] = 3,
["Cast - Debuff [P]"] = 2,
["Aura is Shield [P]"] = 5,
["Add - Warning [P]"] = 5,
["Cast - Simple Interrupt [P]"] = 2,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Cast - Ongoing Cast [P]"] = 4,
["Cast - Shield Interrupt"] = 2,
["Cast - Heal Cut [P]"] = 3,
["Auto Set Skull"] = 11,
["Color Change"] = 1,
["Cast - Alert + Timer [P]"] = 4,
["Add - Non Elite Trash [P]"] = 4,
["Cast - Important by Color [P]"] = 2,
["Aura Border Color"] = 1,
["Cast - On Going Cast [P]"] = 2,
["Fixate by Unit Buff [P]"] = 2,
["Cast - Frontal Cone"] = 17,
["Fixate"] = 11,
["Cast - Glowing [P]"] = 10,
["Cast - Heroic Leap [P]"] = 3,
["Cast - Shining Green [P]"] = 3,
["Fixate On You"] = 12,
},
["castbar_target_anchor"] = {
["side"] = 11,
},
["buff_frame_anchor_and_size_migrated"] = true,
["health_statusbar_bgcolor"] = {
0.04313725605607033,
0.04313725605607033,
0.04313725605607033,
1,
},
["aura_stack_font"] = "Quazii",
["plater_resources_scale"] = 0.8,
["plater_resources_anchor"] = {
["y"] = 40,
["x"] = 0,
["side"] = 8,
},
["aura_width2"] = 16,
["castbar_target_font"] = "Quazii",
["bossmod_icons_anchor"] = {
["y"] = 30,
["x"] = 0,
["side"] = 8,
},
["health_selection_overlay_alpha"] = 0.2999999821186066,
["news_frame"] = {
["PlaterNewsFrame"] = {
["scale"] = 1,
},
},
["saved_cvars"] = {
["nameplateShowOnlyNames"] = "1",
["nameplateOverlapV"] = "1.1000000238419",
["ShowNamePlateLoseAggroFlash"] = "1",
["nameplateShowEnemyMinus"] = "1",
["NamePlateClassificationScale"] = "1",
["nameplateShowFriendlyTotems"] = "0",
["nameplatePersonalHideDelaySeconds"] = "0.2",
["nameplateShowFriendlyPets"] = "0",
["nameplatePersonalShowInCombat"] = "1",
["nameplateTargetRadialPosition"] = "1",
["nameplateMinAlpha"] = "0.90135484",
["nameplateResourceOnTarget"] = "0",
["nameplateShowAll"] = "1",
["nameplateMaxDistance"] = "100",
["nameplateShowFriendlyMinions"] = "0",
["nameplateSelfScale"] = "1.0",
["nameplateTargetBehindMaxDistance"] = "30",
["SoftTargetInteract"] = "3",
["nameplateShowEnemies"] = "1",
["NamePlateVerticalScale"] = "1",
["nameplateSelectedAlpha"] = "1",
["nameplateShowSelf"] = "0",
["nameplateShowPersonalCooldowns"] = "0",
["nameplatePersonalShowAlways"] = "0",
["nameplateMotionSpeed"] = "0.05",
["nameplateGlobalScale"] = "1.0",
["nameplateShowEnemyMinions"] = "1",
["nameplateShowFriendlyNPCs"] = "0",
["nameplateSelectedScale"] = "1.15",
["nameplateShowFriends"] = "0",
["nameplateMotion"] = "1",
["nameplateMinAlphaDistance"] = "-158489.31924611",
["nameplateMinScale"] = "1",
["nameplateLargeTopInset"] = "0.085",
["nameplateOtherTopInset"] = "0.085",
["ShowClassColorInNameplate"] = "1",
["nameplateSelfBottomInset"] = "0.2",
["nameplateSelfTopInset"] = "0.5",
["nameplateShowFriendlyGuardians"] = "0",
["nameplateSelfAlpha"] = "0.75",
["nameplateOccludedAlphaMult"] = "1",
["NamePlateHorizontalScale"] = "1",
["nameplatePersonalShowWithTarget"] = "0",
["nameplateShowFriendlyBuffs"] = "0",
},
["cast_statusbar_spark_offset"] = -13,
["target_shady_alpha"] = 0.59999996423721,
["login_counter"] = 28532,
["extra_icon_caster_name"] = false,
["click_space_friendly"] = {
92,
1,
},
["target_highlight_height"] = 18,
["no_spellname_length_limit"] = true,
["blizzard_nameplate_font_size"] = 10,
["version"] = 3,
["extra_icon_auras_mine"] = {
["277242"] = false,
["224991"] = true,
},
["bossmod_aura_height"] = 32,
["castbar_framelevel"] = 0,
["plater_resources_show"] = false,
["patch_version"] = 40,
["blizzard_nameplate_font"] = "Quazii",
["aura_sort"] = true,
["aura_timer_text_size"] = 10,
["extra_icon_show_timer"] = false,
["auto_toggle_combat"] = {
["blizz_healthbar_ic"] = true,
["blizz_healthbar_ooc"] = true,
},
["number_region_first_run"] = true,
["target_highlight_alpha"] = 1,
["extra_icon_caster_font"] = "Quazii",
["aura_tracker"] = {
["debuff"] = {
224991,
277950,
},
["buff_tracked"] = {
["280001"] = true,
["328501"] = false,
[233210] = true,
[297133] = true,
[227931] = true,
[163689] = true,
["329181"] = false,
},
["debuff_tracked"] = {
["341408"] = true,
["324652"] = false,
["281242"] = true,
},
["buff_banned"] = {
["206150"] = true,
[442624] = false,
["333553"] = true,
["61574"] = true,
["281242"] = true,
["61573"] = true,
},
["debuff_banned"] = {
[458478] = false,
[449217] = true,
[447513] = true,
[440345] = true,
[450769] = true,
[1490] = false,
["284678"] = true,
[273977] = false,
[391568] = false,
["340007"] = true,
[376084] = true,
[461404] = true,
[440340] = true,
[394933] = true,
[452229] = true,
[206930] = false,
["299151"] = true,
[452545] = false,
["281242"] = true,
["331653"] = true,
["327980"] = true,
[432229] = true,
},
},
["aura_x_offset"] = 0,
["pet_height_scale"] = 0.9999999403953552,
["cast_statusbar_spark_color"] = {
0.98823529411765,
[3] = 0.94117647058823,
},
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1.200000047683716,
},
},
["castbar_target_outline"] = "NONE",
["resources"] = {
["scale"] = 0.79999995231628,
["y_offset"] = 1,
["y_offset_target"] = 9,
},
["plater_resources_padding"] = 2,
["dps"] = {
["colors"] = {
["aggro"] = {
nil,
0.0470588281750679,
},
["pulling"] = {
nil,
0.96078431372549,
0.95294117647059,
},
},
},
["plater_resources_grow_direction"] = "center",
["aura_grow_direction"] = 3,
["plater_resources_personal_bar"] = false,
["border_color"] = {
nil,
nil,
nil,
0.8352941870689392,
},
["aura_cooldown_show_swipe"] = false,
["aura_timer_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["auras_per_row_amount"] = 4,
["border_thickness"] = 1.5,
["cast_statusbar_spark_width"] = 25,
["cast_statusbar_bgcolor"] = {
0,
0,
0,
0.79781,
},
},
},
["InterruptableSpells"] = {
[1214468] = true,
[351119] = true,
[209413] = true,
[19647] = true,
[195293] = true,
[465871] = true,
[326450] = true,
[198959] = true,
[59638] = true,
[207980] = true,
[196027] = true,
[31935] = true,
[100724] = true,
[194657] = true,
[196028] = true,
[199726] = true,
[195232] = true,
[465813] = true,
[199663] = true,
[96231] = true,
[191823] = true,
[211299] = true,
[202661] = true,
[220543] = true,
[152108] = true,
[432031] = true,
[1214780] = true,
[93985] = true,
[232115] = true,
[196543] = true,
[193069] = true,
[338003] = true,
[352347] = true,
[386071] = true,
[196799] = true,
[325701] = true,
[147362] = true,
[357196] = true,
[357260] = true,
[200658] = true,
[423051] = true,
[1245669] = true,
[323538] = true,
[47528] = true,
[196515] = true,
[426240] = true,
[211401] = true,
[192563] = true,
[196516] = true,
[328322] = true,
[462771] = true,
[355225] = true,
[201298] = true,
[434786] = true,
[351338] = true,
[1766] = true,
[228011] = true,
[200248] = true,
[198495] = true,
[196870] = true,
[347008] = true,
[436322] = true,
[227917] = true,
[355934] = true,
[434793] = true,
[211470] = true,
[347775] = true,
[91807] = true,
[6552] = true,
[2139] = true,
[448248] = true,
[452201] = true,
[30451] = true,
[373279] = true,
[444743] = true,
[353836] = true,
[212773] = true,
[194675] = true,
[201837] = true,
[427469] = true,
[241809] = true,
[209033] = true,
[198405] = true,
[471733] = true,
[228559] = true,
[209485] = true,
[434802] = true,
[228193] = true,
[225100] = true,
[192138] = true,
[187707] = true,
[397892] = true,
[191595] = true,
[465595] = true,
[199514] = true,
[423536] = true,
[355642] = true,
[198407] = true,
[227987] = true,
[194610] = true,
[1222815] = true,
[198595] = true,
[431333] = true,
[57994] = true,
[433841] = true,
[227913] = true,
[192288] = true,
[451113] = true,
[195253] = true,
[356843] = true,
[196883] = true,
[355057] = true,
[1235326] = true,
[461904] = true,
[208165] = true,
[431303] = true,
[433662] = true,
[427356] = true,
[32747] = true,
[424419] = true,
[194266] = true,
[204243] = true,
[427609] = true,
[228278] = true,
[191527] = true,
[197105] = true,
[1254722] = true,
[424421] = true,
[200642] = true,
[1229474] = true,
[1254720] = true,
[354297] = true,
[227800] = true,
[442210] = true,
[19750] = true,
[391528] = true,
[215433] = true,
[192005] = true,
[432520] = true,
[228279] = true,
[216197] = true,
[427357] = true,
[199589] = true,
[420090] = true,
[449734] = true,
[463058] = true,
[350922] = true,
[209410] = true,
[116705] = true,
[186269] = true,
[468631] = true,
[452099] = true,
[355641] = true,
[191848] = true,
[428086] = true,
[97547] = true,
[356407] = true,
[394976] = true,
[183752] = true,
[423664] = true,
[429812] = true,
[195037] = true,
[195108] = true,
[195109] = true,
[326829] = true,
[1229510] = true,
[356537] = true,
[211406] = true,
[202658] = true,
},
["performance_units"] = {
[176920] = true,
[214441] = true,
[211306] = true,
[196642] = true,
[167999] = true,
[189707] = true,
[220626] = true,
[219746] = true,
},
["captured_casts"] = {
[355225] = {
["source"] = "Murkbrine Fishmancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 178142,
},
[225249] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deathroot Ancient",
["npcID"] = 111528,
},
[221666] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Chronarch Defender",
["npcID"] = 109670,
},
[441221] = {
["source"] = "Escaped Stalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 232257,
},
[195049] = {
["source"] = "Grelda the Hag",
["event"] = "SPELL_CAST_START",
["npcID"] = 95123,
},
[228321] = {
["source"] = "Kvaldir Spiritrender",
["event"] = "SPELL_CAST_START",
["npcID"] = 114538,
},
[79881] = {
["source"] = "Hatecoil Slavemaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 90109,
},
[1244313] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pactsworn Arcanist",
["npcID"] = 244411,
},
[202728] = {
["encounterName"] = "Ash'Golm",
["source"] = "Dreadlord Mendacius",
["npcID"] = 99649,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1816,
},
[34446] = {
["isChanneled"] = true,
["source"] = "Drowned Magister",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 87368,
},
[1236130] = {
["encounterName"] = "Taah'bat and A'wazj",
["source"] = "A'wazj",
["npcID"] = 237514,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3108,
},
[202217] = {
["encounterName"] = "Anub'esset",
["source"] = "Anub'esset",
["npcID"] = 102246,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1852,
},
[426893] = {
["event"] = "SPELL_CAST_START",
["source"] = "Quartermaster Koratite",
["npcID"] = 209801,
},
[224740] = {
["event"] = "SPELL_CAST_START",
["source"] = "Duskwatch Spellshield",
["npcID"] = 111484,
},
[196587] = {
["encounterName"] = "Amalgam of Souls",
["source"] = "Amalgam of Souls",
["npcID"] = 98542,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1832,
},
[7588] = {
["source"] = "Cragtalon Hexenwitch",
["event"] = "SPELL_CAST_START",
["npcID"] = 106358,
},
[323496] = {
["source"] = "Flesh Crafter",
["event"] = "SPELL_CAST_START",
["npcID"] = 165872,
},
[1223859] = {
["encounterName"] = "Soulbinder Naazindhri",
["source"] = "Soulbinder Naazindhri",
["npcID"] = 233816,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3130,
},
[221158] = {
["isChanneled"] = true,
["source"] = "Chaotoid",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 111075,
},
[440205] = {
["source"] = "Shadowtide Corruptor",
["event"] = "SPELL_CAST_START",
["npcID"] = 220838,
},
[1227962] = {
["source"] = "Unreal Observer",
["event"] = "SPELL_CAST_START",
["npcID"] = 231551,
},
[433040] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobyss Trickster",
["npcID"] = 214343,
},
[221159] = {
["event"] = "SPELL_CAST_START",
["source"] = "Doomguard Challenger",
["npcID"] = 246711,
},
[367521] = {
["npcID"] = 185534,
},
[34447] = {
["isChanneled"] = true,
["source"] = "Drowned Magister",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 87368,
},
[196078] = {
["encounterName"] = "Amalgam of Souls",
["source"] = "Amalgam of Souls",
["npcID"] = 98542,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1832,
},
[39054] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felborne Collaborator",
["npcID"] = 111750,
},
[448399] = {
["source"] = "Kobold Taskfinder",
["event"] = "SPELL_CAST_START",
["npcID"] = 204127,
},
[1223880] = {
["event"] = "SPELL_CAST_START",
["source"] = "Watcher Gaz'Kreth",
["npcID"] = 239702,
},
[1244357] = {
["source"] = "Sha'ryth the Cursed",
["event"] = "SPELL_CAST_START",
["npcID"] = 232006,
},
[11975] = {
["source"] = "Kiranys Duskwhisper",
["event"] = "SPELL_CAST_START",
["npcID"] = 94414,
},
[1244359] = {
["isChanneled"] = true,
["source"] = "Sha'ryth the Cursed",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 232006,
},
[196591] = {
["source"] = "Coldscale Gazecrawler",
["event"] = "SPELL_CAST_START",
["npcID"] = 108185,
},
[12167] = {
["source"] = "Scion of Typhinius",
["event"] = "SPELL_CAST_START",
["npcID"] = 100647,
},
[369573] = {
["encounterName"] = "The Lost Dwarves",
["npcID"] = 184581,
["encounterID"] = 2555,
},
[199663] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ghostly Councilor",
["npcID"] = 98370,
},
[202223] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Acidic Bile",
["npcID"] = 98728,
},
[470926] = {
["source"] = "Ephemeral Agent Lathyd",
["event"] = "SPELL_CAST_START",
["npcID"] = 230746,
},
[426905] = {
["source"] = "Minion of Ghur'sha",
["event"] = "SPELL_CAST_START",
["npcID"] = 212778,
},
[216044] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shar'thos",
["npcID"] = 108678,
},
[1236186] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowguard Void Adept",
["npcID"] = 244111,
},
[197105] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Arcanist",
["npcID"] = 97171,
},
[230377] = {
["source"] = "Ariadne",
["event"] = "SPELL_CAST_START",
["npcID"] = 115847,
},
[198641] = {
["encounterName"] = "Lord Kur'talos Ravencrest",
["source"] = "Kur'talos Ravencrest",
["npcID"] = 98965,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1835,
},
[1236193] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Crystalline Golem",
["npcID"] = 236549,
},
[188404] = {
["encounterName"] = "Hymdall",
["source"] = "Storm Drake",
["npcID"] = 97788,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1805,
},
[385958] = {
["encounterName"] = "Vexamus",
["npcID"] = 194181,
["encounterID"] = 2562,
},
[211439] = {
["encounterName"] = "Gul'dan",
["source"] = "The Demon Within",
["event"] = "SPELL_CAST_START",
["npcID"] = 111022,
},
[207856] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Helarjar Champion",
["npcID"] = 96754,
},
[217582] = {
["source"] = "Rulf Bonesnapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 109317,
},
[433053] = {
["source"] = "Kobyss Necromancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 214625,
},
[231915] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felborne Punisher",
["npcID"] = 116218,
},
[432030] = {
["event"] = "SPELL_CAST_START",
["source"] = "Toxic Swarmite",
["npcID"] = 222721,
},
[474004] = {
["source"] = "Drill Sergeant",
["event"] = "SPELL_CAST_START",
["npcID"] = 231925,
},
[443292] = {
["event"] = "SPELL_CAST_START",
["source"] = "Devouring Shade",
["npcID"] = 217870,
},
[432031] = {
["encounterName"] = "Ki'katal the Harvester",
["source"] = "Bloodworker",
["npcID"] = 215968,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2901,
},
[1215738] = {
["encounterName"] = "An Affront of Challengers",
["source"] = "Paceran the Virulent",
["npcID"] = 164463,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2391,
},
[1240310] = {
["encounterName"] = "Dimensius, the All-Devouring",
["event"] = "SPELL_CAST_START",
["source"] = "Dimensius",
["npcID"] = 234478,
},
[440222] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dark-Crazed Harvester",
["npcID"] = 206067,
},
[228845] = {
["source"] = "Shatterbone Skeleton",
["event"] = "SPELL_CAST_START",
["npcID"] = 114923,
},
[205811] = {
["source"] = "Lost Legion Felguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 246551,
},
[375727] = {
["encounterName"] = "Chrono-Lord Deios",
["npcID"] = 184125,
["encounterID"] = 2559,
},
[202740] = {
["encounterName"] = "Tirathon Saltheril",
["source"] = "Tirathon Saltheril",
["npcID"] = 95885,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1815,
},
[9672] = {
["source"] = "Valiyaka the Stormbringer",
["event"] = "SPELL_CAST_START",
["npcID"] = 89650,
},
[413607] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infinite Twilight Magus",
["npcID"] = 201223,
},
[226287] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vileshard Chunk",
["npcID"] = 101438,
},
[1236229] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowguard Arcanotech",
["npcID"] = 244137,
},
[446368] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["event"] = "SPELL_CAST_START",
["npcID"] = 207939,
},
[195575] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tarben",
["npcID"] = 98268,
},
[192504] = {
["encounterName"] = "Tirathon Saltheril",
["source"] = "Tirathon Saltheril",
["npcID"] = 95885,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1815,
},
[214003] = {
["event"] = "SPELL_CAST_START",
["source"] = "Risen Swordsman",
["npcID"] = 102094,
},
[211956] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wyrmtongue Scavenger",
["npcID"] = 105629,
},
[447395] = {
["encounterName"] = "Forgemaster Throngus",
["source"] = "Forgemaster Throngus",
["npcID"] = 40177,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1050,
},
[395184] = {
["npcID"] = 185883,
},
[1236247] = {
["source"] = "Duelist Xaheen",
["event"] = "SPELL_CAST_START",
["npcID"] = 230985,
},
[211957] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glimar Ironfist",
["npcID"] = 91529,
},
[193018] = {
["encounterName"] = "King Deepbeard",
["source"] = "King Deepbeard",
["npcID"] = 91797,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1812,
},
[440231] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dark-Crazed Harvester",
["npcID"] = 206067,
},
[1244443] = {
["event"] = "SPELL_CAST_START",
["source"] = "Commerce Enforcer",
["npcID"] = 179842,
},
[434089] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["encounterID"] = 2839,
["event"] = "SPELL_CAST_START",
["npcID"] = 213937,
},
[1228065] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-King Salhadaar",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 237763,
},
[1236256] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowguard Phasecutter",
["npcID"] = 244101,
},
[200185] = {
["encounterName"] = "Shade of Xavius",
["source"] = "Shade of Xavius",
["npcID"] = 99192,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1839,
},
[465827] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Bloodwarper",
["npcID"] = 230748,
},
[206840] = {
["encounterName"] = "Gul'dan",
["source"] = "Inquisitor Vethriz",
["encounterID"] = 1866,
["event"] = "SPELL_CAST_START",
["npcID"] = 104536,
},
[211959] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wyrmtongue Scavenger",
["npcID"] = 105629,
},
[1228075] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-Prince Xevvos",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 241798,
},
[124935] = {
["source"] = "Hannis Shoalwalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 113782,
},
[451496] = {
["source"] = "Eye of the Queen",
["event"] = "SPELL_CAST_START",
["npcID"] = 220003,
},
[427950] = {
["source"] = "Forge Master Damian",
["event"] = "SPELL_CAST_START",
["npcID"] = 212831,
},
[185854] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nightmare Rider",
["npcID"] = 92792,
},
[331718] = {
["source"] = "Mistveil Defender",
["event"] = "SPELL_CAST_START",
["npcID"] = 171772,
},
[1228081] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-Prince Ky'vor",
["encounterID"] = 3134,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 241803,
},
[228852] = {
["encounterName"] = "Attumen the Huntsman",
["source"] = "Attumen the Huntsman",
["encounterID"] = 1960,
["event"] = "SPELL_CAST_START",
["npcID"] = 114262,
},
[205306] = {
["source"] = "Fel Annihilator",
["event"] = "SPELL_CAST_START",
["npcID"] = 111652,
},
[203771] = {
["encounterName"] = "Dragons of Nightmare",
["source"] = "Defiled Druid Spirit",
["encounterID"] = 1854,
["event"] = "SPELL_CAST_START",
["npcID"] = 103080,
},
[228853] = {
["source"] = "Kvaldir Tide Witch",
["event"] = "SPELL_CAST_START",
["npcID"] = 114813,
},
[200700] = {
["encounterName"] = "Dargrul the Underking",
["source"] = "Dargrul",
["npcID"] = 91007,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1793,
},
[197117] = {
["encounterName"] = "Helya",
["source"] = "Piercing Tentacle",
["npcID"] = 100188,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1824,
},
[448429] = {
["source"] = "Kobold Mystic",
["event"] = "SPELL_CAST_START",
["npcID"] = 203878,
},
[1240381] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Grim Inquisitor",
["npcID"] = 103231,
},
[228854] = {
["encounterName"] = "Helya",
["source"] = "Helarjar Mistwatcher",
["encounterID"] = 2008,
["event"] = "SPELL_CAST_START",
["npcID"] = 116335,
},
[221688] = {
["event"] = "SPELL_CAST_START",
["source"] = "Braxas the Fleshcarver",
["npcID"] = 111290,
},
[387006] = {
["source"] = "Rotting Treant",
["event"] = "SPELL_CAST_START",
["npcID"] = 186361,
},
[212475] = {
["source"] = "Grelda the Hag",
["event"] = "SPELL_CAST_START",
["npcID"] = 95123,
},
[209404] = {
["event"] = "SPELL_CAST_START",
["source"] = "Duskwatch Arcanist",
["npcID"] = 104247,
},
[378818] = {
["npcID"] = 192788,
},
[1228115] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-King Salhadaar",
["npcID"] = 237763,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3134,
},
[1244498] = {
["event"] = "SPELL_CAST_START",
["source"] = "Korgorath the Ravager",
["npcID"] = 232077,
},
[1224025] = {
["encounterName"] = "Soulbinder Naazindhri",
["source"] = "Soulbinder Naazindhri",
["npcID"] = 233816,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3130,
},
[195585] = {
["source"] = "Helarjar Soulthief",
["event"] = "SPELL_CAST_START",
["npcID"] = 115291,
},
[266209] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fallen Deathspeaker",
["npcID"] = 134284,
},
[424891] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fungal Speartender",
["npcID"] = 207456,
},
[192003] = {
["encounterName"] = "Serpentrix",
["source"] = "Blazing Hydra Spawn",
["npcID"] = 97259,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1813,
},
[462771] = {
["event"] = "SPELL_CAST_START",
["source"] = "Venture Co. Surveyor",
["npcID"] = 229686,
},
[432059] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flickerflame Candlekeeper",
["npcID"] = 212524,
},
[1215850] = {
["source"] = "Burrowing Creeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 245092,
},
[268260] = {
["source"] = "Ashvane Cannoneer",
["event"] = "SPELL_CAST_START",
["npcID"] = 138465,
},
[1215855] = {
["source"] = "Empowered Broker",
["event"] = "SPELL_CAST_START",
["npcID"] = 230550,
},
[448441] = {
["source"] = "Gorloc Springcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 218650,
},
[218622] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lochaber",
["npcID"] = 108663,
},
[192005] = {
["encounterName"] = "Serpentrix",
["source"] = "Arcane Hydra Spawn",
["npcID"] = 97260,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1813,
},
[217087] = {
["source"] = "Captain Volo'ren",
["event"] = "SPELL_CAST_START",
["npcID"] = 89846,
},
[199172] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grimguard",
["npcID"] = 99728,
},
[450492] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zekvir",
["npcID"] = 247387,
},
[209410] = {
["event"] = "SPELL_CAST_START",
["source"] = "Duskwatch Arcanist",
["npcID"] = 104247,
},
[1236348] = {
["encounterName"] = "Zo'phex the Sentinel",
["source"] = "Zo'phex",
["npcID"] = 175616,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2425,
},
[347094] = {
["encounterName"] = "Hylbrande",
["source"] = "Hylbrande",
["encounterID"] = 2426,
["event"] = "SPELL_CAST_START",
["npcID"] = 175663,
},
[1228161] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Forgeweaver Araz",
["npcID"] = 233817,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3132,
},
[195590] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felskorn Torturer",
["npcID"] = 96121,
},
[1228163] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "The Royal Voidwing",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 233823,
},
[1236354] = {
["source"] = "Shadowguard Soulbreaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 244113,
},
[221696] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eternal Bride",
["npcID"] = 91758,
},
[201733] = {
["encounterName"] = "Lord Kur'talos Ravencrest",
["source"] = "Dantalionax",
["npcID"] = 98970,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1835,
},
[218625] = {
["isChanneled"] = true,
["source"] = "Netherflame Infernal",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 107328,
},
[32011] = {
["source"] = "Salteye Tide-Shaman",
["event"] = "SPELL_CAST_START",
["npcID"] = 88101,
},
[391118] = {
["npcID"] = 191739,
},
[226304] = {
["source"] = "Vileshard Hulk",
["event"] = "SPELL_CAST_START",
["npcID"] = 91000,
},
[1244556] = {
["source"] = "Orith the Dreadful",
["event"] = "SPELL_CAST_START",
["npcID"] = 232127,
},
[378835] = {
["source"] = "Brackenhide Rotflinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 186362,
},
[217091] = {
["source"] = "Captain Volo'ren",
["event"] = "SPELL_CAST_START",
["npcID"] = 89846,
},
[209413] = {
["event"] = "SPELL_CAST_START",
["source"] = "Guardian Construct",
["npcID"] = 104270,
},
[199176] = {
["encounterName"] = "Naraxas",
["source"] = "Naraxas",
["npcID"] = 91005,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1792,
},
[446405] = {
["encounterName"] = "Undersea Abomination",
["source"] = "Undersea Abomination",
["npcID"] = 214348,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2895,
},
[1224094] = {
["event"] = "SPELL_CAST_START",
["source"] = "Burrowing Creeper",
["npcID"] = 236947,
},
[374743] = {
["source"] = "Infused Pyromancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 115488,
},
[185868] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tyndrissen",
["npcID"] = 90390,
},
[1232287] = {
["source"] = "Shadowguard Darkweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 236883,
},
[1228196] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "The Royal Voidwing",
["encounterID"] = 3134,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 233823,
},
[1228197] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Dimension Portal",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 241916,
},
[348128] = {
["encounterName"] = "Zo'phex the Sentinel",
["source"] = "Zo'phex",
["npcID"] = 175616,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2425,
},
[199178] = {
["encounterName"] = "Naraxas",
["source"] = "Naraxas",
["npcID"] = 91005,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1792,
},
[195595] = {
["event"] = "SPELL_CAST_START",
["source"] = "Water Elemental",
["npcID"] = 99300,
},
[446409] = {
["source"] = "Disturbed Kelp",
["event"] = "SPELL_CAST_START",
["npcID"] = 215702,
},
[221701] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eternal Groom",
["npcID"] = 91757,
},
[209928] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ironbranch",
["npcID"] = 93030,
},
[185870] = {
["source"] = "Flog the Captain-Eater",
["event"] = "SPELL_CAST_START",
["npcID"] = 89884,
},
[450505] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zekvir",
["npcID"] = 247387,
},
[211464] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felbound Enforcer",
["npcID"] = 104278,
},
[207881] = {
["encounterName"] = "Talixae Flamewreath",
["source"] = "Talixae Flamewreath",
["npcID"] = 104217,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1869,
},
[228868] = {
["source"] = "Kvaldir Tide Witch",
["event"] = "SPELL_CAST_START",
["npcID"] = 114813,
},
[1228213] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Arcane Collector",
["npcID"] = 240905,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3132,
},
[1228214] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Arcane Collector",
["npcID"] = 240905,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3132,
},
[1228216] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Forgeweaver Araz",
["npcID"] = 233817,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3132,
},
[1232315] = {
["source"] = "Shadowguard Bulwark",
["event"] = "SPELL_CAST_START",
["npcID"] = 231586,
},
[388060] = {
["npcID"] = 187033,
},
[1248699] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wastelander Pactspeaker",
["npcID"] = 234955,
},
[1244606] = {
["encounterName"] = "Dimensius, the All-Devouring",
["event"] = "SPELL_CAST_START",
["source"] = "Pargoth",
["npcID"] = 245222,
},
[1248702] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Wastelander Pactspeaker",
["npcID"] = 234955,
},
[447439] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["encounterID"] = 2847,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207946,
},
[222728] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wisp",
["npcID"] = 112252,
},
[1232327] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-King Salhadaar",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 237763,
},
[195087] = {
["isChanneled"] = true,
["source"] = "Wormtalon Huntress",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 95138,
},
[196111] = {
["encounterName"] = "Serpentrix",
["source"] = "Seaspray Crab",
["npcID"] = 91793,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1813,
},
[430037] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobyss Spearfisher",
["npcID"] = 214338,
},
[229895] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sharptalon Nest-Keeper",
["npcID"] = 115664,
},
[1236428] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadeye Observer",
["npcID"] = 244138,
},
[194064] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Foul Mother",
["npcID"] = 98533,
},
[219146] = {
["source"] = "Bilgerat",
["event"] = "SPELL_CAST_START",
["npcID"] = 108174,
},
[228872] = {
["encounterName"] = "Helya",
["source"] = "Helya",
["npcID"] = 114537,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2008,
},
[213004] = {
["source"] = "Mad Henryk",
["event"] = "SPELL_CAST_START",
["npcID"] = 95221,
},
[355306] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rift Blast Portal",
["npcID"] = 179778,
},
[192018] = {
["encounterName"] = "Hyrja",
["source"] = "Hyrja",
["npcID"] = 95833,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1806,
},
[213005] = {
["source"] = "Mad Henryk",
["event"] = "SPELL_CAST_START",
["npcID"] = 95221,
},
[197137] = {
["encounterName"] = "Warlord Parjesh",
["source"] = "Hatecoil Wrangler",
["npcID"] = 100216,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1810,
},
[181269] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tide Behemoth",
["npcID"] = 91115,
},
[206351] = {
["encounterName"] = "Krosus",
["source"] = "Burning Ember",
["encounterID"] = 1842,
["event"] = "SPELL_CAST_START",
["npcID"] = 104262,
},
[462802] = {
["source"] = "Corrupted Machinist",
["event"] = "SPELL_CAST_START",
["npcID"] = 229695,
},
[211470] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadow Mistress",
["npcID"] = 104300,
},
[203792] = {
["isChanneled"] = true,
["source"] = "Hellwarden Xaphan",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 101886,
},
[192019] = {
["event"] = "SPELL_CAST_START",
["source"] = "Night Watch Mariner",
["npcID"] = 97182,
},
[221196] = {
["event"] = "SPELL_CAST_START",
["source"] = "Doomguard Challenger",
["npcID"] = 246711,
},
[181270] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tide Behemoth",
["npcID"] = 91115,
},
[450519] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zekvir",
["npcID"] = 247387,
},
[1228265] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-King Salhadaar",
["npcID"] = 237763,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3134,
},
[191508] = {
["event"] = "SPELL_CAST_START",
["source"] = "Valarjar Aspirant",
["npcID"] = 101637,
},
[461781] = {
["source"] = "Seablight",
["event"] = "SPELL_CAST_START",
["npcID"] = 216958,
},
[225804] = {
["isChanneled"] = true,
["source"] = "Duskwatch Weaver",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 112973,
},
[168986] = {
["source"] = "Desecrator Ma'veth",
["event"] = "SPELL_CAST_START",
["npcID"] = 108932,
},
[435165] = {
["source"] = "Sir Braunpyke",
["event"] = "SPELL_CAST_START",
["npcID"] = 217658,
},
[191509] = {
["source"] = "Hill Ettin",
["event"] = "SPELL_CAST_START",
["npcID"] = 102886,
},
[373742] = {
["encounterName"] = "Chargath, Bane of Scales",
["npcID"] = 189340,
["encounterID"] = 2613,
},
[461785] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sargassum Guardian",
["npcID"] = 212582,
},
[197141] = {
["encounterName"] = "Warlord Parjesh",
["source"] = "Hatecoil Wrangler",
["npcID"] = 100216,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1810,
},
[218128] = {
["source"] = "Nightborne Animator",
["event"] = "SPELL_CAST_START",
["npcID"] = 106695,
},
[445406] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Soaring Devilfish",
["npcID"] = 246733,
},
[385005] = {
["event"] = "SPELL_CAST_START",
["source"] = "Understone Drudge",
["npcID"] = 105636,
},
[445407] = {
["event"] = "SPELL_CAST_START",
["source"] = "Soaring Devilfish",
["npcID"] = 246733,
},
[213522] = {
["source"] = "Captain Hring",
["event"] = "SPELL_CAST_START",
["npcID"] = 106981,
},
[288774] = {
["isChanneled"] = true,
["source"] = "Malfunctioning Pylon",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 229739,
},
[183834] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kol'roz the Everburning",
["npcID"] = 110909,
},
[225296] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deathroot Ancient",
["npcID"] = 111528,
},
[222225] = {
["source"] = "Venomspinner",
["event"] = "SPELL_CAST_START",
["npcID"] = 111479,
},
[1232399] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Manaforged Titan",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 241800,
},
[211476] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mana Wyrm",
["npcID"] = 102351,
},
[354297] = {
["event"] = "SPELL_CAST_START",
["source"] = "Support Officer",
["npcID"] = 177817,
},
[469981] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Big M.O.M.M.A.",
["npcID"] = 226398,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3020,
},
[197144] = {
["encounterName"] = "Warlord Parjesh",
["source"] = "Hatecoil Wrangler",
["npcID"] = 100216,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1810,
},
[214036] = {
["source"] = "Kiranys Duskwhisper",
["event"] = "SPELL_CAST_START",
["npcID"] = 94414,
},
[445412] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowcrested Snapper",
["npcID"] = 216963,
},
[211477] = {
["event"] = "SPELL_CAST_START",
["source"] = "Legion Hound",
["npcID"] = 104277,
},
[1228317] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "The Royal Voidwing",
["npcID"] = 233823,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3134,
},
[448485] = {
["source"] = "Guard Captain Suleyman",
["event"] = "SPELL_CAST_START",
["npcID"] = 212826,
},
[194074] = {
["event"] = "SPELL_CAST_START",
["source"] = "Foul Mother",
["npcID"] = 98533,
},
[199193] = {
["encounterName"] = "Lord Kur'talos Ravencrest",
["source"] = "Dantalionax",
["npcID"] = 98970,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1835,
},
[199705] = {
["encounterName"] = "Naraxas",
["source"] = "Naraxas",
["npcID"] = 91005,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1792,
},
[1216039] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Demolitionist",
["npcID"] = 229212,
},
[461796] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Demolitionist",
["npcID"] = 229212,
},
[453607] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shurrai",
["npcID"] = 221224,
},
[221205] = {
["isChanneled"] = false,
["source"] = "Doomguard Challenger",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 246711,
},
[189469] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spirit of Vengeance",
["npcID"] = 100364,
},
[118297] = {
["source"] = "Primal Fire Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 61029,
},
[346116] = {
["encounterName"] = "Hylbrande",
["source"] = "Hylbrande",
["encounterID"] = 2426,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 175663,
},
[15497] = {
["source"] = "Athissa",
["event"] = "SPELL_CAST_START",
["npcID"] = 88091,
},
[448492] = {
["source"] = "Guard Captain Suleyman",
["event"] = "SPELL_CAST_START",
["npcID"] = 212826,
},
[372735] = {
["npcID"] = 187969,
},
[225814] = {
["encounterName"] = "Glazer",
["source"] = "Blade Dancer Illianna",
["npcID"] = 96657,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1817,
},
[432113] = {
["source"] = "Overlord",
["event"] = "SPELL_CAST_START",
["npcID"] = 228575,
},
[474087] = {
["encounterName"] = "Kul'tharok",
["source"] = "Kul'tharok",
["npcID"] = 162309,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2364,
},
[462826] = {
["source"] = "Explosive Bomberbot",
["event"] = "SPELL_CAST_START",
["npcID"] = 229706,
},
[228374] = {
["source"] = "Kvaldir Reefcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 114539,
},
[221208] = {
["source"] = "Doomguard Challenger",
["event"] = "SPELL_CAST_START",
["npcID"] = 246711,
},
[214042] = {
["event"] = "SPELL_CAST_START",
["source"] = "Volatile Mana",
["npcID"] = 107797,
},
[195103] = {
["encounterName"] = "Warlord Parjesh",
["source"] = "Wandering Shellback",
["npcID"] = 91785,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1810,
},
[440306] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nerubian Threadmancer",
["npcID"] = 219810,
},
[196127] = {
["encounterName"] = "Serpentrix",
["source"] = "Mak'rana Siltwalker",
["npcID"] = 91790,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1813,
},
[385024] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stillpond Tidewader",
["npcID"] = 214835,
},
[221721] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eternal Bride",
["npcID"] = 91758,
},
[473067] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nitro",
["npcID"] = 230995,
},
[194080] = {
["source"] = "Nightmare Imp",
["event"] = "SPELL_CAST_START",
["npcID"] = 95599,
},
[223769] = {
["source"] = "Murkmouth Poop-Handler",
["event"] = "SPELL_CAST_START",
["npcID"] = 112424,
},
[449522] = {
["event"] = "SPELL_CAST_START",
["source"] = "Leechwing Swarmite",
["npcID"] = 226007,
},
[450546] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Captain",
["npcID"] = 216584,
},
[291865] = {
["encounterName"] = "King Mechagon",
["source"] = "Aerial Unit R-21/X",
["npcID"] = 150396,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2260,
},
[427001] = {
["encounterName"] = "Anub'ikkaj",
["source"] = "Anub'ikkaj",
["encounterID"] = 2838,
["event"] = "SPELL_CAST_START",
["npcID"] = 211089,
},
[432120] = {
["source"] = "Overlord",
["event"] = "SPELL_CAST_START",
["npcID"] = 228575,
},
[347149] = {
["encounterName"] = "Timecap'n Hooktail",
["source"] = "Timecap'n Hooktail",
["npcID"] = 175546,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2419,
},
[454643] = {
["source"] = "Heaps Crusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 225790,
},
[472047] = {
["source"] = "Arrogant Intruder",
["event"] = "SPELL_CAST_START",
["npcID"] = 225823,
},
[1252952] = {
["encounterName"] = "Soulbinder Naazindhri",
["source"] = "Shadowguard Mage",
["npcID"] = 237981,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3130,
},
[1236576] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Korgoth the Hungerer",
["npcID"] = 231229,
},
[201249] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blargrul the Siegebrul",
["npcID"] = 104660,
},
[169001] = {
["event"] = "SPELL_CAST_START",
["source"] = "Legion Battlematron",
["npcID"] = 111557,
},
[211999] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wyrmtongue Scavenger",
["npcID"] = 105629,
},
[424958] = {
["encounterName"] = "Stormguard Gorren",
["source"] = "Stormguard Gorren",
["npcID"] = 207205,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2861,
},
[188453] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thistleleaf Rascal",
["npcID"] = 92104,
},
[432125] = {
["event"] = "SPELL_CAST_START",
["source"] = "Battlefront Hauler",
["npcID"] = 223789,
},
[323608] = {
["encounterName"] = "Mordretha",
["source"] = "Mordretha, the Endless Empress",
["npcID"] = 165946,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2404,
},
[195108] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Stormweaver",
["npcID"] = 91783,
},
[208929] = {
["source"] = "Corruptor Tentacle",
["event"] = "SPELL_CAST_START",
["npcID"] = 105383,
},
[197156] = {
["source"] = "Understone Earthrender",
["event"] = "SPELL_CAST_START",
["npcID"] = 97217,
},
[432127] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kix'arak",
["npcID"] = 224710,
},
[194085] = {
["isChanneled"] = true,
["source"] = "Darkfiend Tormentor",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 91044,
},
[206882] = {
["isChanneled"] = true,
["source"] = "Felsoul Crusher",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 99764,
},
[195109] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Stormweaver",
["npcID"] = 91783,
},
[216096] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arcanist Malrodi",
["npcID"] = 108796,
},
[200228] = {
["source"] = "Questioner Arev'naal",
["event"] = "SPELL_CAST_START",
["npcID"] = 89673,
},
[213537] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chief Bitterbrine",
["npcID"] = 106990,
},
[206883] = {
["encounterName"] = "Gul'dan",
["source"] = "D'zorykx the Trapper",
["encounterID"] = 1866,
["event"] = "SPELL_CAST_START",
["npcID"] = 104534,
},
[38556] = {
["source"] = "Hatecoil Ambusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 88870,
},
[432130] = {
["encounterName"] = "Ki'katal the Harvester",
["source"] = "Ki'katal the Harvester",
["npcID"] = 215407,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2901,
},
[9739] = {
["source"] = "Lyrathos Darkgrove",
["event"] = "SPELL_CAST_START",
["npcID"] = 92335,
},
[39068] = {
["source"] = "Shallows Heron",
["event"] = "SPELL_CAST_START",
["npcID"] = 89652,
},
[197670] = {
["source"] = "Marakhan",
["event"] = "SPELL_CAST_START",
["npcID"] = 97418,
},
[1236614] = {
["event"] = "SPELL_CAST_START",
["source"] = "Inquisitor Sigar",
["npcID"] = 167876,
},
[221217] = {
["source"] = "Gripping Shadows",
["event"] = "SPELL_CAST_START",
["npcID"] = 111111,
},
[186410] = {
["isChanneled"] = true,
["source"] = "Arcana Stalker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 90173,
},
[225825] = {
["source"] = "Nightborne Sage",
["event"] = "SPELL_CAST_START",
["npcID"] = 111303,
},
[448515] = {
["source"] = "Elaena Emberlanz",
["event"] = "SPELL_CAST_START",
["npcID"] = 239833,
},
[219171] = {
["isChanneled"] = true,
["source"] = "Deepclaw",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 109702,
},
[218148] = {
["encounterName"] = "High Botanist Tel'arn",
["source"] = "Solarist Tel'arn",
["encounterID"] = 1886,
["event"] = "SPELL_CAST_START",
["npcID"] = 109038,
},
[185900] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overseer Lykill",
["npcID"] = 86535,
},
[459779] = {
["encounterName"] = "Demolition Duo",
["source"] = "Bront",
["npcID"] = 226402,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3019,
},
[1236640] = {
["source"] = "Dryad",
["event"] = "SPELL_CAST_START",
["npcID"] = 244905,
},
[221732] = {
["event"] = "SPELL_CAST_START",
["source"] = "Veil Shadowrunner",
["npcID"] = 109349,
},
[199210] = {
["event"] = "SPELL_CAST_START",
["source"] = "Valarjar Marksman",
["npcID"] = 96640,
},
[220197] = {
["event"] = "SPELL_CAST_START",
["source"] = "Frostshard",
["npcID"] = 101649,
},
[241184] = {
["source"] = "Kvaldir Mistcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 93377,
},
[353312] = {
["encounterName"] = "Hylbrande",
["source"] = "Hylbrande",
["encounterID"] = 2426,
["event"] = "SPELL_CAST_START",
["npcID"] = 175663,
},
[186414] = {
["source"] = "Warbringer Mox'na",
["event"] = "SPELL_CAST_START",
["npcID"] = 90164,
},
[228388] = {
["source"] = "Rotsoul Giant",
["event"] = "SPELL_CAST_START",
["npcID"] = 114548,
},
[193069] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felsworn Infester",
["npcID"] = 96587,
},
[462856] = {
["source"] = "Nullbot",
["event"] = "SPELL_CAST_START",
["npcID"] = 229729,
},
[1232568] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Ilyssa Darksorrow",
["npcID"] = 237662,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3122,
},
[1232569] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Adarus Duskblaze",
["npcID"] = 237661,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3122,
},
[205355] = {
["source"] = "Tichondrius",
["event"] = "SPELL_CAST_START",
["npcID"] = 97956,
},
[228390] = {
["encounterName"] = "Helya",
["source"] = "Grimelord",
["npcID"] = 114709,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2008,
},
[462859] = {
["source"] = "Fervent Sharpshooter",
["event"] = "SPELL_CAST_START",
["npcID"] = 206694,
},
[421910] = {
["encounterName"] = "Blazikon",
["source"] = "Blazikon",
["encounterID"] = 2826,
["event"] = "SPELL_CAST_START",
["npcID"] = 208743,
},
[1216204] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crystalline Golem",
["npcID"] = 236549,
},
[448528] = {
["source"] = "Spitfire Fusetender",
["event"] = "SPELL_CAST_START",
["npcID"] = 211777,
},
[200238] = {
["encounterName"] = "Shade of Xavius",
["source"] = "Shade of Xavius",
["npcID"] = 99192,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1839,
},
[193584] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepbrine Horror",
["npcID"] = 97445,
},
[1232590] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Arcane Collector",
["npcID"] = 240905,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3132,
},
[219690] = {
["source"] = "Small Arcane Bomb",
["event"] = "SPELL_CAST_START",
["npcID"] = 110455,
},
[196144] = {
["encounterName"] = "Serpentrix",
["source"] = "Mak'rana Siltwalker",
["npcID"] = 91790,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1813,
},
[446483] = {
["event"] = "SPELL_CAST_START",
["source"] = "Colossal Arathi Amalgam",
["npcID"] = 224592,
},
[193585] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rockbound Trapper",
["npcID"] = 102232,
},
[211501] = {
["event"] = "SPELL_CAST_START",
["source"] = "Enchanted Broodling",
["npcID"] = 105876,
},
[1232601] = {
["source"] = "Untethered Bumpskull",
["event"] = "SPELL_CAST_START",
["npcID"] = 238479,
},
[192050] = {
["encounterName"] = "Serpentrix",
["source"] = "Serpentrix",
["npcID"] = 91808,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1813,
},
[184372] = {
["source"] = "Lyrathos Darkgrove",
["event"] = "SPELL_CAST_START",
["npcID"] = 92877,
},
[209454] = {
["encounterName"] = "Gul'dan",
["source"] = "Eye of Gul'dan",
["encounterID"] = 1866,
["event"] = "SPELL_CAST_START",
["npcID"] = 105630,
},
[197681] = {
["source"] = "Marakhan",
["event"] = "SPELL_CAST_START",
["npcID"] = 97418,
},
[194610] = {
["event"] = "SPELL_CAST_START",
["source"] = "Seacursed Mistmender",
["npcID"] = 97365,
},
[1236703] = {
["encounterName"] = "Soul-Scribe",
["source"] = "Soul-Scribe",
["npcID"] = 234935,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3109,
},
[220204] = {
["event"] = "SPELL_CAST_START",
["source"] = "Astrix",
["npcID"] = 110727,
},
[192563] = {
["event"] = "SPELL_CAST_START",
["source"] = "Valarjar Purifier",
["npcID"] = 97197,
},
[226347] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stoneclaw Hunter",
["npcID"] = 91332,
},
[194099] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Grimewalker",
["npcID"] = 97185,
},
[194611] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadow Hunter",
["npcID"] = 98926,
},
[182838] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arcavellus",
["npcID"] = 90244,
},
[216110] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arcanist Malrodi",
["npcID"] = 108796,
},
[204337] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felstalker",
["npcID"] = 249114,
},
[208944] = {
["encounterName"] = "Grand Magistrix Elisande",
["source"] = "Elisande",
["encounterID"] = 1872,
["event"] = "SPELL_CAST_START",
["npcID"] = 106643,
},
[205361] = {
["encounterName"] = "Krosus",
["source"] = "Krosus",
["encounterID"] = 1842,
["event"] = "SPELL_CAST_START",
["npcID"] = 101002,
},
[222253] = {
["event"] = "SPELL_CAST_START",
["source"] = "Salteye Oracle",
["npcID"] = 111598,
},
[202290] = {
["source"] = "Eredar Summoner",
["event"] = "SPELL_CAST_START",
["npcID"] = 98505,
},
[182327] = {
["source"] = "Salteye Tide-Shaman",
["event"] = "SPELL_CAST_START",
["npcID"] = 88101,
},
[459799] = {
["encounterName"] = "Demolition Duo",
["source"] = "Bront",
["npcID"] = 226402,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3019,
},
[1240821] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bazaar Overseer",
["npcID"] = 246285,
},
[197173] = {
["event"] = "SPELL_CAST_START",
["source"] = "Brulworm",
["npcID"] = 104614,
},
[356404] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ancient Core Hound",
["npcID"] = 180091,
},
[429091] = {
["source"] = "High Priest Aemya",
["event"] = "SPELL_CAST_START",
["npcID"] = 212827,
},
[204852] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nightmare Dweller",
["npcID"] = 101991,
},
[209971] = {
["encounterName"] = "Grand Magistrix Elisande",
["source"] = "Elisande",
["encounterID"] = 1872,
["event"] = "SPELL_CAST_START",
["npcID"] = 106643,
},
[449567] = {
["event"] = "SPELL_CAST_START",
["source"] = "Enduring Gutterface",
["npcID"] = 216045,
},
[219697] = {
["isChanneled"] = true,
["source"] = "Torturer of the Inquisition",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 109394,
},
[473114] = {
["encounterName"] = "Swampface",
["source"] = "Swampface",
["npcID"] = 226396,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3053,
},
[356407] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ancient Core Hound",
["npcID"] = 180091,
},
[194616] = {
["source"] = "Crawliac Doomwailer",
["event"] = "SPELL_CAST_START",
["npcID"] = 94984,
},
[215603] = {
["source"] = "Vision of Deathwing",
["event"] = "SPELL_CAST_START",
["npcID"] = 97056,
},
[202295] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felsoul Corrupter",
["npcID"] = 110805,
},
[195129] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Crusher",
["npcID"] = 91782,
},
[200248] = {
["event"] = "SPELL_CAST_START",
["source"] = "Risen Arcanist",
["npcID"] = 98280,
},
[221235] = {
["event"] = "SPELL_CAST_START",
["source"] = "Doomguard Challenger",
["npcID"] = 246711,
},
[374839] = {
["encounterName"] = "Forgemaster Gorek",
["npcID"] = 189478,
["encounterID"] = 2612,
},
[182333] = {
["isChanneled"] = true,
["source"] = "Salteye Shoresprinter",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 88087,
},
[228914] = {
["encounterName"] = "Odyn",
["source"] = "Odyn",
["encounterID"] = 1958,
["event"] = "SPELL_CAST_START",
["npcID"] = 114263,
},
[1236770] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowguard Steelsoul",
["npcID"] = 244140,
},
[325701] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Depraved Collector",
["npcID"] = 165529,
},
[1220394] = {
["encounterName"] = "Fractillus",
["source"] = "Fractillus",
["npcID"] = 237861,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3133,
},
[99629] = {
["event"] = "SPELL_CAST_START",
["source"] = "Druid of the Flame",
["npcID"] = 53619,
},
[213559] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chief Bitterbrine",
["npcID"] = 106990,
},
[1249065] = {
["encounterName"] = "Soulbinder Naazindhri",
["source"] = "Soulbinder Naazindhri",
["npcID"] = 233816,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3130,
},
[219190] = {
["source"] = "Deepclaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 109702,
},
[376892] = {
["encounterName"] = "Balakar Khan",
["npcID"] = 186151,
["encounterID"] = 2580,
},
[225845] = {
["source"] = "Duskwatch Weaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 112973,
},
[456745] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crimson Deathweaver",
["npcID"] = 222692,
},
[203323] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hill Ettin",
["npcID"] = 95937,
},
[456746] = {
["source"] = "Workmaster Earwax",
["event"] = "SPELL_CAST_START",
["npcID"] = 213195,
},
[249392] = {
["event"] = "SPELL_CAST_START",
["source"] = "Doomguard Challenger",
["npcID"] = 246711,
},
[204859] = {
["encounterName"] = "Ursoc",
["source"] = "Ursoc",
["encounterID"] = 1841,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 100497,
},
[193598] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Soulthirster",
["npcID"] = 97630,
},
[398394] = {
["source"] = "Deeps Krolusk",
["event"] = "SPELL_CAST_START",
["npcID"] = 217741,
},
[456748] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crimson Deathweaver",
["npcID"] = 222692,
},
[221240] = {
["source"] = "Blast Waves",
["event"] = "SPELL_CAST_START",
["npcID"] = 111116,
},
[225847] = {
["source"] = "Duskwatch Weaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 112973,
},
[185409] = {
["source"] = "Greyhorn Goat",
["event"] = "SPELL_CAST_START",
["npcID"] = 105104,
},
[462892] = {
["isChanneled"] = true,
["source"] = "Swarmbot",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 229739,
},
[449584] = {
["event"] = "SPELL_CAST_START",
["source"] = "Enduring Gutterface",
["npcID"] = 216045,
},
[442418] = {
["source"] = "Burkhalt",
["event"] = "SPELL_CAST_START",
["npcID"] = 228671,
},
[428086] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["event"] = "SPELL_CAST_START",
["npcID"] = 211087,
},
[461870] = {
["event"] = "SPELL_CAST_START",
["source"] = "Xal'atath",
["npcID"] = 229227,
},
[377923] = {
["event"] = "SPELL_CAST_START",
["source"] = "Risen Magma",
["npcID"] = 225390,
},
[440372] = {
["event"] = "SPELL_CAST_START",
["source"] = "Xishorr",
["npcID"] = 216039,
},
[1240912] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bazaar Overseer",
["npcID"] = 246285,
},
[221242] = {
["source"] = "Blast Waves",
["event"] = "SPELL_CAST_START",
["npcID"] = 111116,
},
[422969] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["event"] = "SPELL_CAST_START",
["npcID"] = 207939,
},
[197696] = {
["encounterName"] = "Ilysanna Ravencrest",
["source"] = "Illysanna Ravencrest",
["npcID"] = 98696,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1833,
},
[445492] = {
["event"] = "SPELL_CAST_START",
["source"] = "Soaring Devilfish",
["npcID"] = 246733,
},
[200256] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arcane Minion",
["npcID"] = 101549,
},
[200768] = {
["source"] = "Crazed Razorbeak",
["event"] = "SPELL_CAST_START",
["npcID"] = 95766,
},
[472111] = {
["source"] = "Underrider Roadhog",
["event"] = "SPELL_CAST_START",
["npcID"] = 230626,
},
[1240925] = {
["source"] = "Soulbinder Sabeel",
["event"] = "SPELL_CAST_START",
["npcID"] = 230984,
},
[212030] = {
["encounterName"] = "General Xakal",
["source"] = "General Xakal",
["npcID"] = 98206,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1828,
},
[474160] = {
["source"] = "Nightmare Crawler",
["event"] = "SPELL_CAST_START",
["npcID"] = 234206,
},
[446519] = {
["source"] = "Meandering Shalehorn",
["event"] = "SPELL_CAST_START",
["npcID"] = 222619,
},
[209471] = {
["source"] = "Unknown",
["event"] = "SPELL_CAST_START",
["npcID"] = 105721,
},
[193603] = {
["event"] = "SPELL_CAST_START",
["source"] = "Soulthirster",
["npcID"] = 97630,
},
[211007] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nightborne Reclaimer",
["npcID"] = 105915,
},
[338003] = {
["event"] = "SPELL_CAST_START",
["source"] = "Depraved Obliterator",
["npcID"] = 165414,
},
[193092] = {
["encounterName"] = "Hymdall",
["source"] = "Hymdall",
["npcID"] = 94960,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1805,
},
[370764] = {
["npcID"] = 187160,
},
[198723] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rotheart Dryad",
["npcID"] = 99358,
},
[328791] = {
["encounterName"] = "Lord Chamberlain",
["source"] = "Lord Chamberlain",
["npcID"] = 164218,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2381,
},
[212544] = {
["source"] = "Bonespeaker Inkbinder",
["event"] = "SPELL_CAST_START",
["npcID"] = 98411,
},
[188486] = {
["source"] = "Blacksail Gunner",
["event"] = "SPELL_CAST_START",
["npcID"] = 108146,
},
[193093] = {
["encounterName"] = "King Deepbeard",
["source"] = "King Deepbeard",
["npcID"] = 91797,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1812,
},
[293986] = {
["source"] = "Blastatron X-80",
["event"] = "SPELL_CAST_START",
["npcID"] = 151476,
},
[1232765] = {
["source"] = "Orith the Dreadful",
["event"] = "SPELL_CAST_START",
["npcID"] = 232127,
},
[425027] = {
["source"] = "Earth Infused Golem",
["event"] = "SPELL_CAST_START",
["npcID"] = 210109,
},
[9613] = {
["event"] = "SPELL_CAST_START",
["source"] = "Disturbed Spectre",
["npcID"] = 97732,
},
[113967] = {
["source"] = "Thistleleaf Thorndancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 93444,
},
[200261] = {
["source"] = "Soul-Torn Champion",
["event"] = "SPELL_CAST_START",
["npcID"] = 98243,
},
[225855] = {
["source"] = "Shal'dorei Naturalist",
["event"] = "SPELL_CAST_START",
["npcID"] = 112678,
},
[1220489] = {
["encounterName"] = "Plexus Sentinel",
["source"] = "Plexus Sentinel",
["npcID"] = 233814,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3129,
},
[202821] = {
["source"] = "Soulflayer of the Inquisiton",
["event"] = "SPELL_CAST_START",
["npcID"] = 109395,
},
[227903] = {
["encounterName"] = "Helya",
["source"] = "Helya",
["encounterID"] = 2008,
["event"] = "SPELL_CAST_START",
["npcID"] = 114537,
},
[1236872] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "The Royal Voidwing",
["encounterID"] = 3134,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 233823,
},
[192072] = {
["encounterName"] = "Warlord Parjesh",
["source"] = "Warlord Parjesh",
["npcID"] = 91784,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1810,
},
[188489] = {
["isChanneled"] = true,
["source"] = "Chieftain Graw",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 91318,
},
[209476] = {
["event"] = "SPELL_CAST_START",
["source"] = "Helmouth Soulraider",
["npcID"] = 105718,
},
[1232781] = {
["source"] = "Orith the Dreadful",
["event"] = "SPELL_CAST_START",
["npcID"] = 232127,
},
[202310] = {
["encounterName"] = "Millificent Manastorm",
["source"] = "Millificent Manastorm",
["npcID"] = 101976,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1847,
},
[352345] = {
["encounterName"] = "Timecap'n Hooktail",
["source"] = "Hourglass Cannon",
["encounterID"] = 2419,
["event"] = "SPELL_CAST_START",
["npcID"] = 176178,
},
[432198] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Brew Master Aldryr",
["npcID"] = 210271,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2900,
},
[249403] = {
["event"] = "SPELL_CAST_START",
["source"] = "Doomguard Challenger",
["npcID"] = 246711,
},
[209477] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mana Wyrm",
["npcID"] = 105703,
},
[346204] = {
["encounterName"] = "Zo'phex the Sentinel",
["source"] = "Zo'phex",
["npcID"] = 175616,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2425,
},
[214596] = {
["source"] = "Amberfall Greatstag",
["event"] = "SPELL_CAST_START",
["npcID"] = 107758,
},
[352347] = {
["encounterName"] = "Hylbrande",
["source"] = "Vault Purifier",
["encounterID"] = 2426,
["event"] = "SPELL_CAST_START",
["npcID"] = 176551,
},
[212549] = {
["source"] = "Mortiferous",
["event"] = "SPELL_CAST_START",
["npcID"] = 93622,
},
[1220511] = {
["encounterName"] = "Taah'bat and A'wazj",
["source"] = "Taah'bat",
["npcID"] = 234933,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3108,
},
[460867] = {
["encounterName"] = "Demolition Duo",
["source"] = "Keeza Quickfuse",
["npcID"] = 226403,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3019,
},
[225859] = {
["source"] = "Shal'dorei Naturalist",
["event"] = "SPELL_CAST_START",
["npcID"] = 112678,
},
[193611] = {
["encounterName"] = "Lady Hatecoil",
["source"] = "Lady Hatecoil",
["npcID"] = 91789,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1811,
},
[206920] = {
["encounterName"] = "Xavius",
["source"] = "Nightmare Tentacle",
["encounterID"] = 1864,
["event"] = "SPELL_CAST_START",
["npcID"] = 104592,
},
[249406] = {
["source"] = "Blast Waves",
["event"] = "SPELL_CAST_START",
["npcID"] = 125638,
},
[193100] = {
["source"] = "Dargrul",
["event"] = "SPELL_CAST_START",
["npcID"] = 94610,
},
[189517] = {
["source"] = "Servant of Ravencrest",
["event"] = "SPELL_CAST_START",
["npcID"] = 95430,
},
[206921] = {
["encounterName"] = "Star Augur Etraeus",
["source"] = "Star Augur Etraeus",
["encounterID"] = 1863,
["event"] = "SPELL_CAST_START",
["npcID"] = 103758,
},
[213576] = {
["encounterName"] = "Cordana Felsong",
["source"] = "Cordana Felsong",
["encounterID"] = 1818,
["event"] = "SPELL_CAST_START",
["npcID"] = 95888,
},
[1224634] = {
["event"] = "SPELL_CAST_START",
["source"] = "Burrowing Creeper",
["npcID"] = 236947,
},
[217160] = {
["source"] = "Hatecoil Harpooner",
["event"] = "SPELL_CAST_START",
["npcID"] = 107447,
},
[213577] = {
["source"] = "Wrath of Dargrul",
["event"] = "SPELL_CAST_START",
["npcID"] = 97266,
},
[222279] = {
["source"] = "Darkfire Felwing",
["event"] = "SPELL_CAST_START",
["npcID"] = 111508,
},
[450637] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Lord",
["npcID"] = 218103,
},
[126256] = {
["source"] = "Smolderhide Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 93578,
},
[1241023] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Zo'gron",
["npcID"] = 176563,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2440,
},
[355429] = {
["source"] = "Coastwalker Goliath",
["event"] = "SPELL_CAST_START",
["npcID"] = 178165,
},
[204876] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Portal Keeper",
["npcID"] = 102302,
},
[185425] = {
["encounterName"] = "Fenryr",
["source"] = "Steeljaw Grizzly",
["npcID"] = 96677,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1807,
},
[1220553] = {
["encounterName"] = "Plexus Sentinel",
["source"] = "Plexus Sentinel",
["npcID"] = 233814,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3129,
},
[1220555] = {
["encounterName"] = "Plexus Sentinel",
["source"] = "Plexus Sentinel",
["encounterID"] = 3129,
["event"] = "SPELL_CAST_START",
["npcID"] = 233814,
},
[456782] = {
["source"] = "Workmaster Nast",
["event"] = "SPELL_CAST_START",
["npcID"] = 213200,
},
[1241032] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Zo'gron",
["npcID"] = 176563,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2440,
},
[222793] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lurking Horror",
["npcID"] = 111331,
},
[188498] = {
["source"] = "Smolderhide Chanter",
["event"] = "SPELL_CAST_START",
["npcID"] = 93577,
},
[209485] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arcane Manifestation",
["npcID"] = 105704,
},
[461904] = {
["event"] = "SPELL_CAST_START",
["source"] = "Orb of Ascendance",
["npcID"] = 229296,
},
[128049] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadbog",
["npcID"] = 97517,
},
[227913] = {
["source"] = "Felspite Dominator",
["event"] = "SPELL_CAST_START",
["npcID"] = 102788,
},
[200784] = {
["source"] = "Wyrmtongue Scavenger",
["event"] = "SPELL_CAST_START",
["npcID"] = 98792,
},
[189011] = {
["source"] = "Dread-Captain Tattersail",
["event"] = "SPELL_CAST_START",
["npcID"] = 93486,
},
[321652] = {
["source"] = "Morbid Boneguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 168266,
},
[1236958] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Korgoth the Hungerer",
["npcID"] = 231229,
},
[182869] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cliffclutch Thornwitch",
["npcID"] = 113573,
},
[213582] = {
["event"] = "SPELL_CAST_START",
["source"] = "Savage Felbat",
["npcID"] = 93556,
},
[197714] = {
["isChanneled"] = false,
["source"] = "Majestic Elderhorn",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 96410,
},
[355438] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Zo'gron",
["npcID"] = 176563,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2440,
},
[1245156] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ky'veza",
["npcID"] = 248134,
},
[199250] = {
["event"] = "SPELL_CAST_START",
["source"] = "Seacursed Swiftblade",
["npcID"] = 98919,
},
[448600] = {
["isChanneled"] = false,
["source"] = "Spitfire Fusetender",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211777,
},
[355439] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Zo'gron",
["npcID"] = 176563,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2440,
},
[443482] = {
["encounterName"] = "Cult Leaders",
["source"] = "Shadeguard Speaker",
["npcID"] = 230904,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3050,
},
[1236973] = {
["encounterName"] = "Lord Chamberlain",
["source"] = "Lord Chamberlain",
["npcID"] = 164218,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2381,
},
[182359] = {
["source"] = "Grulk",
["event"] = "SPELL_CAST_START",
["npcID"] = 108441,
},
[216143] = {
["event"] = "SPELL_CAST_START",
["source"] = "Huntress Estrid",
["npcID"] = 108822,
},
[1216505] = {
["source"] = "The Gobfather",
["event"] = "SPELL_CAST_START",
["npcID"] = 231821,
},
[462936] = {
["source"] = "Medbot",
["event"] = "SPELL_CAST_START",
["npcID"] = 229769,
},
[227917] = {
["source"] = "Ghostly Understudy",
["event"] = "SPELL_CAST_START",
["npcID"] = 114526,
},
[225358] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadbog",
["npcID"] = 97517,
},
[213585] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skul'vrax",
["npcID"] = 93654,
},
[203348] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hill Ettin",
["npcID"] = 102886,
},
[217169] = {
["source"] = "Helarjar Soulkeeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 107673,
},
[201301] = {
["source"] = "Typhinius",
["event"] = "SPELL_CAST_START",
["npcID"] = 100760,
},
[13901] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkcrest Sorceress",
["npcID"] = 19947,
},
[1220618] = {
["encounterName"] = "Plexus Sentinel",
["source"] = "Plexus Sentinel",
["npcID"] = 233814,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3129,
},
[472154] = {
["source"] = "Venture Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 238624,
},
[183386] = {
["event"] = "SPELL_CAST_START",
["source"] = "Adolescent Storm Drake",
["npcID"] = 110667,
},
[423015] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["event"] = "SPELL_CAST_START",
["npcID"] = 207939,
},
[1224719] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forge Sentinel",
["npcID"] = 234041,
},
[1241100] = {
["encounterName"] = "Soulbinder Naazindhri",
["source"] = "Soulbinder Naazindhri",
["npcID"] = 233816,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3130,
},
[390256] = {
["source"] = "Proscenium Punk",
["event"] = "SPELL_CAST_START",
["npcID"] = 215791,
},
[187482] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tormented Skysunder",
["npcID"] = 111397,
},
[212564] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Inquisitor Tormentorum",
["encounterID"] = 1850,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 107114,
},
[213588] = {
["source"] = "Reaver Jdorn",
["event"] = "SPELL_CAST_START",
["npcID"] = 106982,
},
[1245203] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nexus-Princess Ky'veza",
["npcID"] = 244755,
},
[1224731] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-King Salhadaar",
["npcID"] = 237763,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3134,
},
[270481] = {
["source"] = "Demonic Tyrant",
["event"] = "SPELL_CAST_START",
["npcID"] = 135002,
},
[182877] = {
["source"] = "Geir",
["event"] = "SPELL_CAST_START",
["npcID"] = 91948,
},
[212054] = {
["source"] = "Nightglaive the Traitor",
["event"] = "SPELL_CAST_START",
["npcID"] = 90621,
},
[453733] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shurrai",
["npcID"] = 221224,
},
[209495] = {
["encounterName"] = "Patrol Captain Gerdo",
["source"] = "Guardian Construct",
["npcID"] = 104270,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1868,
},
[216150] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Huntress Estrid",
["npcID"] = 108822,
},
[253517] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dazar'ai Confessor",
["npcID"] = 122973,
},
[194140] = {
["event"] = "SPELL_CAST_START",
["source"] = "Manaspine Basilisk",
["npcID"] = 98653,
},
[223317] = {
["source"] = "Flotsam",
["event"] = "SPELL_CAST_START",
["npcID"] = 99929,
},
[215639] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ormgul the Pestilent",
["npcID"] = 95935,
},
[212568] = {
["encounterName"] = "Gul'dan",
["source"] = "Inquisitor Vethriz",
["encounterID"] = 1866,
["event"] = "SPELL_CAST_START",
["npcID"] = 104536,
},
[443500] = {
["source"] = "Royal Swarmguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 220197,
},
[448619] = {
["source"] = "Careless Hopgoblin",
["event"] = "SPELL_CAST_START",
["npcID"] = 223423,
},
[1224760] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Forge Sentinel",
["npcID"] = 234041,
},
[454762] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Chittering Fearmonger",
["npcID"] = 219996,
},
[227925] = {
["source"] = "Ghostly Understudy",
["event"] = "SPELL_CAST_START",
["npcID"] = 114526,
},
[199772] = {
["event"] = "SPELL_CAST_START",
["source"] = "Valarjar Champion",
["npcID"] = 97087,
},
[326794] = {
["event"] = "SPELL_CAST_START",
["source"] = "Inquisitor Sigar",
["npcID"] = 167876,
},
[1245240] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nexus-Princess Ky'veza",
["npcID"] = 244755,
},
[221783] = {
["encounterName"] = "Gul'dan",
["source"] = "Gul'dan",
["encounterID"] = 1866,
["event"] = "SPELL_CAST_START",
["npcID"] = 104154,
},
[255567] = {
["source"] = "T'lonja",
["event"] = "SPELL_CAST_START",
["npcID"] = 128455,
},
[34347] = {
["source"] = "Athissa",
["event"] = "SPELL_CAST_START",
["npcID"] = 88855,
},
[357508] = {
["event"] = "SPELL_CAST_START",
["source"] = "Enraged Direhorn",
["npcID"] = 180495,
},
[220248] = {
["source"] = "Magoria",
["event"] = "SPELL_CAST_START",
["npcID"] = 110423,
},
[352390] = {
["event"] = "SPELL_CAST_START",
["source"] = "Portalmancer Zo'honn",
["npcID"] = 179334,
},
[472169] = {
["source"] = "Venture Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 238624,
},
[265372] = {
["source"] = "Bewitched Captain",
["event"] = "SPELL_CAST_START",
["npcID"] = 131587,
},
[198750] = {
["encounterName"] = "Odyn",
["source"] = "Stormforged Obliterator",
["npcID"] = 102019,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1809,
},
[87618] = {
["encounterName"] = "Asaad",
["source"] = "Asaad",
["encounterID"] = 1042,
["event"] = "SPELL_CAST_START",
["npcID"] = 43875,
},
[428150] = {
["source"] = "High Priest Aemya",
["event"] = "SPELL_CAST_START",
["npcID"] = 212827,
},
[355464] = {
["source"] = "Coastwalker Goliath",
["event"] = "SPELL_CAST_START",
["npcID"] = 178165,
},
[1241165] = {
["source"] = "Soulbinder Sabeel",
["event"] = "SPELL_CAST_START",
["npcID"] = 230984,
},
[1241166] = {
["isChanneled"] = false,
["source"] = "Soulbinder Sabeel",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 230984,
},
[1224787] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-King Salhadaar",
["npcID"] = 237763,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3134,
},
[193633] = {
["event"] = "SPELL_CAST_START",
["source"] = "Risen Archer",
["npcID"] = 98275,
},
[1224793] = {
["encounterName"] = "Soul-Scribe",
["source"] = "Soul-Scribe",
["npcID"] = 234935,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3109,
},
[162921] = {
["source"] = "Shallows Heron",
["event"] = "SPELL_CAST_START",
["npcID"] = 89652,
},
[204895] = {
["event"] = "SPELL_CAST_START",
["source"] = "Portal Keeper",
["npcID"] = 102302,
},
[443510] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nightfall Executor",
["npcID"] = 217516,
},
[375943] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["npcID"] = 186151,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2580,
},
[186468] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bleakwater Helsquid",
["npcID"] = 91537,
},
[195682] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felskorn Torturer",
["npcID"] = 96121,
},
[200289] = {
["encounterName"] = "Shade of Xavius",
["source"] = "Shade of Xavius",
["npcID"] = 99192,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1839,
},
[204896] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Bloodscent Felhound",
["npcID"] = 98813,
},
[231002] = {
["event"] = "SPELL_CAST_START",
["source"] = "Regal Cloudwing",
["npcID"] = 116059,
},
[1224812] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-King Salhadaar",
["npcID"] = 237763,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3134,
},
[180327] = {
["source"] = "Felfire Imp",
["event"] = "SPELL_CAST_START",
["npcID"] = 249121,
},
[195172] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Crusher",
["npcID"] = 91782,
},
[355473] = {
["event"] = "SPELL_CAST_START",
["source"] = "Commander Zo'far",
["npcID"] = 179821,
},
[213600] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felwing",
["npcID"] = 105938,
},
[458874] = {
["encounterName"] = "Cult Leaders",
["source"] = "Shadeguard Speaker",
["npcID"] = 229855,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3050,
},
[198245] = {
["encounterName"] = "Smashspite the Hateful",
["source"] = "Smashspite the Hateful",
["npcID"] = 98949,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1834,
},
[1245309] = {
["encounterName"] = "Glazer",
["source"] = "Glazer",
["npcID"] = 95887,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1817,
},
[355477] = {
["event"] = "SPELL_CAST_START",
["source"] = "Commerce Enforcer",
["npcID"] = 179842,
},
[458876] = {
["encounterName"] = "Cult Leaders",
["source"] = "Shadeguard Speaker",
["npcID"] = 229855,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3050,
},
[202341] = {
["encounterName"] = "Anub'esset",
["source"] = "Anub'esset",
["npcID"] = 102246,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1852,
},
[448640] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cursedforge Honor Guard",
["npcID"] = 214264,
},
[355479] = {
["event"] = "SPELL_CAST_START",
["source"] = "Commander Zo'far",
["npcID"] = 179821,
},
[204901] = {
["event"] = "SPELL_CAST_START",
["source"] = "Portal Keeper",
["npcID"] = 102336,
},
[1216656] = {
["isChanneled"] = true,
["source"] = "The Gobfather",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 231821,
},
[197735] = {
["source"] = "Vadis",
["event"] = "SPELL_CAST_START",
["npcID"] = 109106,
},
[453761] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Shurrai",
["npcID"] = 221224,
},
[192617] = {
["encounterName"] = "Wrath of Azshara",
["source"] = "Wrath of Azshara",
["npcID"] = 96028,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1814,
},
[398479] = {
["source"] = "Lost Legion Doomguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 246553,
},
[428169] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_CAST_START",
["npcID"] = 207940,
},
[423051] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["event"] = "SPELL_CAST_START",
["npcID"] = 207939,
},
[210022] = {
["encounterName"] = "Grand Magistrix Elisande",
["source"] = "Elisande",
["encounterID"] = 1872,
["event"] = "SPELL_CAST_START",
["npcID"] = 106643,
},
[186476] = {
["source"] = "Helarjar Berserker",
["event"] = "SPELL_CAST_START",
["npcID"] = 111332,
},
[203368] = {
["source"] = "Chattering Devil",
["event"] = "SPELL_CAST_START",
["npcID"] = 107323,
},
[191595] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felsworn Infester",
["npcID"] = 96587,
},
[213606] = {
["source"] = "Soultrapper Mevra",
["event"] = "SPELL_CAST_START",
["npcID"] = 106984,
},
[210535] = {
["event"] = "SPELL_CAST_START",
["source"] = "Garzareth",
["npcID"] = 97822,
},
[223332] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hertha Grimdottir",
["npcID"] = 103223,
},
[182894] = {
["source"] = "Gangamesh",
["event"] = "SPELL_CAST_START",
["npcID"] = 89653,
},
[212583] = {
["source"] = "Kottr Vondyr",
["event"] = "SPELL_CAST_START",
["npcID"] = 98421,
},
[204905] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Mogu'shan Secret-Keeper",
["npcID"] = 99676,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1850,
},
[450697] = {
["source"] = "Cinderbee Worker",
["event"] = "SPELL_CAST_START",
["npcID"] = 215023,
},
[472196] = {
["source"] = "Imagined Rug Monster",
["event"] = "SPELL_CAST_START",
["npcID"] = 233755,
},
[473220] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Big M.O.M.M.A.",
["npcID"] = 226398,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3020,
},
[462983] = {
["source"] = "Automatic Ironstrider",
["event"] = "SPELL_CAST_START",
["npcID"] = 229778,
},
[210537] = {
["event"] = "SPELL_CAST_START",
["source"] = "Garzareth",
["npcID"] = 97822,
},
[182384] = {
["source"] = "Hatecoil Spitespeaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 89025,
},
[203371] = {
["source"] = "Hill Ettin",
["event"] = "SPELL_CAST_START",
["npcID"] = 102886,
},
[249440] = {
["event"] = "SPELL_CAST_START",
["source"] = "Doomguard Challenger",
["npcID"] = 246711,
},
[226406] = {
["source"] = "Emberhusk Dominator",
["event"] = "SPELL_CAST_START",
["npcID"] = 113537,
},
[471176] = {
["source"] = "Sewer Slinker",
["event"] = "SPELL_CAST_START",
["npcID"] = 233827,
},
[1241278] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lurking Phaseburrower",
["npcID"] = 242548,
},
[207979] = {
["encounterName"] = "Talixae Flamewreath",
["source"] = "Jazshariu",
["npcID"] = 104273,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1869,
},
[196206] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Shadowmoon Warlock",
["npcID"] = 99704,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1850,
},
[205420] = {
["encounterName"] = "Krosus",
["source"] = "Krosus",
["encounterID"] = 1842,
["event"] = "SPELL_CAST_START",
["npcID"] = 101002,
},
[201837] = {
["event"] = "SPELL_CAST_START",
["source"] = "Taintheart Summoner",
["npcID"] = 99366,
},
[326829] = {
["event"] = "SPELL_CAST_START",
["source"] = "Inquisitor Sigar",
["npcID"] = 167876,
},
[423062] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["event"] = "SPELL_CAST_START",
["npcID"] = 207939,
},
[207980] = {
["event"] = "SPELL_CAST_START",
["source"] = "Baalgar the Watchful",
["npcID"] = 104274,
},
[100423] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flamewaker Subjugator",
["npcID"] = 53188,
},
[1237195] = {
["source"] = "Burrowing Creeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 245092,
},
[185970] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overseer Lykill",
["npcID"] = 86535,
},
[175221] = {
["source"] = "Worgen Tracker",
["event"] = "SPELL_CAST_START",
["npcID"] = 93961,
},
[61353] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dagna Flintlock",
["npcID"] = 96779,
},
[217707] = {
["source"] = "Elya Azuremoon",
["event"] = "SPELL_CAST_START",
["npcID"] = 88859,
},
[201839] = {
["event"] = "SPELL_CAST_START",
["source"] = "Taintheart Summoner",
["npcID"] = 99366,
},
[210541] = {
["event"] = "SPELL_CAST_START",
["source"] = "Karuas",
["npcID"] = 97859,
},
[346286] = {
["encounterName"] = "Mailroom Mayhem",
["source"] = "P.O.S.T. Master",
["npcID"] = 175646,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2424,
},
[194674] = {
["event"] = "SPELL_CAST_START",
["source"] = "Seacursed Slaver",
["npcID"] = 97043,
},
[200817] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rage Rot",
["npcID"] = 101660,
},
[451734] = {
["event"] = "SPELL_CAST_START",
["source"] = "Persistent Honeyslime",
["npcID"] = 222843,
},
[181366] = {
["source"] = "Spectral Student",
["event"] = "SPELL_CAST_START",
["npcID"] = 91431,
},
[194675] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazing Imp",
["npcID"] = 98963,
},
[1229033] = {
["source"] = "Voidcrawler",
["event"] = "SPELL_CAST_START",
["npcID"] = 245782,
},
[1229037] = {
["source"] = "Voidcrawler",
["event"] = "SPELL_CAST_START",
["npcID"] = 245782,
},
[1229038] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Dimensius",
["npcID"] = 241517,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3135,
},
[249447] = {
["event"] = "SPELL_CAST_START",
["source"] = "Explosive Orb",
["npcID"] = 125656,
},
[450714] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Lord",
["npcID"] = 218103,
},
[231532] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pyrestar Demolisher",
["npcID"] = 114845,
},
[1237240] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Shadowguard Weavemaster",
["npcID"] = 240974,
},
[1237245] = {
["event"] = "SPELL_CAST_START",
["source"] = "Great Devourer",
["npcID"] = 244444,
},
[186488] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tideskorn Longaxe",
["npcID"] = 91204,
},
[472216] = {
["source"] = "Darkfuse Insurance",
["event"] = "SPELL_CAST_START",
["npcID"] = 239463,
},
[197238] = {
["event"] = "SPELL_CAST_START",
["source"] = "Brulworm",
["npcID"] = 104614,
},
[465051] = {
["event"] = "SPELL_CAST_START",
["source"] = "Xal'atath",
["npcID"] = 230937,
},
[211571] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eredar Chaosbringer",
["npcID"] = 105617,
},
[326846] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Inquisitor Sigar",
["npcID"] = 167876,
},
[326847] = {
["event"] = "SPELL_CAST_START",
["source"] = "Inquisitor Sigar",
["npcID"] = 167876,
},
[1241357] = {
["encounterName"] = "Soulbinder Naazindhri",
["source"] = "Unbound Mage",
["npcID"] = 237872,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3130,
},
[1224980] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Unbound Entity",
["npcID"] = 237132,
},
[356537] = {
["event"] = "SPELL_CAST_START",
["source"] = "Portalmancer Zo'honn",
["npcID"] = 179334,
},
[427176] = {
["encounterName"] = "The Darkness",
["source"] = "Wriggling Darkspawn",
["encounterID"] = 2788,
["event"] = "SPELL_CAST_START",
["npcID"] = 213008,
},
[181372] = {
["source"] = "Drowned Magister",
["event"] = "SPELL_CAST_START",
["npcID"] = 87368,
},
[456866] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sureki Priestess",
["npcID"] = 222688,
},
[348350] = {
["encounterName"] = "Zo'phex the Sentinel",
["source"] = "Zo'phex",
["npcID"] = 175616,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2425,
},
[456868] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sureki Priestess",
["npcID"] = 222688,
},
[189052] = {
["source"] = "Kester Farseeker",
["event"] = "SPELL_CAST_START",
["npcID"] = 92971,
},
[193659] = {
["encounterName"] = "God-King Skovald",
["source"] = "God-King Skovald",
["npcID"] = 95675,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1808,
},
[1216812] = {
["source"] = "The Gobfather",
["event"] = "SPELL_CAST_START",
["npcID"] = 231821,
},
[1237288] = {
["source"] = "Reshanor",
["event"] = "SPELL_CAST_START",
["npcID"] = 238319,
},
[1216815] = {
["source"] = "Xal'atath",
["event"] = "SPELL_CAST_START",
["npcID"] = 236933,
},
[219254] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ana-Mouz",
["npcID"] = 109943,
},
[1225010] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-King Salhadaar",
["npcID"] = 237763,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3134,
},
[183423] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Vethir",
["npcID"] = 90907,
},
[1225016] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-King Salhadaar",
["npcID"] = 237763,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3134,
},
[223350] = {
["isChanneled"] = true,
["source"] = "Regurgitated Marshstomper",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 112128,
},
[224374] = {
["encounterName"] = "Talixae Flamewreath",
["source"] = "Infernal Imp",
["encounterID"] = 1869,
["event"] = "SPELL_CAST_START",
["npcID"] = 112668,
},
[213625] = {
["source"] = "Soultrapper Mevra",
["event"] = "SPELL_CAST_START",
["npcID"] = 106984,
},
[449709] = {
["source"] = "Gorloc Springcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 218650,
},
[356548] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gatewarden Zo'mazz",
["npcID"] = 178392,
},
[199805] = {
["source"] = "Stormforged Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 96574,
},
[451758] = {
["source"] = "Murkfin Depthstalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 213622,
},
[202365] = {
["event"] = "SPELL_CAST_START",
["source"] = "Runecarver Slave",
["npcID"] = 102375,
},
[1237319] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Voidwarden",
["npcID"] = 234478,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3135,
},
[212091] = {
["source"] = "Athissa",
["event"] = "SPELL_CAST_START",
["npcID"] = 88091,
},
[193152] = {
["encounterName"] = "King Deepbeard",
["source"] = "King Deepbeard",
["npcID"] = 91797,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1812,
},
[460977] = {
["event"] = "SPELL_CAST_START",
["source"] = "Slippery Syphoner",
["npcID"] = 214548,
},
[228985] = {
["source"] = "Coldmist Widow",
["event"] = "SPELL_CAST_START",
["npcID"] = 115019,
},
[213629] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lyrath Moonfeather",
["npcID"] = 98241,
},
[256627] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scrimshaw Enforcer",
["npcID"] = 129374,
},
[272609] = {
["event"] = "SPELL_CAST_START",
["source"] = "Faceless Corruptor",
["npcID"] = 138281,
},
[221308] = {
["source"] = "Blacksail Gunner",
["event"] = "SPELL_CAST_START",
["npcID"] = 108146,
},
[197250] = {
["encounterName"] = "Cordana Felsong",
["source"] = "Cordana Felsong",
["npcID"] = 95888,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1818,
},
[440506] = {
["source"] = "Stream Skipper",
["event"] = "SPELL_CAST_START",
["npcID"] = 213700,
},
[446649] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["event"] = "SPELL_CAST_START",
["npcID"] = 207939,
},
[197251] = {
["encounterName"] = "Cordana Felsong",
["source"] = "Cordana Felsong",
["npcID"] = 95888,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1818,
},
[201858] = {
["event"] = "SPELL_CAST_START",
["source"] = "Taintheart Deadeye",
["npcID"] = 100539,
},
[161932] = {
["source"] = "Gangamesh",
["event"] = "SPELL_CAST_START",
["npcID"] = 89653,
},
[320729] = {
["encounterName"] = "Xav the Unfallen",
["source"] = "Xav the Unfallen",
["npcID"] = 162329,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2366,
},
[1220981] = {
["encounterName"] = "Plexus Sentinel",
["source"] = "Plexus Sentinel",
["npcID"] = 233814,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3129,
},
[1220982] = {
["encounterName"] = "Plexus Sentinel",
["source"] = "Plexus Sentinel",
["encounterID"] = 3129,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 233814,
},
[262377] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crawler Mine",
["npcID"] = 133482,
},
[227965] = {
["source"] = "Skeletal Usher",
["event"] = "SPELL_CAST_START",
["npcID"] = 114544,
},
[217728] = {
["source"] = "Pit Lord",
["event"] = "SPELL_CAST_START",
["npcID"] = 98757,
},
[227966] = {
["source"] = "Skeletal Usher",
["event"] = "SPELL_CAST_START",
["npcID"] = 114544,
},
[192135] = {
["encounterName"] = "Warlord Parjesh",
["source"] = "Hatecoil Shellbreaker",
["npcID"] = 97264,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1810,
},
[209027] = {
["event"] = "SPELL_CAST_START",
["source"] = "Duskwatch Guard",
["npcID"] = 111563,
},
[444608] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_CAST_START",
["npcID"] = 207940,
},
[227967] = {
["encounterName"] = "Helya",
["source"] = "Helya",
["encounterID"] = 2008,
["event"] = "SPELL_CAST_START",
["npcID"] = 114537,
},
[1225099] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "The Royal Voidwing",
["npcID"] = 244170,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3134,
},
[1245575] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Adarus Duskblaze",
["npcID"] = 237661,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3122,
},
[241788] = {
["source"] = "Spectral Attendant",
["event"] = "SPELL_CAST_START",
["npcID"] = 114632,
},
[1245579] = {
["encounterName"] = "So'azmi",
["source"] = "So'azmi",
["npcID"] = 175806,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2437,
},
[195720] = {
["source"] = "Sekhan",
["event"] = "SPELL_CAST_START",
["npcID"] = 101077,
},
[431303] = {
["source"] = "Nightfall Shadowmage",
["event"] = "SPELL_CAST_START",
["npcID"] = 213892,
},
[218755] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Festerhide Grizzly",
["npcID"] = 95779,
},
[1225113] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowguard Technomancer",
["npcID"] = 237132,
},
[1266065] = {
["source"] = "Blast Waves",
["event"] = "SPELL_CAST_START",
["npcID"] = 125638,
},
[192138] = {
["encounterName"] = "Warlord Parjesh",
["source"] = "Hatecoil Crestrider",
["npcID"] = 97269,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1810,
},
[450756] = {
["source"] = "Nightfall Commander",
["event"] = "SPELL_CAST_START",
["npcID"] = 214762,
},
[197769] = {
["source"] = "Gelmogg",
["event"] = "SPELL_CAST_START",
["npcID"] = 95881,
},
[157331] = {
["source"] = "Greater Storm Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 77936,
},
[216197] = {
["event"] = "SPELL_CAST_START",
["source"] = "Helarjar Mistcaller",
["npcID"] = 99033,
},
[449734] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["encounterID"] = 2839,
["event"] = "SPELL_CAST_START",
["npcID"] = 213937,
},
[438473] = {
["encounterName"] = "Avanoxx",
["source"] = "Avanoxx",
["npcID"] = 213179,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2926,
},
[455877] = {
["source"] = "Bloodswell Creation",
["event"] = "SPELL_CAST_START",
["npcID"] = 220891,
},
[211079] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nightborne Reclaimer",
["npcID"] = 105915,
},
[203401] = {
["source"] = "Felblood Packhound",
["event"] = "SPELL_CAST_START",
["npcID"] = 98785,
},
[225412] = {
["isChanneled"] = true,
["source"] = "Chronowraith",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 113307,
},
[193164] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blade Dancer Illianna",
["npcID"] = 96657,
},
[1245611] = {
["event"] = "SPELL_CAST_START",
["source"] = "Influx Warden",
["npcID"] = 246874,
},
[438476] = {
["encounterName"] = "Avanoxx",
["source"] = "Avanoxx",
["npcID"] = 213179,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2926,
},
[195724] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sylvan Bear",
["npcID"] = 106288,
},
[188046] = {
["source"] = "Denizen of the Dream",
["event"] = "SPELL_CAST_START",
["npcID"] = 198489,
},
[393432] = {
["npcID"] = 190340,
},
[189070] = {
["source"] = "Royal Dreadguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 93490,
},
[210569] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ivory Sentinel",
["npcID"] = 92751,
},
[224390] = {
["source"] = "Sidereal Familiar",
["event"] = "SPELL_CAST_START",
["npcID"] = 112718,
},
[212617] = {
["source"] = "Rulf Bonesnapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 109317,
},
[181393] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bitterbrine Saltcaster",
["npcID"] = 89284,
},
[215177] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hannval the Butcher",
["npcID"] = 107926,
},
[1216967] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voidveil Manta",
["npcID"] = 234842,
},
[225927] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gilded Guardian",
["npcID"] = 112712,
},
[1245634] = {
["encounterName"] = "So'azmi",
["source"] = "So'azmi",
["npcID"] = 175806,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2437,
},
[215178] = {
["source"] = "Bahagar",
["event"] = "SPELL_CAST_START",
["npcID"] = 110562,
},
[1225162] = {
["encounterName"] = "Soul-Scribe",
["source"] = "Soul-Scribe",
["npcID"] = 234935,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3109,
},
[466124] = {
["encounterName"] = "Geezle Gigazap",
["source"] = "Geezle Gigazap",
["npcID"] = 226404,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3054,
},
[1225172] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Shadowguard Technomancer",
["npcID"] = 234833,
},
[1225174] = {
["encounterName"] = "Soul-Scribe",
["source"] = "Soul-Scribe",
["npcID"] = 234935,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3109,
},
[197776] = {
["encounterName"] = "General Xakal",
["source"] = "General Xakal",
["npcID"] = 98206,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1828,
},
[241798] = {
["source"] = "Reformed Maiden",
["event"] = "SPELL_CAST_START",
["npcID"] = 114783,
},
[193682] = {
["encounterName"] = "Lady Hatecoil",
["source"] = "Lady Hatecoil",
["npcID"] = 91789,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1811,
},
[463058] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Hyena",
["npcID"] = 229252,
},
[196242] = {
["encounterName"] = "Ash'Golm",
["source"] = "Dreadlord Mendacius",
["npcID"] = 99649,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1816,
},
[241799] = {
["source"] = "Reformed Maiden",
["event"] = "SPELL_CAST_START",
["npcID"] = 114783,
},
[472273] = {
["source"] = "Darkfuse Insurance",
["event"] = "SPELL_CAST_START",
["npcID"] = 239463,
},
[185493] = {
["source"] = "Doomguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 249120,
},
[1245669] = {
["encounterName"] = "So'azmi",
["source"] = "So'azmi",
["npcID"] = 175806,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2437,
},
[463061] = {
["isChanneled"] = false,
["source"] = "Darkfuse Hyena",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 229252,
},
[414945] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fungal Rotspreader",
["npcID"] = 207453,
},
[223373] = {
["source"] = "Flotsam",
["event"] = "SPELL_CAST_START",
["npcID"] = 99929,
},
[185495] = {
["source"] = "Huk'roth the Huntmaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 110486,
},
[227981] = {
["source"] = "Spectral Patron",
["event"] = "SPELL_CAST_START",
["npcID"] = 114541,
},
[212113] = {
["source"] = "Athissa",
["event"] = "SPELL_CAST_START",
["npcID"] = 88091,
},
[204947] = {
["event"] = "SPELL_CAST_START",
["source"] = "Portal Keeper",
["npcID"] = 102336,
},
[452828] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hunting Skyrazor",
["npcID"] = 226150,
},
[450781] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flickerflame Sticker",
["npcID"] = 212629,
},
[1225218] = {
["encounterName"] = "Soul-Scribe",
["source"] = "Soul-Scribe",
["npcID"] = 234935,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3109,
},
[1233416] = {
["encounterName"] = "Fractillus",
["source"] = "Fractillus",
["npcID"] = 237861,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3133,
},
[91997] = {
["event"] = "SPELL_CAST_START",
["source"] = "Apothecary Curseheart",
["npcID"] = 93987,
},
[431333] = {
["source"] = "Nightfall Darkcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 213893,
},
[453856] = {
["isChanneled"] = true,
["source"] = "Speaker Shadowcrown",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 225601,
},
[355577] = {
["source"] = "Stormforged Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 178171,
},
[450786] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cinderbee Forager",
["npcID"] = 222976,
},
[205462] = {
["event"] = "SPELL_CAST_START",
["source"] = "Karuas",
["npcID"] = 97859,
},
[440549] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobyss Bonechewer",
["npcID"] = 215040,
},
[434407] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["encounterID"] = 2839,
["event"] = "SPELL_CAST_START",
["npcID"] = 213937,
},
[227985] = {
["encounterName"] = "Opera Hall",
["source"] = "Coggleston",
["encounterID"] = 1957,
["event"] = "SPELL_CAST_START",
["npcID"] = 114328,
},
[465120] = {
["event"] = "SPELL_CAST_START",
["source"] = "Loaderbot",
["npcID"] = 231014,
},
[196249] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadlord Mendacius",
["npcID"] = 99649,
},
[204951] = {
["event"] = "SPELL_CAST_START",
["source"] = "Portal Keeper",
["npcID"] = 102336,
},
[440551] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobyss Bonechewer",
["npcID"] = 215040,
},
[200345] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Risen Archer",
["npcID"] = 98275,
},
[157348] = {
["source"] = "Greater Storm Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 77936,
},
[227987] = {
["encounterName"] = "Opera Hall",
["source"] = "Coggleston",
["encounterID"] = 1957,
["event"] = "SPELL_CAST_START",
["npcID"] = 114328,
},
[183454] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vethir",
["npcID"] = 90907,
},
[188573] = {
["source"] = "Araxxas",
["event"] = "SPELL_CAST_START",
["npcID"] = 92419,
},
[355584] = {
["source"] = "Stormforged Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 178171,
},
[223381] = {
["encounterName"] = "Ursoc",
["source"] = "Dire Shaman",
["encounterID"] = 1841,
["event"] = "SPELL_CAST_START",
["npcID"] = 112153,
},
[241809] = {
["encounterName"] = "Maiden of Virtue",
["source"] = "Virtuous Gentleman",
["encounterID"] = 1954,
["event"] = "SPELL_CAST_START",
["npcID"] = 183424,
},
[213656] = {
["isChanneled"] = true,
["source"] = "Dreadbog",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 97517,
},
[465127] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Loaderbot",
["npcID"] = 231014,
},
[190110] = {
["source"] = "Worgen Tracker",
["event"] = "SPELL_CAST_START",
["npcID"] = 93961,
},
[232084] = {
["source"] = "Backup Singer",
["event"] = "SPELL_CAST_START",
["npcID"] = 116549,
},
[192158] = {
["event"] = "SPELL_CAST_START",
["source"] = "Olmyr the Enlightened",
["npcID"] = 97202,
},
[388349] = {
["source"] = "Sightless Wavecutter",
["event"] = "SPELL_CAST_START",
["npcID"] = 220772,
},
[213146] = {
["source"] = "Eye of Keletress",
["event"] = "SPELL_CAST_START",
["npcID"] = 105256,
},
[196255] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hillstalker Worg",
["npcID"] = 91423,
},
[431349] = {
["source"] = "Nightfall Dark Architect",
["event"] = "SPELL_CAST_START",
["npcID"] = 213885,
},
[189601] = {
["source"] = "Trelan Shieldbreaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 92966,
},
[194208] = {
["isChanneled"] = true,
["source"] = "Portal Master Jorvinax",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 98217,
},
[195232] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Wavebinder",
["npcID"] = 97170,
},
[201375] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Dungeoneer's Training Dummy",
["npcID"] = 97043,
},
[207006] = {
["encounterName"] = "Gul'dan",
["source"] = "Inquisitor Vethriz",
["encounterID"] = 1866,
["event"] = "SPELL_CAST_START",
["npcID"] = 104536,
},
[219803] = {
["source"] = "Drugon the Frostblood",
["event"] = "SPELL_CAST_START",
["npcID"] = 110378,
},
[190115] = {
["source"] = "Worgen Tracker",
["event"] = "SPELL_CAST_START",
["npcID"] = 93961,
},
[1241693] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hulking Bloodguard",
["npcID"] = 216338,
},
[195234] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Wavebinder",
["npcID"] = 97170,
},
[204448] = {
["encounterName"] = "Skorpyron",
["source"] = "Skorpyron",
["encounterID"] = 1849,
["event"] = "SPELL_CAST_START",
["npcID"] = 102263,
},
[221340] = {
["isChanneled"] = true,
["source"] = "Terrace Grove-Tender",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 111151,
},
[1225319] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-King Salhadaar",
["npcID"] = 237763,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3134,
},
[433403] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Skittering Swarmer",
["npcID"] = 208245,
},
[202913] = {
["encounterName"] = "Tirathon Saltheril",
["source"] = "Tirathon Saltheril",
["npcID"] = 95885,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1815,
},
[213663] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fal'dorei Weaver",
["npcID"] = 105625,
},
[180392] = {
["source"] = "Rakeeshi Sorcerer",
["event"] = "SPELL_CAST_START",
["npcID"] = 110474,
},
[201379] = {
["encounterName"] = "Shivermaw",
["source"] = "Shivermaw",
["npcID"] = 101951,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1845,
},
[198820] = {
["encounterName"] = "Lord Kur'talos Ravencrest",
["source"] = "Latosius",
["npcID"] = 98970,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1835,
},
[182952] = {
["source"] = "Elya Azuremoon",
["event"] = "SPELL_CAST_START",
["npcID"] = 88859,
},
[204963] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lord Malgath",
["npcID"] = 102282,
},
[213665] = {
["source"] = "Reaver Jdorn",
["event"] = "SPELL_CAST_START",
["npcID"] = 106982,
},
[197797] = {
["encounterName"] = "Ilysanna Ravencrest",
["source"] = "Risen Arcanist",
["npcID"] = 100486,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1833,
},
[455932] = {
["source"] = "Kobyss Necromancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 214625,
},
[183465] = {
["source"] = "Tarspitter Lurker",
["event"] = "SPELL_CAST_START",
["npcID"] = 91001,
},
[204452] = {
["isChanneled"] = true,
["source"] = "Hellwarden Xaphan",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 101886,
},
[1233539] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Dimensius",
["npcID"] = 233824,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3135,
},
[197798] = {
["source"] = "Gelmogg",
["event"] = "SPELL_CAST_START",
["npcID"] = 95881,
},
[433411] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Darkcaster",
["npcID"] = 208242,
},
[223392] = {
["encounterName"] = "Ursoc",
["source"] = "Dire Shaman",
["encounterID"] = 1841,
["event"] = "SPELL_CAST_START",
["npcID"] = 112153,
},
[431364] = {
["source"] = "Nightfall Ritualist",
["event"] = "SPELL_CAST_START",
["npcID"] = 214761,
},
[428293] = {
["encounterName"] = "Lady Naz'jar",
["source"] = "Naz'jar Honor Guard",
["npcID"] = 40633,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1045,
},
[180395] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eredar Supplicant",
["npcID"] = 90661,
},
[194216] = {
["encounterName"] = "Harbaron",
["source"] = "Harbaron",
["npcID"] = 96754,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1823,
},
[195240] = {
["event"] = "SPELL_CAST_START",
["source"] = "Drogbar Rivertroller",
["npcID"] = 96124,
},
[200359] = {
["encounterName"] = "Shade of Xavius",
["source"] = "Shade of Xavius",
["npcID"] = 99192,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1839,
},
[204966] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lord Malgath",
["npcID"] = 102282,
},
[214692] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gerenth the Vile",
["npcID"] = 107435,
},
[215204] = {
["encounterName"] = "Patrol Captain Gerdo",
["source"] = "Vigilant Duskwatch",
["npcID"] = 104918,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1868,
},
[451843] = {
["source"] = "Stormguard Gorren",
["event"] = "SPELL_CAST_START",
["npcID"] = 207205,
},
[188587] = {
["event"] = "SPELL_CAST_START",
["source"] = "Understone Demolisher",
["npcID"] = 102253,
},
[214181] = {
["source"] = "Putrid Sludge",
["event"] = "SPELL_CAST_START",
["npcID"] = 113512,
},
[202408] = {
["encounterName"] = "Ymiron, the Fallen King",
["source"] = "Runecarver Slave",
["npcID"] = 102375,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1822,
},
[228514] = {
["encounterName"] = "Helya",
["source"] = "Helya",
["encounterID"] = 2008,
["event"] = "SPELL_CAST_START",
["npcID"] = 114537,
},
[116] = {
["npcID"] = 188027,
},
[221348] = {
["source"] = "First Mate Oxswain",
["event"] = "SPELL_CAST_START",
["npcID"] = 108137,
},
[1237671] = {
["event"] = "SPELL_CAST_START",
["source"] = "D'rude",
["npcID"] = 244453,
},
[187565] = {
["source"] = "Tainted Vine",
["event"] = "SPELL_CAST_START",
["npcID"] = 114215,
},
[445705] = {
["source"] = "Deepwater Makura",
["event"] = "SPELL_CAST_START",
["npcID"] = 220643,
},
[382233] = {
["npcID"] = 193462,
},
[214183] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Dreadbog",
["npcID"] = 97517,
},
[444683] = {
["source"] = "Ramolith Stonecrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 221641,
},
[192173] = {
["source"] = "High Crawliac",
["event"] = "SPELL_CAST_START",
["npcID"] = 95153,
},
[204970] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kudzilla",
["npcID"] = 99362,
},
[37054] = {
["source"] = "Golden Xue",
["event"] = "SPELL_CAST_START",
["npcID"] = 88932,
},
[181424] = {
["source"] = "The Oracle",
["event"] = "SPELL_CAST_START",
["npcID"] = 89850,
},
[227493] = {
["encounterName"] = "Attumen the Huntsman",
["source"] = "Attumen the Huntsman",
["encounterID"] = 1960,
["event"] = "SPELL_CAST_START",
["npcID"] = 114262,
},
[182960] = {
["source"] = "Elya Azuremoon",
["event"] = "SPELL_CAST_START",
["npcID"] = 88859,
},
[1237690] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Dimensius",
["npcID"] = 245255,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3135,
},
[197805] = {
["encounterName"] = "Helya",
["source"] = "Helya",
["npcID"] = 96759,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1824,
},
[1237694] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Artoshion",
["npcID"] = 245255,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3135,
},
[199341] = {
["event"] = "SPELL_CAST_START",
["source"] = "Valarjar Trapper",
["npcID"] = 96934,
},
[426260] = {
["event"] = "SPELL_CAST_START",
["source"] = "Torchsnarl",
["npcID"] = 212411,
},
[472329] = {
["source"] = "Uninformed Citizen",
["event"] = "SPELL_CAST_START",
["npcID"] = 233280,
},
[181426] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fallen Priestess",
["npcID"] = 91074,
},
[218793] = {
["source"] = "Fjordun",
["event"] = "SPELL_CAST_START",
["npcID"] = 109584,
},
[211115] = {
["event"] = "SPELL_CAST_START",
["source"] = "Warp Shade",
["npcID"] = 106059,
},
[228519] = {
["encounterName"] = "Helya",
["source"] = "Grimelord",
["npcID"] = 114709,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2008,
},
[241828] = {
["encounterName"] = "Attumen the Huntsman",
["source"] = "Spectral Charger",
["encounterID"] = 1960,
["event"] = "SPELL_CAST_START",
["npcID"] = 114804,
},
[1217232] = {
["encounterName"] = "Azhiccar",
["source"] = "Azhiccar",
["npcID"] = 234893,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3107,
},
[201902] = {
["event"] = "SPELL_CAST_START",
["source"] = "Taintheart Deadeye",
["npcID"] = 100539,
},
[202414] = {
["encounterName"] = "Sael'orn",
["source"] = "Sael'orn",
["npcID"] = 102387,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1851,
},
[224425] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Vicious Manafang",
["npcID"] = 98759,
},
[466190] = {
["encounterName"] = "Geezle Gigazap",
["source"] = "Geezle Gigazap",
["npcID"] = 226404,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3054,
},
[205486] = {
["encounterName"] = "Star Augur Etraeus",
["source"] = "Star Augur Etraeus",
["encounterID"] = 1863,
["event"] = "SPELL_CAST_START",
["npcID"] = 103758,
},
[448787] = {
["source"] = "Lightspawn",
["event"] = "SPELL_CAST_START",
["npcID"] = 206710,
},
[223914] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bo'lan the Marked",
["npcID"] = 111860,
},
[1237721] = {
["source"] = "Infernal Dreadlord",
["event"] = "SPELL_CAST_START",
["npcID"] = 246872,
},
[217260] = {
["source"] = "Hatecoil Stormcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 88087,
},
[198833] = {
["encounterName"] = "Lord Kur'talos Ravencrest",
["source"] = "Latosius",
["npcID"] = 98970,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1835,
},
[199345] = {
["encounterName"] = "Dresaron",
["source"] = "Dresaron",
["npcID"] = 99200,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1838,
},
[1225444] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-King Salhadaar",
["npcID"] = 237763,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3134,
},
[221356] = {
["source"] = "Twilight Stardancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 111164,
},
[320822] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zolramus Bonemender",
["npcID"] = 165222,
},
[448791] = {
["source"] = "Ardent Paladin",
["event"] = "SPELL_CAST_START",
["npcID"] = 206704,
},
[265540] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fetid Maggot",
["npcID"] = 130909,
},
[228011] = {
["encounterName"] = "Opera Hall",
["source"] = "Mrs. Cauldrons",
["encounterID"] = 1957,
["event"] = "SPELL_CAST_START",
["npcID"] = 114522,
},
[196787] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fel-Infused Fury",
["npcID"] = 99956,
},
[193716] = {
["encounterName"] = "Lady Hatecoil",
["source"] = "Lady Hatecoil",
["npcID"] = 91789,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1811,
},
[466197] = {
["encounterName"] = "Geezle Gigazap",
["source"] = "Geezle Gigazap",
["npcID"] = 226404,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3054,
},
[228012] = {
["encounterName"] = "Odyn",
["source"] = "Hymdall",
["encounterID"] = 1958,
["event"] = "SPELL_CAST_START",
["npcID"] = 114361,
},
[196788] = {
["isChanneled"] = true,
["source"] = "Goldsnuffle Lookout",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 108490,
},
[398631] = {
["source"] = "Venture Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 238624,
},
[193717] = {
["encounterName"] = "Lady Hatecoil",
["source"] = "Lady Hatecoil",
["npcID"] = 91789,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1811,
},
[198324] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Skjal",
["npcID"] = 99307,
},
[195253] = {
["event"] = "SPELL_CAST_START",
["source"] = "Restless Tides",
["npcID"] = 97173,
},
[195765] = {
["event"] = "SPELL_CAST_START",
["source"] = "Yotnar",
["npcID"] = 96175,
},
[202420] = {
["source"] = "Eredar Summoner",
["event"] = "SPELL_CAST_START",
["npcID"] = 98505,
},
[195254] = {
["encounterName"] = "Amalgam of Souls",
["source"] = "Amalgam of Souls",
["npcID"] = 98542,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1832,
},
[228526] = {
["encounterName"] = "Maiden of Virtue",
["source"] = "Reformed Maiden",
["encounterID"] = 1954,
["event"] = "SPELL_CAST_START",
["npcID"] = 114783,
},
[355637] = {
["encounterName"] = "The Grand Menagerie",
["source"] = "Market Peacekeeper",
["npcID"] = 179840,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2441,
},
[209587] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Helmouth Soulhunter",
["npcID"] = 105750,
},
[194231] = {
["encounterName"] = "Harbaron",
["source"] = "Harbaron",
["npcID"] = 96754,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1823,
},
[186553] = {
["source"] = "Kvaldir Soulflayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 91575,
},
[1233672] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Ilyssa Darksorrow",
["npcID"] = 237662,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3122,
},
[203957] = {
["encounterName"] = "Advisor Vandros",
["source"] = "Timeless Wraith",
["npcID"] = 103130,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1829,
},
[1217294] = {
["encounterName"] = "Coin-Operated Crowd Pummeler",
["source"] = "Coin-Operated Crowd Pummeler",
["encounterID"] = 2105,
["event"] = "SPELL_CAST_START",
["npcID"] = 129214,
},
[181947] = {
["source"] = "Vizznak",
["event"] = "SPELL_CAST_START",
["npcID"] = 97968,
},
[1221395] = {
["isChanneled"] = false,
["source"] = "Shadowguard Voidcaller",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 231588,
},
[1221396] = {
["source"] = "Shadowguard Voidcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 231588,
},
[216755] = {
["event"] = "SPELL_CAST_START",
["source"] = "Excess Power",
["npcID"] = 109009,
},
[201399] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadfire Imp",
["npcID"] = 100527,
},
[1221401] = {
["source"] = "Shadowguard Voidcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 231588,
},
[212661] = {
["source"] = "Captain Dargun",
["event"] = "SPELL_CAST_START",
["npcID"] = 109163,
},
[213685] = {
["encounterName"] = "Cordana Felsong",
["source"] = "Cordana Felsong",
["encounterID"] = 1818,
["event"] = "SPELL_CAST_START",
["npcID"] = 95888,
},
[223923] = {
["encounterName"] = "Ursoc",
["source"] = "Corrupted Totem",
["encounterID"] = 1841,
["event"] = "SPELL_CAST_START",
["npcID"] = 112474,
},
[183485] = {
["source"] = "Quartermaster Zolix",
["event"] = "SPELL_CAST_START",
["npcID"] = 108186,
},
[450854] = {
["source"] = "Deathscreamer Iken'tak",
["event"] = "SPELL_CAST_START",
["npcID"] = 211263,
},
[193211] = {
["encounterName"] = "Ymiron, the Fallen King",
["source"] = "Ymiron, the Fallen King",
["npcID"] = 96756,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1822,
},
[181438] = {
["source"] = "Flashwyrm",
["event"] = "SPELL_CAST_START",
["npcID"] = 107098,
},
[449831] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Battlefront Hauler",
["npcID"] = 222719,
},
[99693] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ancient Core Hound",
["npcID"] = 53134,
},
[1217327] = {
["encounterName"] = "Azhiccar",
["source"] = "Azhiccar",
["npcID"] = 234893,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3107,
},
[213687] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fal'dorei Broodlord",
["npcID"] = 105685,
},
[218806] = {
["encounterName"] = "High Botanist Tel'arn",
["source"] = "Solarist Tel'arn",
["encounterID"] = 1886,
["event"] = "SPELL_CAST_START",
["npcID"] = 109038,
},
[227508] = {
["encounterName"] = "Maiden of Virtue",
["source"] = "Maiden of Virtue",
["encounterID"] = 1954,
["event"] = "SPELL_CAST_START",
["npcID"] = 113971,
},
[232115] = {
["source"] = "Backup Singer",
["event"] = "SPELL_CAST_START",
["npcID"] = 116549,
},
[216759] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ael'Yith",
["npcID"] = 90267,
},
[196796] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fel-Infused Fury",
["npcID"] = 99956,
},
[218807] = {
["encounterName"] = "High Botanist Tel'arn",
["source"] = "High Botanist Tel'arn",
["encounterID"] = 1886,
["event"] = "SPELL_CAST_START",
["npcID"] = 104528,
},
[191678] = {
["event"] = "SPELL_CAST_START",
["source"] = "Viletongue Belcher",
["npcID"] = 96480,
},
[452910] = {
["source"] = "Zilthara",
["event"] = "SPELL_CAST_START",
["npcID"] = 220270,
},
[224440] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gilded Guardian",
["npcID"] = 112712,
},
[196287] = {
["encounterName"] = "Serpentrix",
["source"] = "Stormwake Hydra",
["npcID"] = 91792,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1813,
},
[196799] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fel-Infused Fury",
["npcID"] = 99956,
},
[340300] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mistveil Gorgegullet",
["npcID"] = 173720,
},
[448818] = {
["source"] = "Kobold Skullface",
["event"] = "SPELL_CAST_START",
["npcID"] = 203951,
},
[197824] = {
["source"] = "Infernal Siegebreaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 97808,
},
[265568] = {
["event"] = "SPELL_CAST_START",
["source"] = "Befouled Spirit",
["npcID"] = 133685,
},
[1217371] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Underpin",
["npcID"] = 247390,
},
[448820] = {
["source"] = "Kobold Skullface",
["event"] = "SPELL_CAST_START",
["npcID"] = 203951,
},
[192706] = {
["event"] = "SPELL_CAST_START",
["source"] = "Channeler Varisz",
["npcID"] = 100249,
},
[382277] = {
["npcID"] = 193457,
},
[181445] = {
["isChanneled"] = true,
["source"] = "The Oracle",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 89850,
},
[194242] = {
["source"] = "Crawliac Skywitch",
["event"] = "SPELL_CAST_START",
["npcID"] = 94983,
},
[227514] = {
["encounterName"] = "Guarm",
["source"] = "Guarm",
["encounterID"] = 1962,
["event"] = "SPELL_CAST_START",
["npcID"] = 114323,
},
[427323] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voidrider",
["npcID"] = 212786,
},
[196290] = {
["encounterName"] = "Serpentrix",
["source"] = "Stormwake Hydra",
["npcID"] = 91792,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1813,
},
[326997] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stoneborn Slasher",
["npcID"] = 167607,
},
[1221483] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wastelander Ritualist",
["npcID"] = 234957,
},
[1221484] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Wastelander Ritualist",
["npcID"] = 234957,
},
[200898] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Inquisitor Tormentorum",
["npcID"] = 96015,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1850,
},
[431421] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Night-Twisted Hog",
["npcID"] = 213619,
},
[174793] = {
["source"] = "Mak'rana Elder",
["event"] = "SPELL_CAST_START",
["npcID"] = 89286,
},
[212672] = {
["source"] = "Captain Dargun",
["event"] = "SPELL_CAST_START",
["npcID"] = 109163,
},
[196804] = {
["encounterName"] = "Ivanyr",
["source"] = "Ivanyr",
["npcID"] = 98203,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1827,
},
[201411] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadfire Imp",
["npcID"] = 100527,
},
[137427] = {
["source"] = "Nathanos Blightcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 95852,
},
[432448] = {
["source"] = "Nightfall Ritualist",
["event"] = "SPELL_CAST_START",
["npcID"] = 214761,
},
[209602] = {
["encounterName"] = "Advisor Melandrus",
["source"] = "Advisor Melandrus",
["npcID"] = 104218,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1870,
},
[223423] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Venomous Spiderling",
["npcID"] = 112118,
},
[224447] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Acolyte of Sael'orn",
["npcID"] = 112742,
},
[200901] = {
["event"] = "SPELL_CAST_START",
["source"] = "Solsten",
["npcID"] = 97219,
},
[317791] = {
["source"] = "Magus of the Dead",
["event"] = "SPELL_CAST_START",
["npcID"] = 163366,
},
[1237893] = {
["source"] = "Reshanor",
["event"] = "SPELL_CAST_START",
["npcID"] = 238319,
},
[215234] = {
["isChanneled"] = true,
["source"] = "Dominator Tentacle",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 105304,
},
[317792] = {
["source"] = "Magus of the Dead",
["event"] = "SPELL_CAST_START",
["npcID"] = 163366,
},
[213187] = {
["source"] = "Nightmare Tendril",
["event"] = "SPELL_CAST_START",
["npcID"] = 105823,
},
[1225616] = {
["encounterName"] = "Soulbinder Naazindhri",
["source"] = "Soulbinder Naazindhri",
["npcID"] = 233816,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3130,
},
[228032] = {
["encounterName"] = "Helya",
["source"] = "Helya",
["npcID"] = 114537,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2008,
},
[167119] = {
["source"] = "Dreadsting Lurker",
["event"] = "SPELL_CAST_START",
["npcID"] = 95951,
},
[1237905] = {
["source"] = "Reshanor",
["event"] = "SPELL_CAST_START",
["npcID"] = 238319,
},
[213188] = {
["source"] = "Kiranys Duskwhisper",
["event"] = "SPELL_CAST_START",
["npcID"] = 94414,
},
[439621] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Nx",
["npcID"] = 216648,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2908,
},
[181452] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tide Behemoth",
["npcID"] = 91114,
},
[260793] = {
["encounterName"] = "Cragmaw the Infested",
["source"] = "Cragmaw the Infested",
["encounterID"] = 2118,
["event"] = "SPELL_CAST_START",
["npcID"] = 131817,
},
[1221532] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wastelander Pactspeaker",
["npcID"] = 234955,
},
[463169] = {
["event"] = "SPELL_CAST_START",
["source"] = "Venture Co. Surveyor",
["npcID"] = 229686,
},
[100724] = {
["event"] = "SPELL_CAST_START",
["source"] = "Molten Flamefather",
["npcID"] = 54143,
},
[450885] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cinderbee Forager",
["npcID"] = 222976,
},
[444743] = {
["source"] = "Risen Mage",
["event"] = "SPELL_CAST_START",
["npcID"] = 221760,
},
[1217446] = {
["encounterName"] = "Azhiccar",
["source"] = "Azhiccar",
["npcID"] = 234893,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3107,
},
[200905] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Inquisitor Tormentorum",
["npcID"] = 96015,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1850,
},
[193227] = {
["source"] = "Vizznak",
["event"] = "SPELL_CAST_START",
["npcID"] = 97968,
},
[195787] = {
["event"] = "SPELL_CAST_START",
["source"] = "Keeper Selentia",
["npcID"] = 99524,
},
[396629] = {
["source"] = "Colossal Salamanther",
["event"] = "SPELL_CAST_START",
["npcID"] = 224622,
},
[1217456] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Disturbed Kelp",
["npcID"] = 231223,
},
[399701] = {
["source"] = "Disturbed Deepflayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 215773,
},
[1242028] = {
["source"] = "Shadowguard Sentinel Za'drin",
["event"] = "SPELL_CAST_START",
["npcID"] = 242705,
},
[15284] = {
["source"] = "Highmountain Warbrave",
["event"] = "SPELL_CAST_START",
["npcID"] = 96506,
},
[224453] = {
["event"] = "SPELL_CAST_START",
["source"] = "Acolyte of Sael'orn",
["npcID"] = 112738,
},
[445771] = {
["source"] = "Deepwater Makura",
["event"] = "SPELL_CAST_START",
["npcID"] = 220643,
},
[230084] = {
["encounterName"] = "Viz'aduum the Watcher",
["source"] = "Viz'aduum the Watcher",
["encounterID"] = 2017,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 114790,
},
[1254321] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Forgeweaver Araz",
["npcID"] = 233817,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3132,
},
[353635] = {
["encounterName"] = "So'leah",
["source"] = "So'leah",
["encounterID"] = 2442,
["event"] = "SPELL_CAST_START",
["npcID"] = 177269,
},
[195789] = {
["source"] = "Bloodtotem Warmonger",
["event"] = "SPELL_CAST_START",
["npcID"] = 97544,
},
[200908] = {
["source"] = "Howling Winds",
["event"] = "SPELL_CAST_START",
["npcID"] = 100769,
},
[132829] = {
["source"] = "Plundering Corsair",
["event"] = "SPELL_CAST_START",
["npcID"] = 108029,
},
[215241] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nightborne Scion",
["npcID"] = 99267,
},
[221384] = {
["isChanneled"] = true,
["source"] = "Second Mate Cilieth",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 108212,
},
[210635] = {
["event"] = "SPELL_CAST_START",
["source"] = "Isel the Hammer",
["npcID"] = 94413,
},
[1233863] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Velaryn Bloodwrath",
["npcID"] = 237660,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3122,
},
[223944] = {
["source"] = "Guardian Rurson",
["event"] = "SPELL_CAST_START",
["npcID"] = 111858,
},
[195791] = {
["encounterName"] = "Corstilax",
["source"] = "Corstilax",
["npcID"] = 98205,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1825,
},
[411994] = {
["isChanneled"] = true,
["source"] = "Infinite Chronoweaver",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 205384,
},
[224457] = {
["event"] = "SPELL_CAST_START",
["source"] = "Acolyte of Sael'orn",
["npcID"] = 112738,
},
[188114] = {
["encounterName"] = "Rokmora",
["source"] = "Rokmora",
["npcID"] = 91003,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1790,
},
[1217496] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bubbles",
["npcID"] = 231197,
},
[450899] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cinderbee Forager",
["npcID"] = 222976,
},
[187091] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bladesquall",
["npcID"] = 91874,
},
[224459] = {
["event"] = "SPELL_CAST_START",
["source"] = "Acolyte of Sael'orn",
["npcID"] = 112738,
},
[213198] = {
["source"] = "Eye of Keletress",
["event"] = "SPELL_CAST_START",
["npcID"] = 105257,
},
[193235] = {
["encounterName"] = "Hymdall",
["source"] = "Hymdall",
["npcID"] = 94960,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1805,
},
[99705] = {
["event"] = "SPELL_CAST_START",
["source"] = "Druid of the Flame",
["npcID"] = 53619,
},
[224460] = {
["event"] = "SPELL_CAST_START",
["source"] = "Venomhide Shadowspinner",
["npcID"] = 112733,
},
[376170] = {
["encounterName"] = "Decatriarch Wratheye",
["npcID"] = 186121,
["encounterID"] = 2569,
},
[322936] = {
["encounterName"] = "Halkias, the Sin-Stained Goliath",
["source"] = "Halkias",
["npcID"] = 165408,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2401,
},
[211152] = {
["encounterName"] = "Gul'dan",
["source"] = "Gul'dan",
["encounterID"] = 1866,
["event"] = "SPELL_CAST_START",
["npcID"] = 104154,
},
[427359] = {
["isChanneled"] = true,
["source"] = "Arathi Footman",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206705,
},
[169179] = {
["encounterName"] = "Yalnu",
["source"] = "Yalnu",
["encounterID"] = 1756,
["event"] = "SPELL_CAST_START",
["npcID"] = 83846,
},
[224974] = {
["source"] = "Abyss Watcher",
["event"] = "SPELL_CAST_START",
["npcID"] = 113043,
},
[425315] = {
["encounterName"] = "Shroomspew",
["source"] = "Shroomsprew",
["npcID"] = 237481,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3139,
},
[207059] = {
["source"] = "Hatecoil Harpooner",
["event"] = "SPELL_CAST_START",
["npcID"] = 107447,
},
[183001] = {
["event"] = "SPELL_CAST_START",
["source"] = "Queen Kraklaa",
["npcID"] = 89287,
},
[384366] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ashwhite Kestrel",
["npcID"] = 215070,
},
[230094] = {
["source"] = "Abstract Nullifier",
["event"] = "SPELL_CAST_START",
["npcID"] = 115765,
},
[181466] = {
["source"] = "Spectral Student",
["event"] = "SPELL_CAST_START",
["npcID"] = 91431,
},
[223440] = {
["source"] = "Gravax the Desecrator",
["event"] = "SPELL_CAST_START",
["npcID"] = 92802,
},
[199382] = {
["encounterName"] = "Fenryr",
["source"] = "Arthfael",
["encounterID"] = 1807,
["event"] = "SPELL_CAST_START",
["npcID"] = 99802,
},
[228559] = {
["encounterName"] = "Maiden of Virtue",
["source"] = "Virtuous Gentleman",
["encounterID"] = 1954,
["event"] = "SPELL_CAST_START",
["npcID"] = 183424,
},
[322943] = {
["encounterName"] = "Halkias, the Sin-Stained Goliath",
["source"] = "Halkias",
["npcID"] = 165408,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2401,
},
[35913] = {
["event"] = "SPELL_CAST_START",
["source"] = "Runebound Wretch",
["npcID"] = 97906,
},
[451936] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ascended Webfriar",
["npcID"] = 219022,
},
[207573] = {
["encounterName"] = "Dragons of Nightmare",
["source"] = "Ysondre",
["encounterID"] = 1854,
["event"] = "SPELL_CAST_START",
["npcID"] = 102679,
},
[224465] = {
["event"] = "SPELL_CAST_START",
["source"] = "Venomhide Shadowspinner",
["npcID"] = 112733,
},
[377204] = {
["encounterName"] = "Warlord Sargha",
["npcID"] = 189901,
["encounterID"] = 2611,
},
[412012] = {
["isChanneled"] = true,
["source"] = "Infinite Timeslicer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 205408,
},
[210645] = {
["event"] = "SPELL_CAST_START",
["source"] = "Withered Fiend",
["npcID"] = 98733,
},
[1242133] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Velaryn Bloodwrath",
["npcID"] = 237660,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3122,
},
[195801] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Skrog Tidestomper",
["npcID"] = 95939,
},
[372087] = {
["npcID"] = 187897,
},
[221395] = {
["event"] = "SPELL_CAST_START",
["source"] = "Anax",
["npcID"] = 111197,
},
[194266] = {
["encounterName"] = "Harbaron",
["source"] = "Shackled Servitor",
["npcID"] = 98693,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1823,
},
[183005] = {
["source"] = "Black Rose Apothecary",
["event"] = "SPELL_CAST_START",
["npcID"] = 93496,
},
[1242143] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ashwhite Kestrel",
["npcID"] = 246874,
},
[222932] = {
["source"] = "Dreadsoul Defiler",
["event"] = "SPELL_CAST_START",
["npcID"] = 112260,
},
[207064] = {
["source"] = "Hatecoil Harpooner",
["event"] = "SPELL_CAST_START",
["npcID"] = 107447,
},
[219861] = {
["source"] = "Na'zak the Fiend",
["event"] = "SPELL_CAST_START",
["npcID"] = 110321,
},
[213207] = {
["source"] = "Waking Nightmare",
["event"] = "SPELL_CAST_START",
["npcID"] = 105973,
},
[1217589] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sporbit",
["npcID"] = 237337,
},
[118905] = {
["source"] = "Capacitor Totem",
["event"] = "SPELL_CAST_START",
["npcID"] = 61245,
},
[1213497] = {
["source"] = "Recruitment Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 225827,
},
[195293] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skjal",
["npcID"] = 99307,
},
[228565] = {
["encounterName"] = "Helya",
["source"] = "Helya",
["encounterID"] = 2008,
["event"] = "SPELL_CAST_START",
["npcID"] = 114537,
},
[396665] = {
["source"] = "Magmas",
["event"] = "SPELL_CAST_START",
["npcID"] = 199027,
},
[181473] = {
["source"] = "Weeping Banshee",
["event"] = "SPELL_CAST_START",
["npcID"] = 91430,
},
[227542] = {
["encounterName"] = "Moroes",
["source"] = "Lady Catriona Von'Indi",
["encounterID"] = 1961,
["event"] = "SPELL_CAST_START",
["npcID"] = 114317,
},
[199389] = {
["encounterName"] = "Dresaron",
["source"] = "Dresaron",
["npcID"] = 99200,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1838,
},
[429427] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cursedforge Stoneshaper",
["npcID"] = 214066,
},
[104318] = {
["source"] = "Wild Imp",
["event"] = "SPELL_CAST_START",
["npcID"] = 55659,
},
[88194] = {
["source"] = "Young Storm Dragon",
["event"] = "SPELL_CAST_START",
["npcID"] = 45919,
},
[209628] = {
["encounterName"] = "Advisor Melandrus",
["source"] = "Advisor Melandrus",
["npcID"] = 104218,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1870,
},
[1233997] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Arcane Manifestation",
["npcID"] = 240905,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3132,
},
[202462] = {
["encounterName"] = "Sael'orn",
["source"] = "Sael'orn",
["npcID"] = 102387,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1851,
},
[202974] = {
["encounterName"] = "Advisor Vandros",
["source"] = "Advisor Vandros",
["npcID"] = 98208,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1829,
},
[228056] = {
["encounterName"] = "Helya",
["source"] = "Helya",
["encounterID"] = 2008,
["event"] = "SPELL_CAST_START",
["npcID"] = 114537,
},
[329104] = {
["encounterName"] = "Lord Chamberlain",
["source"] = "Lord Chamberlain",
["npcID"] = 164218,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2381,
},
[218843] = {
["source"] = "Magister Phaedris",
["event"] = "SPELL_CAST_START",
["npcID"] = 109954,
},
[464240] = {
["source"] = "High Priest Aemya",
["event"] = "SPELL_CAST_START",
["npcID"] = 212827,
},
[1234009] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Forge Sentinel",
["npcID"] = 237132,
},
[452980] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aggregation of Horrors",
["npcID"] = 220999,
},
[222939] = {
["source"] = "Dreadsoul Defiler",
["event"] = "SPELL_CAST_START",
["npcID"] = 112260,
},
[232153] = {
["encounterName"] = "Opera Hall",
["source"] = "Coggleston",
["encounterID"] = 1957,
["event"] = "SPELL_CAST_START",
["npcID"] = 114328,
},
[217821] = {
["source"] = "Elya Azuremoon",
["event"] = "SPELL_CAST_START",
["npcID"] = 88859,
},
[202977] = {
["encounterName"] = "Nythendra",
["source"] = "Nythendra",
["npcID"] = 102672,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1853,
},
[448888] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["encounterID"] = 2839,
["event"] = "SPELL_CAST_START",
["npcID"] = 213937,
},
[372107] = {
["encounterName"] = "Kokia Blazehoof",
["encounterID"] = 2606,
["npcID"] = 189232,
},
[189157] = {
["source"] = "Theryssia",
["event"] = "SPELL_CAST_START",
["npcID"] = 92423,
},
[1217653] = {
["encounterName"] = "Demolition Duo",
["source"] = "Keeza Quickfuse",
["npcID"] = 226403,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3019,
},
[445819] = {
["source"] = "Rampaging Deepflayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 218657,
},
[411012] = {
["event"] = "SPELL_CAST_START",
["source"] = "Young Storm Dragon",
["npcID"] = 45919,
},
[329113] = {
["encounterName"] = "Lord Chamberlain",
["source"] = "Lord Chamberlain",
["npcID"] = 164218,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2381,
},
[195813] = {
["source"] = "Feltotem Warmonger",
["event"] = "SPELL_CAST_START",
["npcID"] = 100054,
},
[216800] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thistleleaf Menace",
["npcID"] = 91472,
},
[1234044] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Dimensius",
["npcID"] = 233824,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3135,
},
[9591] = {
["source"] = "Burrowing Leyworm",
["event"] = "SPELL_CAST_START",
["npcID"] = 106630,
},
[348566] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Brawling Patron",
["npcID"] = 176562,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2440,
},
[196838] = {
["encounterName"] = "Fenryr",
["source"] = "Fenryr",
["npcID"] = 99868,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1807,
},
[460156] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Big M.O.M.M.A.",
["npcID"] = 226398,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3020,
},
[128124] = {
["source"] = "Dreadbog",
["event"] = "SPELL_CAST_START",
["npcID"] = 97517,
},
[212195] = {
["source"] = "Athissa",
["event"] = "SPELL_CAST_START",
["npcID"] = 88855,
},
[204517] = {
["event"] = "SPELL_CAST_START",
["source"] = "Portal Guardian",
["npcID"] = 102335,
},
[431494] = {
["source"] = "Nightfall Tactician",
["event"] = "SPELL_CAST_START",
["npcID"] = 213934,
},
[1242259] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Ilyssa Darksorrow",
["npcID"] = 237662,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3122,
},
[198376] = {
["encounterName"] = "Archdruid Glaidalis",
["source"] = "Archdruid Glaidalis",
["npcID"] = 96512,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1836,
},
[198888] = {
["event"] = "SPELL_CAST_START",
["source"] = "Storm Drake",
["npcID"] = 97068,
},
[183020] = {
["event"] = "SPELL_CAST_START",
["source"] = "Oublion",
["npcID"] = 89350,
},
[432520] = {
["source"] = "Nightfall Darkcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 213893,
},
[471423] = {
["source"] = "Darkfuse Harasser",
["event"] = "SPELL_CAST_START",
["npcID"] = 225853,
},
[210150] = {
["encounterName"] = "Naraxas",
["source"] = "Naraxas",
["npcID"] = 91005,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1792,
},
[445830] = {
["source"] = "Rampaging Deepflayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 218657,
},
[351646] = {
["encounterName"] = "So'leah",
["source"] = "So'leah",
["encounterID"] = 2442,
["event"] = "SPELL_CAST_START",
["npcID"] = 177269,
},
[221412] = {
["event"] = "SPELL_CAST_START",
["source"] = "Anax",
["npcID"] = 111197,
},
[202473] = {
["encounterName"] = "Sael'orn",
["source"] = "Sael'orn",
["npcID"] = 102387,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1851,
},
[466308] = {
["source"] = "Guarding Junktooth",
["event"] = "SPELL_CAST_START",
["npcID"] = 225789,
},
[198379] = {
["encounterName"] = "Archdruid Glaidalis",
["source"] = "Archdruid Glaidalis",
["npcID"] = 96512,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1836,
},
[472452] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Darkfuse Mechadrone",
["npcID"] = 228424,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3020,
},
[199915] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Faceless Voidcaster",
["npcID"] = 99651,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1850,
},
[213224] = {
["source"] = "Waking Nightmare",
["event"] = "SPELL_CAST_START",
["npcID"] = 105973,
},
[462216] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Flamerender",
["npcID"] = 224240,
},
[198892] = {
["event"] = "SPELL_CAST_START",
["source"] = "Storm Drake",
["npcID"] = 97068,
},
[472454] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Darkfuse Mechadrone",
["npcID"] = 228424,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3020,
},
[212201] = {
["source"] = "Athissa",
["event"] = "SPELL_CAST_START",
["npcID"] = 88855,
},
[200429] = {
["source"] = "Lagoon Basilisk",
["event"] = "SPELL_CAST_START",
["npcID"] = 91128,
},
[1213641] = {
["source"] = "Recruitment Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 225827,
},
[98951] = {
["encounterName"] = "Ragnaros",
["source"] = "Ragnaros",
["encounterID"] = 1203,
["event"] = "SPELL_CAST_START",
["npcID"] = 52409,
},
[124289] = {
["source"] = "Sister Might",
["event"] = "SPELL_CAST_START",
["npcID"] = 113779,
},
[224488] = {
["source"] = "Nobleborn Warpcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 112676,
},
[205549] = {
["encounterName"] = "Naraxas",
["source"] = "Naraxas",
["npcID"] = 91005,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1792,
},
[321968] = {
["source"] = "Tirnenn Villager",
["event"] = "SPELL_CAST_START",
["npcID"] = 164929,
},
[369061] = {
["encounterName"] = "Emberon",
["npcID"] = 184422,
["encounterID"] = 2558,
},
[183539] = {
["encounterName"] = "Naraxas",
["source"] = "Rotdrool Grabber",
["npcID"] = 91002,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1792,
},
[1213656] = {
["source"] = "Drill Sergeant",
["event"] = "SPELL_CAST_START",
["npcID"] = 231925,
},
[353706] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Disruptive Patron",
["npcID"] = 176565,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2440,
},
[98952] = {
["encounterName"] = "Ragnaros",
["source"] = "Ragnaros",
["encounterID"] = 1203,
["event"] = "SPELL_CAST_START",
["npcID"] = 52409,
},
[186612] = {
["source"] = "Mortiferous",
["event"] = "SPELL_CAST_START",
["npcID"] = 93622,
},
[421277] = {
["encounterName"] = "The Candle King",
["source"] = "The Candle King",
["encounterID"] = 2787,
["event"] = "SPELL_CAST_START",
["npcID"] = 208745,
},
[217325] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lochaber",
["npcID"] = 108663,
},
[213742] = {
["source"] = "Golza the Iron Fin",
["event"] = "SPELL_CAST_START",
["npcID"] = 89816,
},
[191732] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greater Lightning Elemental",
["npcID"] = 97022,
},
[1225966] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Shadowguard Technomancer",
["npcID"] = 237132,
},
[434589] = {
["source"] = "Overfiend",
["event"] = "SPELL_CAST_START",
["npcID"] = 217429,
},
[187126] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bladesquall",
["npcID"] = 91874,
},
[1242355] = {
["source"] = "Infernal Inquisitor",
["event"] = "SPELL_CAST_START",
["npcID"] = 247018,
},
[161533] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hulking Gnarlvine",
["npcID"] = 92332,
},
[197365] = {
["encounterName"] = "Wrath of Azshara",
["source"] = "Wrath of Azshara",
["npcID"] = 96028,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1814,
},
[191735] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felsworn Myrmidon",
["npcID"] = 98954,
},
[1230087] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Dimensius",
["npcID"] = 241517,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3135,
},
[328125] = {
["encounterName"] = "Echelon",
["source"] = "Undying Stonefiend",
["npcID"] = 164363,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2380,
},
[214771] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Faceless Voidcaster",
["npcID"] = 99651,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1850,
},
[195320] = {
["source"] = "Drogbar Manathirster",
["event"] = "SPELL_CAST_START",
["npcID"] = 95866,
},
[188154] = {
["event"] = "SPELL_CAST_START",
["source"] = "Azariah",
["npcID"] = 91737,
},
[181500] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nightfallen Hungerer",
["npcID"] = 109826,
},
[198904] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rotheart Dryad",
["npcID"] = 99358,
},
[1242390] = {
["source"] = "Infernal Jailer",
["event"] = "SPELL_CAST_START",
["npcID"] = 247031,
},
[183548] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stoneclaw Grubmaster",
["npcID"] = 102404,
},
[196345] = {
["source"] = "Deeprock Scrapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 98003,
},
[319941] = {
["encounterName"] = "Echelon",
["source"] = "Echelon",
["npcID"] = 164185,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2380,
},
[212726] = {
["encounterName"] = "Cenarius",
["source"] = "Cenarius",
["encounterID"] = 1877,
["event"] = "SPELL_CAST_START",
["npcID"] = 104636,
},
[213238] = {
["encounterName"] = "Tichondrius",
["source"] = "Tichondrius",
["encounterID"] = 1862,
["event"] = "SPELL_CAST_START",
["npcID"] = 103685,
},
[1226024] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-King Salhadaar",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 237763,
},
[215286] = {
["source"] = "Hartli the Snatcher",
["event"] = "SPELL_CAST_START",
["npcID"] = 97326,
},
[449960] = {
["event"] = "SPELL_CAST_START",
["source"] = "Murkfin Ravager",
["npcID"] = 213621,
},
[213239] = {
["source"] = "Storm Cloud",
["event"] = "SPELL_CAST_START",
["npcID"] = 100824,
},
[227573] = {
["encounterName"] = "Guarm",
["source"] = "Guarm",
["encounterID"] = 1962,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 114323,
},
[181505] = {
["event"] = "SPELL_CAST_START",
["source"] = "Withered Fanatic",
["npcID"] = 90318,
},
[449965] = {
["event"] = "SPELL_CAST_START",
["source"] = "Witherthorn",
["npcID"] = 214790,
},
[452013] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tempest Wolf",
["npcID"] = 222797,
},
[204028] = {
["event"] = "SPELL_CAST_START",
["source"] = "Portal Guardian",
["npcID"] = 102337,
},
[181506] = {
["event"] = "SPELL_CAST_START",
["source"] = "Withered Exile",
["npcID"] = 90379,
},
[1254722] = {
["encounterName"] = "Dargrul the Underking",
["source"] = "Infinite Slayer",
["encounterID"] = 1793,
["event"] = "SPELL_CAST_START",
["npcID"] = 249021,
},
[124297] = {
["source"] = "Sister Might",
["event"] = "SPELL_CAST_START",
["npcID"] = 113779,
},
[220409] = {
["event"] = "SPELL_CAST_START",
["source"] = "Jorvild the Trusted",
["npcID"] = 115732,
},
[188673] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ironbranch",
["npcID"] = 93030,
},
[447921] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lambent Siltworm",
["npcID"] = 217556,
},
[432565] = {
["source"] = "Manifested Shadow",
["event"] = "SPELL_CAST_START",
["npcID"] = 211341,
},
[210684] = {
["event"] = "SPELL_CAST_START",
["source"] = "Withered Manawraith",
["npcID"] = 105952,
},
[1246541] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Nullbinder",
["npcID"] = 248589,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3135,
},
[201983] = {
["event"] = "SPELL_CAST_START",
["source"] = "Emberhusk Dominator",
["npcID"] = 113537,
},
[1234263] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Dimensius",
["npcID"] = 233824,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3135,
},
[200960] = {
["isChanneled"] = true,
["source"] = "Scion of Typhinius",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 100647,
},
[189187] = {
["source"] = "Darkshade",
["event"] = "SPELL_CAST_START",
["npcID"] = 92965,
},
[356812] = {
["event"] = "SPELL_CAST_START",
["source"] = "Leader Xy'viler",
["npcID"] = 180286,
},
[208639] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Nameless King",
["npcID"] = 92763,
},
[1213803] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Venture Co. Architect",
["npcID"] = 229251,
},
[1242469] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pactsworn Sandreaver",
["npcID"] = 244410,
},
[1213805] = {
["event"] = "SPELL_CAST_START",
["source"] = "Venture Co. Architect",
["npcID"] = 229251,
},
[187653] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skola Greatsword",
["npcID"] = 104756,
},
[212735] = {
["encounterName"] = "Spellblade Aluriel",
["source"] = "Spellblade Aluriel",
["encounterID"] = 1871,
["event"] = "SPELL_CAST_START",
["npcID"] = 104881,
},
[431549] = {
["source"] = "Sazh'kel",
["event"] = "SPELL_CAST_START",
["npcID"] = 221166,
},
[445882] = {
["event"] = "SPELL_CAST_START",
["source"] = "Night-Twisted Hog",
["npcID"] = 215206,
},
[210177] = {
["event"] = "SPELL_CAST_START",
["source"] = "Isel the Hammer",
["npcID"] = 94413,
},
[431552] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Webspinner",
["npcID"] = 224149,
},
[224510] = {
["source"] = "Duskwatch Battle-Magus",
["event"] = "SPELL_CAST_START",
["npcID"] = 112671,
},
[196357] = {
["encounterName"] = "Ivanyr",
["source"] = "Ivanyr",
["npcID"] = 98203,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1827,
},
[217344] = {
["event"] = "SPELL_CAST_START",
["source"] = "Levantus",
["npcID"] = 108829,
},
[1226111] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ravenous Destroyer",
["npcID"] = 236995,
},
[198405] = {
["event"] = "SPELL_CAST_START",
["source"] = "Helarjar Champion",
["npcID"] = 97097,
},
[215297] = {
["source"] = "Vilewing Ambusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 97591,
},
[187144] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bladesquall",
["npcID"] = 91874,
},
[187656] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skola Greatsword",
["npcID"] = 104756,
},
[196870] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Stormweaver",
["npcID"] = 91783,
},
[217857] = {
["event"] = "SPELL_CAST_START",
["source"] = "Runeseer Sigvid",
["npcID"] = 109318,
},
[188169] = {
["encounterName"] = "Rokmora",
["source"] = "Rokmora",
["npcID"] = 91003,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1790,
},
[217858] = {
["event"] = "SPELL_CAST_START",
["source"] = "Runeseer Sigvid",
["npcID"] = 109318,
},
[375251] = {
["encounterName"] = "Magmatusk",
["npcID"] = 181861,
["encounterID"] = 2610,
},
[198407] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skeletal Sorcerer",
["npcID"] = 114289,
},
[212740] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gorebeak",
["npcID"] = 92117,
},
[473533] = {
["source"] = "Obedient-ish Predator",
["event"] = "SPELL_CAST_START",
["npcID"] = 231930,
},
[1213852] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Underpin",
["npcID"] = 247390,
},
[1234328] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Arcane Collector",
["npcID"] = 240905,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3132,
},
[228609] = {
["source"] = "Ancient Bonethrall",
["event"] = "SPELL_CAST_START",
["npcID"] = 114547,
},
[1242521] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pactsworn Wildcaller",
["npcID"] = 244418,
},
[186636] = {
["source"] = "Mrrgrl the Tide Reaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 89865,
},
[224515] = {
["source"] = "Nobleborn Warpcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 112676,
},
[200969] = {
["event"] = "SPELL_CAST_START",
["source"] = "King Tor",
["npcID"] = 97084,
},
[349663] = {
["encounterName"] = "The Grand Menagerie",
["source"] = "Alcruux",
["npcID"] = 176556,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2441,
},
[473537] = {
["source"] = "Punchy Thug",
["event"] = "SPELL_CAST_START",
["npcID"] = 231904,
},
[218885] = {
["event"] = "SPELL_CAST_START",
["source"] = "Immolian",
["npcID"] = 109630,
},
[1242534] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pactsworn Wildcaller",
["npcID"] = 244418,
},
[189709] = {
["source"] = "Lieutenant Desdel Stareye",
["event"] = "SPELL_CAST_START",
["npcID"] = 93031,
},
[158485] = {
["source"] = "Hartli the Snatcher",
["event"] = "SPELL_CAST_START",
["npcID"] = 97326,
},
[220422] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tideclaw",
["npcID"] = 110824,
},
[192269] = {
["source"] = "Wrath of Dargrul",
["event"] = "SPELL_CAST_START",
["npcID"] = 97266,
},
[98710] = {
["encounterName"] = "Ragnaros",
["source"] = "Ragnaros",
["encounterID"] = 1203,
["event"] = "SPELL_CAST_START",
["npcID"] = 52409,
},
[473541] = {
["source"] = "Punchy Thug",
["event"] = "SPELL_CAST_START",
["npcID"] = 231904,
},
[1230263] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-Prince Xevvos",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 241798,
},
[186639] = {
["source"] = "Mrrgrl the Tide Reaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 89865,
},
[456138] = {
["source"] = "Dustback Burrower",
["event"] = "SPELL_CAST_START",
["npcID"] = 230293,
},
[265721] = {
["source"] = "Terrorachna",
["event"] = "SPELL_CAST_START",
["npcID"] = 200349,
},
[218888] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ana-Mouz",
["npcID"] = 109943,
},
[183569] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fallen Moonfeather",
["npcID"] = 98242,
},
[189200] = {
["source"] = "Starlys Strongbow",
["event"] = "SPELL_CAST_START",
["npcID"] = 92963,
},
[222472] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tidal Elemental",
["npcID"] = 111411,
},
[219913] = {
["source"] = "Violent Crageater",
["event"] = "SPELL_CAST_START",
["npcID"] = 95916,
},
[209676] = {
["encounterName"] = "Advisor Melandrus",
["source"] = "Advisor Melandrus",
["encounterID"] = 1870,
["event"] = "SPELL_CAST_START",
["npcID"] = 104218,
},
[222473] = {
["source"] = "Darkfire Felwing",
["event"] = "SPELL_CAST_START",
["npcID"] = 111508,
},
[227592] = {
["encounterName"] = "Shade of Medivh",
["source"] = "Shade of Medivh",
["encounterID"] = 1965,
["event"] = "SPELL_CAST_START",
["npcID"] = 114350,
},
[333294] = {
["source"] = "Nefarious Darkspeaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 169893,
},
[220426] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tideclaw",
["npcID"] = 110824,
},
[216843] = {
["source"] = "Blerg",
["event"] = "SPELL_CAST_START",
["npcID"] = 106629,
},
[451026] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["event"] = "SPELL_CAST_START",
["npcID"] = 211087,
},
[99736] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ancient Core Hound",
["npcID"] = 53134,
},
[473550] = {
["source"] = "Aerial Support Bot",
["event"] = "SPELL_CAST_START",
["npcID"] = 231906,
},
[437719] = {
["source"] = "Primalist Galesinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 190373,
},
[356843] = {
["source"] = "Hourglass Tidesage",
["event"] = "SPELL_CAST_START",
["npcID"] = 179388,
},
[456147] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bandtail Kestrel",
["npcID"] = 220300,
},
[1230302] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Manaforged Titan",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 241800,
},
[445910] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sporbit",
["npcID"] = 237337,
},
[162074] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodtotem Flameheart",
["npcID"] = 108309,
},
[1242590] = {
["isChanneled"] = true,
["source"] = "Malek'ta",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 245997,
},
[372201] = {
["npcID"] = 189464,
},
[456149] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Perchfather",
["npcID"] = 221648,
},
[222476] = {
["source"] = "Ocean Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 102066,
},
[194835] = {
["isChanneled"] = true,
["source"] = "Varethos",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 92989,
},
[424414] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["encounterID"] = 2847,
["event"] = "SPELL_CAST_START",
["npcID"] = 207946,
},
[196883] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lord Etheldrin Ravencrest",
["npcID"] = 98521,
},
[222477] = {
["source"] = "Restless Warlord",
["event"] = "SPELL_CAST_START",
["npcID"] = 111338,
},
[1242605] = {
["source"] = "Darkmaw Frenzy",
["event"] = "SPELL_CAST_START",
["npcID"] = 247162,
},
[216847] = {
["source"] = "Blerg",
["event"] = "SPELL_CAST_START",
["npcID"] = 106629,
},
[194325] = {
["encounterName"] = "Harbaron",
["source"] = "Harbaron",
["npcID"] = 96754,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1823,
},
[211217] = {
["encounterName"] = "Ivanyr",
["source"] = "Arcane Anomaly",
["npcID"] = 98756,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1827,
},
[196885] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skjal",
["npcID"] = 99307,
},
[213777] = {
["source"] = "Infernal Lord",
["event"] = "SPELL_CAST_START",
["npcID"] = 90803,
},
[424419] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["encounterID"] = 2847,
["event"] = "SPELL_CAST_START",
["npcID"] = 207946,
},
[214801] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Blood-Crazed Swashbuckler",
["npcID"] = 108030,
},
[203028] = {
["encounterName"] = "Dragons of Nightmare",
["source"] = "Ysondre",
["encounterID"] = 1854,
["event"] = "SPELL_CAST_START",
["npcID"] = 102679,
},
[195350] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mightstone Savage",
["npcID"] = 108283,
},
[220944] = {
["event"] = "SPELL_CAST_START",
["source"] = "Legion Battlematron",
["npcID"] = 111557,
},
[185113] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thistleleaf Menace",
["npcID"] = 91472,
},
[424421] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Taener Duelmal",
["encounterID"] = 2847,
["event"] = "SPELL_CAST_START",
["npcID"] = 211289,
},
[355830] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cartel Skulker",
["npcID"] = 179893,
},
[198934] = {
["event"] = "SPELL_CAST_START",
["source"] = "Valarjar Mystic",
["npcID"] = 95834,
},
[353783] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Disruptive Patron",
["npcID"] = 176565,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2440,
},
[257288] = {
["encounterName"] = "Chopper Redhook",
["source"] = "Irontide Cleaver",
["npcID"] = 129879,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2098,
},
[424423] = {
["source"] = "Sergeant Shaynemail",
["event"] = "SPELL_CAST_START",
["npcID"] = 239836,
},
[215315] = {
["source"] = "Vilewing Ambusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 97591,
},
[213780] = {
["source"] = "Infernal Lord",
["event"] = "SPELL_CAST_START",
["npcID"] = 90803,
},
[1242644] = {
["source"] = "Malek'ta",
["event"] = "SPELL_CAST_START",
["npcID"] = 245997,
},
[232208] = {
["source"] = "Duskwatch Punisher",
["event"] = "SPELL_CAST_START",
["npcID"] = 115806,
},
[228625] = {
["source"] = "Wholesome Hostess",
["event"] = "SPELL_CAST_START",
["npcID"] = 114796,
},
[225042] = {
["encounterName"] = "Ursoc",
["source"] = "Corrupted Feeler",
["encounterID"] = 1841,
["event"] = "SPELL_CAST_START",
["npcID"] = 113088,
},
[451044] = {
["source"] = "Gargantuan Honeyslime",
["event"] = "SPELL_CAST_START",
["npcID"] = 222960,
},
[220436] = {
["event"] = "SPELL_CAST_START",
["source"] = "Jorvild the Trusted",
["npcID"] = 115732,
},
[225043] = {
["source"] = "Terrace Grove-Tender",
["event"] = "SPELL_CAST_START",
["npcID"] = 112603,
},
[1226277] = {
["event"] = "SPELL_CAST_START",
["source"] = "Netherfang Soulbarker",
["npcID"] = 234051,
},
[424429] = {
["source"] = "Ardent Paladin",
["event"] = "SPELL_CAST_START",
["npcID"] = 206704,
},
[269843] = {
["encounterName"] = "Unbound Abomination",
["source"] = "Unbound Abomination",
["encounterID"] = 2123,
["event"] = "SPELL_CAST_START",
["npcID"] = 133007,
},
[1250853] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nether Phantom",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 250215,
},
[205081] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wrathlord Bulwark",
["npcID"] = 102397,
},
[213783] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fal'dorei Conjurer",
["npcID"] = 105785,
},
[424431] = {
["source"] = "Elaena Emberlanz",
["event"] = "SPELL_CAST_START",
["npcID"] = 239833,
},
[222997] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowfeather",
["npcID"] = 111975,
},
[1218103] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Velaryn Bloodwrath",
["npcID"] = 237660,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3122,
},
[185119] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felsworn Noble",
["npcID"] = 111730,
},
[469478] = {
["encounterName"] = "Swampface",
["source"] = "Swampface",
["npcID"] = 226396,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3053,
},
[372222] = {
["encounterName"] = "Azureblade",
["npcID"] = 186739,
["encounterID"] = 2585,
},
[372223] = {
["npcID"] = 189265,
},
[418292] = {
["event"] = "SPELL_CAST_START",
["source"] = "Treasure Wraith",
["npcID"] = 208728,
},
[1226302] = {
["event"] = "SPELL_CAST_START",
["source"] = "Netherfang Soulbarker",
["npcID"] = 234051,
},
[222487] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felsworn Defiler",
["npcID"] = 111929,
},
[222999] = {
["source"] = "Shadowfeather",
["event"] = "SPELL_CAST_START",
["npcID"] = 111975,
},
[223511] = {
["isChanneled"] = true,
["source"] = "Putrid Sludge",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 112251,
},
[38618] = {
["event"] = "SPELL_CAST_START",
["source"] = "Degren",
["npcID"] = 111651,
},
[372225] = {
["npcID"] = 189467,
},
[221464] = {
["source"] = "Chaos Mage Beleron",
["event"] = "SPELL_CAST_START",
["npcID"] = 111225,
},
[418295] = {
["event"] = "SPELL_CAST_START",
["source"] = "Treasure Wraith",
["npcID"] = 208728,
},
[192288] = {
["event"] = "SPELL_CAST_START",
["source"] = "Olmyr the Enlightened",
["npcID"] = 97202,
},
[385536] = {
["isChanneled"] = true,
["source"] = "Primalist Flamedancer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 190206,
},
[473579] = {
["source"] = "Aerial Support Bot",
["event"] = "SPELL_CAST_START",
["npcID"] = 231906,
},
[418297] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Treasure Wraith",
["npcID"] = 208728,
},
[444915] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Kobyss Trickster",
["npcID"] = 214343,
},
[204574] = {
["encounterName"] = "Oakheart",
["source"] = "Oakheart",
["npcID"] = 103344,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1837,
},
[202527] = {
["isChanneled"] = true,
["source"] = "Torturer of the Inquisition",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 109394,
},
[198944] = {
["event"] = "SPELL_CAST_START",
["source"] = "Valarjar Shieldmaiden",
["npcID"] = 95832,
},
[228633] = {
["encounterName"] = "Helya",
["source"] = "Night Watch Mariner",
["encounterID"] = 2008,
["event"] = "SPELL_CAST_START",
["npcID"] = 114809,
},
[225562] = {
["source"] = "Bloodtainted Burster",
["event"] = "SPELL_CAST_START",
["npcID"] = 100532,
},
[193826] = {
["encounterName"] = "God-King Skovald",
["source"] = "God-King Skovald",
["npcID"] = 95675,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1808,
},
[199457] = {
["encounterName"] = "Harbaron",
["source"] = "Harbaron",
["npcID"] = 96754,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1823,
},
[1234529] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "The Royal Voidwing",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 233823,
},
[205088] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Blazing Infernal",
["npcID"] = 102398,
},
[140592] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tideskorn Huntress",
["npcID"] = 100446,
},
[1234534] = {
["source"] = "Riftbreaker Tza'akir",
["event"] = "SPELL_CAST_START",
["npcID"] = 241383,
},
[183078] = {
["isChanneled"] = true,
["source"] = "Forsaken Deathstalker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 92224,
},
[220957] = {
["encounterName"] = "Gul'dan",
["source"] = "The Demon Within",
["event"] = "SPELL_CAST_START",
["npcID"] = 111022,
},
[213279] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felguard Invader",
["npcID"] = 104758,
},
[211744] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wrathguard Felblade",
["npcID"] = 98770,
},
[433662] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Reinforced Drone",
["npcID"] = 216856,
},
[205090] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazing Infernal",
["npcID"] = 102398,
},
[197924] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deathcaller Mystic",
["npcID"] = 111393,
},
[100002] = {
["encounterName"] = "Shannox",
["source"] = "Shannox",
["npcID"] = 53691,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1205,
},
[384524] = {
["encounterName"] = "Watcher Irideus",
["npcID"] = 189719,
["encounterID"] = 2615,
},
[1226366] = {
["encounterName"] = "Loom'ithar",
["source"] = "Loom'ithar",
["npcID"] = 233815,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3131,
},
[212258] = {
["encounterName"] = "Gul'dan",
["source"] = "Gul'dan",
["encounterID"] = 1866,
["event"] = "SPELL_CAST_START",
["npcID"] = 104154,
},
[1234565] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Adarus Duskblaze",
["npcID"] = 237661,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3122,
},
[396812] = {
["npcID"] = 196576,
},
[1242757] = {
["event"] = "SPELL_CAST_START",
["source"] = "Heka'tamos",
["npcID"] = 245998,
},
[229151] = {
["encounterName"] = "Viz'aduum the Watcher",
["source"] = "Viz'aduum the Watcher",
["encounterID"] = 2017,
["event"] = "SPELL_CAST_START",
["npcID"] = 114790,
},
[205093] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Infiltrator Assassin",
["npcID"] = 102395,
},
[227616] = {
["encounterName"] = "Moroes",
["source"] = "Lady Keira Berrybuck",
["encounterID"] = 1961,
["event"] = "SPELL_CAST_START",
["npcID"] = 114319,
},
[448002] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tempest Wolf",
["npcID"] = 222797,
},
[208165] = {
["encounterName"] = "Talixae Flamewreath",
["source"] = "Talixae Flamewreath",
["npcID"] = 104217,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1869,
},
[196392] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ivanyr",
["npcID"] = 98203,
},
[1242770] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Pactsworn Fraycaller",
["npcID"] = 244413,
},
[99236] = {
["encounterName"] = "Ragnaros",
["source"] = "Ragnaros",
["encounterID"] = 1203,
["event"] = "SPELL_CAST_START",
["npcID"] = 52409,
},
[452099] = {
["encounterName"] = "Anub'ikkaj",
["source"] = "Animated Shadow",
["encounterID"] = 2838,
["event"] = "SPELL_CAST_START",
["npcID"] = 224616,
},
[1226395] = {
["encounterName"] = "Loom'ithar",
["source"] = "Loom'ithar",
["npcID"] = 233815,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3131,
},
[212773] = {
["event"] = "SPELL_CAST_START",
["source"] = "Duskwatch Reinforcement",
["npcID"] = 107073,
},
[352796] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gatewarden Zo'mazz",
["npcID"] = 178392,
},
[189227] = {
["source"] = "Crawliac Cinderwitch",
["event"] = "SPELL_CAST_START",
["npcID"] = 95174,
},
[222499] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kvaldir Cursewalker",
["npcID"] = 89759,
},
[1226401] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowguard Weavemaster",
["npcID"] = 240974,
},
[231300] = {
["source"] = "Tower Concubine",
["event"] = "SPELL_CAST_START",
["npcID"] = 116158,
},
[1242784] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pactsworn Fraycaller",
["npcID"] = 244413,
},
[205096] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infiltrator Assassin",
["npcID"] = 102395,
},
[197418] = {
["encounterName"] = "Ilysanna Ravencrest",
["source"] = "Illysanna Ravencrest",
["npcID"] = 98696,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1833,
},
[449031] = {
["source"] = "Nerubian Slashjaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 218654,
},
[198442] = {
["event"] = "SPELL_CAST_START",
["source"] = "Restless Ancestor",
["npcID"] = 93094,
},
[422414] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shuffling Horror",
["npcID"] = 208456,
},
[99350] = {
["encounterName"] = "Baleroc",
["source"] = "Baleroc",
["npcID"] = 53494,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1200,
},
[424462] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Taener Duelmal",
["encounterID"] = 2847,
["event"] = "SPELL_CAST_START",
["npcID"] = 211289,
},
[206881] = {
["isChanneled"] = true,
["source"] = "Felsoul Crusher",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 99764,
},
[1219731] = {
["encounterName"] = "Taah'bat and A'wazj",
["source"] = "Taah'bat",
["npcID"] = 234933,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3108,
},
[220372] = {
["source"] = "Crazed Owlbeast",
["event"] = "SPELL_CAST_START",
["npcID"] = 112856,
},
[158498] = {
["source"] = "Sylvan Owl",
["event"] = "SPELL_CAST_START",
["npcID"] = 106286,
},
[325535] = {
["event"] = "SPELL_CAST_START",
["source"] = "Depraved Houndmaster",
["npcID"] = 164562,
},
[194860] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overgrown Larva",
["npcID"] = 94691,
},
[170802] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kol'roz the Everburning",
["npcID"] = 110909,
},
[449034] = {
["source"] = "Nerubian Slashjaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 218654,
},
[186620] = {
["source"] = "Mortiferous",
["event"] = "SPELL_CAST_START",
["npcID"] = 93622,
},
[221153] = {
["source"] = "Pulsauron",
["event"] = "SPELL_CAST_START",
["npcID"] = 111072,
},
[202772] = {
["source"] = "Stonefist Brawler",
["event"] = "SPELL_CAST_START",
["npcID"] = 102623,
},
[214312] = {
["source"] = "Inquisitor Tivos",
["event"] = "SPELL_CAST_START",
["npcID"] = 107269,
},
[183274] = {
["event"] = "SPELL_CAST_START",
["source"] = "Whitewater Typhoon",
["npcID"] = 92152,
},
[197346] = {
["source"] = "Swamprock Reedweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 97920,
},
[183088] = {
["source"] = "Mightstone Breaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 92612,
},
[220340] = {
["source"] = "Flotsam",
["event"] = "SPELL_CAST_START",
["npcID"] = 99929,
},
[1238713] = {
["source"] = "Invasive Phasecrawler",
["event"] = "SPELL_CAST_START",
["npcID"] = 244448,
},
[373279] = {
["source"] = "Thing From Beyond",
["event"] = "SPELL_CAST_START",
["npcID"] = 189988,
},
[192598] = {
["source"] = "Abhorrent Artificer",
["event"] = "SPELL_CAST_START",
["npcID"] = 106339,
},
[375327] = {
["npcID"] = 190404,
},
[1214147] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "The Underpin",
["npcID"] = 247390,
},
[222475] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tidal Elemental",
["npcID"] = 111411,
},
[1230529] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Forgeweaver Araz",
["npcID"] = 233817,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3132,
},
[220145] = {
["source"] = "Runeskeld Rollo",
["event"] = "SPELL_CAST_START",
["npcID"] = 108578,
},
[1222341] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wastes Creeper",
["npcID"] = 234918,
},
[194062] = {
["source"] = "Gleamhoof Fawn",
["event"] = "SPELL_CAST_START",
["npcID"] = 93316,
},
[197422] = {
["encounterName"] = "Cordana Felsong",
["source"] = "Cordana Felsong",
["npcID"] = 95888,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1818,
},
[196070] = {
["encounterName"] = "Corstilax",
["source"] = "Corstilax",
["npcID"] = 98205,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1825,
},
[1246915] = {
["encounterName"] = "Glazer",
["source"] = "Glazer",
["npcID"] = 95887,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1817,
},
[422090] = {
["source"] = "Treant",
["event"] = "SPELL_CAST_START",
["npcID"] = 54983,
},
[419351] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infinite Saboteur",
["npcID"] = 208438,
},
[214575] = {
["source"] = "Tideskorn Beastbreaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 107883,
},
[186344] = {
["source"] = "Flog the Captain-Eater",
["event"] = "SPELL_CAST_START",
["npcID"] = 89884,
},
[209470] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ravathes",
["npcID"] = 97942,
},
[346006] = {
["encounterName"] = "Zo'phex the Sentinel",
["source"] = "Zo'phex",
["npcID"] = 175616,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2425,
},
[195571] = {
["source"] = "Cursed Elderhorn",
["event"] = "SPELL_CAST_START",
["npcID"] = 94386,
},
[1227900] = {
["encounterName"] = "Taah'bat and A'wazj",
["source"] = "A'wazj",
["npcID"] = 241375,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3108,
},
[198959] = {
["event"] = "SPELL_CAST_START",
["source"] = "Valarjar Runecarver",
["npcID"] = 96664,
},
[351124] = {
["encounterName"] = "So'leah",
["source"] = "So'leah",
["encounterID"] = 2442,
["event"] = "SPELL_CAST_START",
["npcID"] = 177269,
},
[1222356] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tamed Ruinstalker",
["npcID"] = 234960,
},
[1238737] = {
["source"] = "Invasive Phasecrawler",
["event"] = "SPELL_CAST_START",
["npcID"] = 244448,
},
[205102] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eredar Shadow Mender",
["npcID"] = 102400,
},
[431639] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Skirmisher",
["npcID"] = 224150,
},
[45895] = {
["source"] = "Urgev the Flayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 93401,
},
[222794] = {
["source"] = "Dread-Captain Graham",
["event"] = "SPELL_CAST_START",
["npcID"] = 111760,
},
[186675] = {
["source"] = "Brogozog",
["event"] = "SPELL_CAST_START",
["npcID"] = 91100,
},
[211757] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eredar Chaosbringer",
["npcID"] = 105617,
},
[227339] = {
["encounterName"] = "Attumen the Huntsman",
["source"] = "Midnight",
["encounterID"] = 1960,
["event"] = "SPELL_CAST_START",
["npcID"] = 114264,
},
[1245166] = {
["encounterName"] = "Glazer",
["source"] = "Glazer",
["npcID"] = 95887,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1817,
},
[205103] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eredar Shadow Mender",
["npcID"] = 102400,
},
[353836] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Disruptive Patron",
["npcID"] = 176565,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2440,
},
[453140] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["event"] = "SPELL_CAST_START",
["npcID"] = 211087,
},
[227529] = {
["source"] = "Damaged Golem",
["event"] = "SPELL_CAST_START",
["npcID"] = 114334,
},
[377383] = {
["npcID"] = 192333,
},
[195378] = {
["source"] = "Turbulent Lifefury",
["event"] = "SPELL_CAST_START",
["npcID"] = 100427,
},
[453141] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211087,
},
[192307] = {
["encounterName"] = "Hyrja",
["source"] = "Hyrja",
["npcID"] = 95833,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1806,
},
[210131] = {
["source"] = "Mordvigbjorn",
["event"] = "SPELL_CAST_START",
["npcID"] = 93371,
},
[213806] = {
["event"] = "SPELL_CAST_START",
["source"] = "Elemental Conjuration",
["npcID"] = 107661,
},
[453142] = {
["event"] = "SPELL_CAST_START",
["source"] = "Web Marauder",
["npcID"] = 219034,
},
[219200] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chief Treasurer Jabrill",
["npcID"] = 109677,
},
[198962] = {
["event"] = "SPELL_CAST_START",
["source"] = "Valarjar Runecarver",
["npcID"] = 96664,
},
[191284] = {
["encounterName"] = "Hymdall",
["source"] = "Hymdall",
["npcID"] = 94960,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1805,
},
[34344] = {
["source"] = "Sinker",
["event"] = "SPELL_CAST_START",
["npcID"] = 92591,
},
[211936] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glimar Ironfist",
["npcID"] = 91529,
},
[241808] = {
["source"] = "Virtuous Gentleman",
["event"] = "SPELL_CAST_START",
["npcID"] = 183424,
},
[197427] = {
["source"] = "Torok Bloodtotem",
["event"] = "SPELL_CAST_START",
["npcID"] = 95707,
},
[187429] = {
["source"] = "Thane Irglov the Merciless",
["event"] = "SPELL_CAST_START",
["npcID"] = 91892,
},
[1238765] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Dimensius",
["npcID"] = 234478,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3135,
},
[198963] = {
["encounterName"] = "Naraxas",
["source"] = "Naraxas",
["npcID"] = 91005,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1792,
},
[212784] = {
["event"] = "SPELL_CAST_START",
["source"] = "Watchful Inquisitor",
["npcID"] = 105715,
},
[204082] = {
["source"] = "Wrathguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 249118,
},
[208689] = {
["source"] = "Dominator Tentacle",
["event"] = "SPELL_CAST_START",
["npcID"] = 105304,
},
[385578] = {
["encounterName"] = "Azureblade",
["npcID"] = 186739,
["encounterID"] = 2585,
},
[211949] = {
["source"] = "Hook",
["event"] = "SPELL_CAST_START",
["npcID"] = 92590,
},
[218415] = {
["encounterName"] = "Il'gynoth, The Heart of Corruption",
["source"] = "Eye of Il'gynoth",
["encounterID"] = 1873,
["event"] = "SPELL_CAST_START",
["npcID"] = 105906,
},
[218927] = {
["encounterName"] = "High Botanist Tel'arn",
["source"] = "Naturalist Tel'arn",
["encounterID"] = 1886,
["event"] = "SPELL_CAST_START",
["npcID"] = 109041,
},
[188938] = {
["source"] = "Cauldronmaster Mills",
["event"] = "SPELL_CAST_START",
["npcID"] = 93563,
},
[378413] = {
["event"] = "SPELL_CAST_START",
["source"] = "Frenzied Tidecore",
["npcID"] = 213699,
},
[215806] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shar'thos",
["npcID"] = 108678,
},
[212513] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stormwing Matriarch",
["npcID"] = 91795,
},
[221487] = {
["isChanneled"] = true,
["source"] = "Nighthold Protector",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 111170,
},
[9532] = {
["source"] = "Magula",
["event"] = "SPELL_CAST_START",
["npcID"] = 91130,
},
[1238780] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["encounterID"] = 2847,
["event"] = "SPELL_CAST_START",
["npcID"] = 207946,
},
[125799] = {
["source"] = "Li-An Skymirror",
["event"] = "SPELL_CAST_START",
["npcID"] = 113781,
},
[1238782] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["encounterID"] = 2847,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207946,
},
[21067] = {
["event"] = "SPELL_CAST_START",
["source"] = "Maelisandra Venitox",
["npcID"] = 106340,
},
[387629] = {
["npcID"] = 195876,
},
[212786] = {
["encounterName"] = "Oakheart",
["source"] = "Oakheart",
["npcID"] = 103344,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1837,
},
[451102] = {
["source"] = "Ascendant Vis'coxria",
["event"] = "SPELL_CAST_START",
["npcID"] = 211261,
},
[228555] = {
["source"] = "Virtuous Gentleman",
["event"] = "SPELL_CAST_START",
["npcID"] = 183424,
},
[412200] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Lost Aerobot",
["npcID"] = 205723,
},
[445984] = {
["event"] = "SPELL_CAST_START",
["source"] = "Attentive Silkhauler",
["npcID"] = 220483,
},
[351119] = {
["encounterName"] = "So'leah",
["source"] = "So' Cartel Assassin",
["encounterID"] = 2442,
["event"] = "SPELL_CAST_START",
["npcID"] = 177716,
},
[452127] = {
["encounterName"] = "Anub'ikkaj",
["source"] = "Anub'ikkaj",
["encounterID"] = 2838,
["event"] = "SPELL_CAST_START",
["npcID"] = 211089,
},
[224560] = {
["source"] = "Astrologer Jarin",
["event"] = "SPELL_CAST_START",
["npcID"] = 112803,
},
[187406] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gunnlaug Scaleheart",
["npcID"] = 91240,
},
[213299] = {
["source"] = "Bristlemaul",
["event"] = "SPELL_CAST_START",
["npcID"] = 97449,
},
[205621] = {
["source"] = "Felstalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 110484,
},
[207920] = {
["source"] = "Dread-Captain Tattersail",
["event"] = "SPELL_CAST_START",
["npcID"] = 93486,
},
[213144] = {
["source"] = "Gurbog da Basher",
["event"] = "SPELL_CAST_START",
["npcID"] = 96590,
},
[1230608] = {
["source"] = "Shadowguard Destroyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 236806,
},
[187194] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felskorn Trapper",
["npcID"] = 91244,
},
[375348] = {
["npcID"] = 190401,
},
[225073] = {
["source"] = "Defiled Keeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 113089,
},
[41056] = {
["source"] = "Captain Feargus",
["event"] = "SPELL_CAST_START",
["npcID"] = 89056,
},
[186365] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Nameless King",
["npcID"] = 92763,
},
[216877] = {
["encounterName"] = "High Botanist Tel'arn",
["source"] = "High Botanist Tel'arn",
["encounterID"] = 1886,
["event"] = "SPELL_CAST_START",
["npcID"] = 104528,
},
[332708] = {
["source"] = "Heavin the Breaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 167532,
},
[451107] = {
["source"] = "Sureki Webmage",
["event"] = "SPELL_CAST_START",
["npcID"] = 210966,
},
[187706] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felskorn Torturer",
["npcID"] = 96121,
},
[444377] = {
["event"] = "SPELL_CAST_START",
["source"] = "Immature Kodiak",
["npcID"] = 227552,
},
[1230619] = {
["source"] = "Shadowguard Colossus",
["event"] = "SPELL_CAST_START",
["npcID"] = 231585,
},
[279118] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zanchuli Witch-Doctor",
["npcID"] = 122969,
},
[193338] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vethir",
["npcID"] = 98174,
},
[375351] = {
["npcID"] = 190403,
},
[192017] = {
["event"] = "SPELL_CAST_START",
["source"] = "Valkyra Aspirant",
["npcID"] = 92764,
},
[95826] = {
["event"] = "SPELL_CAST_START",
["source"] = "Royal Dreadguard",
["npcID"] = 93592,
},
[216830] = {
["encounterName"] = "High Botanist Tel'arn",
["source"] = "High Botanist Tel'arn",
["encounterID"] = 1886,
["event"] = "SPELL_CAST_START",
["npcID"] = 104528,
},
[215552] = {
["event"] = "SPELL_CAST_START",
["source"] = "Disturbed Spectre",
["npcID"] = 97732,
},
[224321] = {
["encounterName"] = "Star Augur Etraeus",
["source"] = "Arc Well",
["encounterID"] = 1863,
["event"] = "SPELL_CAST_START",
["npcID"] = 112664,
},
[471585] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Big M.O.M.M.A.",
["npcID"] = 226398,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3020,
},
[431659] = {
["event"] = "SPELL_CAST_START",
["source"] = "Direweb Ritualist",
["npcID"] = 221300,
},
[220970] = {
["event"] = "SPELL_CAST_START",
["source"] = "Randril",
["npcID"] = 111007,
},
[323142] = {
["encounterName"] = "Lord Chamberlain",
["source"] = "Lord Chamberlain",
["npcID"] = 164218,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2381,
},
[438826] = {
["event"] = "SPELL_CAST_START",
["source"] = "Atik",
["npcID"] = 217533,
},
[427356] = {
["source"] = "Devout Priest",
["event"] = "SPELL_CAST_START",
["npcID"] = 206697,
},
[219631] = {
["source"] = "Siegemaster Aedrin",
["event"] = "SPELL_CAST_START",
["npcID"] = 110438,
},
[323143] = {
["encounterName"] = "Lord Chamberlain",
["source"] = "Lord Chamberlain",
["npcID"] = 164218,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2381,
},
[438827] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Atik",
["npcID"] = 217533,
},
[193505] = {
["source"] = "Vileshard Hulk",
["event"] = "SPELL_CAST_START",
["npcID"] = 91000,
},
[213531] = {
["encounterName"] = "Tichondrius",
["source"] = "Tichondrius",
["npcID"] = 103685,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1862,
},
[195884] = {
["source"] = "Feltotem Bloodsinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 100055,
},
[451113] = {
["source"] = "Sureki Webmage",
["event"] = "SPELL_CAST_START",
["npcID"] = 210966,
},
[224729] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Market Peacekeeper",
["npcID"] = 179840,
},
[1214262] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sthaarbs",
["npcID"] = 234845,
},
[208697] = {
["source"] = "Deathglare Tentacle",
["event"] = "SPELL_CAST_START",
["npcID"] = 105322,
},
[1238834] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Enforcer Jak'tull",
["npcID"] = 245601,
},
[140106] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bitterbrine Venomer",
["npcID"] = 89283,
},
[194356] = {
["source"] = "Crawliac Hagfeather",
["event"] = "SPELL_CAST_START",
["npcID"] = 95266,
},
[347716] = {
["event"] = "SPELL_CAST_START",
["source"] = "P.O.S.T. Worker",
["npcID"] = 176394,
},
[227800] = {
["encounterName"] = "Maiden of Virtue",
["source"] = "Maiden of Virtue",
["encounterID"] = 1954,
["event"] = "SPELL_CAST_START",
["npcID"] = 113971,
},
[211769] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felswarm Imp",
["npcID"] = 98776,
},
[420403] = {
["source"] = "Decaymonger Rotpaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 205995,
},
[197350] = {
["event"] = "SPELL_CAST_START",
["source"] = "Clackbrine Snapper",
["npcID"] = 111474,
},
[204604] = {
["event"] = "SPELL_CAST_START",
["source"] = "Apothecary Curseheart",
["npcID"] = 93987,
},
[237713] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Tormented Stagwing",
["npcID"] = 119214,
},
[218424] = {
["encounterName"] = "High Botanist Tel'arn",
["source"] = "Naturalist Tel'arn",
["encounterID"] = 1886,
["event"] = "SPELL_CAST_START",
["npcID"] = 109041,
},
[172714] = {
["source"] = "Thistleleaf Menace",
["event"] = "SPELL_CAST_START",
["npcID"] = 91472,
},
[451117] = {
["source"] = "Ixkreten the Unbreakable",
["event"] = "SPELL_CAST_START",
["npcID"] = 211262,
},
[204967] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kudzilla",
["npcID"] = 99362,
},
[412215] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spurlok, Timesworn Sentinel",
["npcID"] = 205158,
},
[225079] = {
["isChanneled"] = true,
["source"] = "Defiled Keeper",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 113089,
},
[254256] = {
["source"] = "Arbiter of the Inquisiiton",
["event"] = "SPELL_CAST_START",
["npcID"] = 109933,
},
[220191] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cadraeus",
["npcID"] = 110726,
},
[449071] = {
["source"] = "Kobold Taskfinder",
["event"] = "SPELL_CAST_START",
["npcID"] = 204127,
},
[1251138] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glutted Creeper",
["npcID"] = 234282,
},
[451119] = {
["source"] = "Ixkreten the Unbreakable",
["event"] = "SPELL_CAST_START",
["npcID"] = 211262,
},
[211771] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadborne Seer",
["npcID"] = 105651,
},
[224568] = {
["source"] = "Nighthold Protector",
["event"] = "SPELL_CAST_START",
["npcID"] = 112665,
},
[347721] = {
["event"] = "SPELL_CAST_START",
["source"] = "Defective Sorter",
["npcID"] = 176396,
},
[434740] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nightfall Inquisitor",
["npcID"] = 217518,
},
[221209] = {
["source"] = "Ebulliant",
["event"] = "SPELL_CAST_START",
["npcID"] = 111112,
},
[186437] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Nameless King",
["npcID"] = 92763,
},
[195799] = {
["event"] = "SPELL_CAST_START",
["source"] = "Yotnar",
["npcID"] = 96175,
},
[157375] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Primal Storm Elemental",
["npcID"] = 77942,
},
[218287] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vineyard Warden",
["npcID"] = 108871,
},
[211713] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fathnyr",
["npcID"] = 91803,
},
[1255245] = {
["encounterName"] = "Dargrul the Underking",
["source"] = "Infinite Slayer",
["encounterID"] = 1793,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 249021,
},
[205118] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fel Inciter",
["npcID"] = 102377,
},
[1238867] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Arcane Echo",
["npcID"] = 241923,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3132,
},
[202860] = {
["source"] = "Feltotem Bloodbinder",
["event"] = "SPELL_CAST_START",
["npcID"] = 104328,
},
[342317] = {
["source"] = "Cartel Xy Plunderer",
["event"] = "SPELL_CAST_START",
["npcID"] = 238298,
},
[350086] = {
["encounterName"] = "The Grand Menagerie",
["source"] = "Venza Goldfuse",
["npcID"] = 176705,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2441,
},
[453110] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ascended Webfriar",
["npcID"] = 219022,
},
[457266] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greenhorn Extra",
["npcID"] = 228307,
},
[1238873] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Arcane Echo",
["npcID"] = 241923,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3132,
},
[397889] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fallen Waterspeaker",
["npcID"] = 200126,
},
[197441] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tyndrissen",
["npcID"] = 90390,
},
[224982] = {
["isChanneled"] = true,
["source"] = "Abyss Watcher",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 113043,
},
[371584] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rising Tidebound",
["npcID"] = 215361,
},
[193502] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glayvianna Soulrender",
["npcID"] = 98177,
},
[194684] = {
["source"] = "Crawliac Deathscreamer",
["event"] = "SPELL_CAST_START",
["npcID"] = 95265,
},
[214593] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ferngrazer Stag",
["npcID"] = 108322,
},
[212798] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tarben",
["npcID"] = 98268,
},
[213532] = {
["source"] = "Captain Hring",
["event"] = "SPELL_CAST_START",
["npcID"] = 106981,
},
[213822] = {
["source"] = "Pridelord Meowl",
["event"] = "SPELL_CAST_START",
["npcID"] = 90901,
},
[208672] = {
["encounterName"] = "Gul'dan",
["source"] = "Azagrim",
["encounterID"] = 1866,
["event"] = "SPELL_CAST_START",
["npcID"] = 105295,
},
[1214315] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["encounterID"] = 2816,
["event"] = "SPELL_CAST_START",
["npcID"] = 209230,
},
[397892] = {
["event"] = "SPELL_CAST_START",
["source"] = "Imacu'tya",
["npcID"] = 104275,
},
[215870] = {
["event"] = "SPELL_CAST_START",
["source"] = "Azurefall Guardian",
["npcID"] = 99859,
},
[195037] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Oracle",
["npcID"] = 95861,
},
[215820] = {
["source"] = "Guhruhlruhlruh",
["event"] = "SPELL_CAST_START",
["npcID"] = 95780,
},
[221383] = {
["isChanneled"] = true,
["source"] = "Second Mate Cilieth",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 108212,
},
[328206] = {
["encounterName"] = "Echelon",
["source"] = "Echelon",
["npcID"] = 164185,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2380,
},
[194534] = {
["source"] = "Crawliac Doomwailer",
["event"] = "SPELL_CAST_START",
["npcID"] = 94984,
},
[453149] = {
["event"] = "SPELL_CAST_START",
["source"] = "Web Marauder",
["npcID"] = 219034,
},
[207169] = {
["event"] = "SPELL_CAST_START",
["source"] = "Colerian",
["npcID"] = 104519,
},
[226511] = {
["source"] = "Duskwatch Astralite",
["event"] = "SPELL_CAST_START",
["npcID"] = 113707,
},
[185512] = {
["source"] = "Lost Legion Wrathguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 246552,
},
[231005] = {
["source"] = "Kar'zun",
["event"] = "SPELL_CAST_START",
["npcID"] = 116008,
},
[213312] = {
["source"] = "Bristlemaul",
["event"] = "SPELL_CAST_START",
["npcID"] = 97449,
},
[192111] = {
["source"] = "Ragi the Hexxer",
["event"] = "SPELL_CAST_START",
["npcID"] = 95194,
},
[465463] = {
["encounterName"] = "Geezle Gigazap",
["source"] = "Geezle Gigazap",
["npcID"] = 226404,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3054,
},
[223038] = {
["source"] = "Dreadsoul Corruptor",
["event"] = "SPELL_CAST_START",
["npcID"] = 112261,
},
[1248701] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Wastelander Pactspeaker",
["npcID"] = 234955,
},
[211777] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eye of the Beast",
["npcID"] = 106757,
},
[230951] = {
["encounterName"] = "Spellblade Aluriel",
["source"] = "Fel Soul",
["encounterID"] = 1871,
["event"] = "SPELL_CAST_START",
["npcID"] = 115905,
},
[204611] = {
["encounterName"] = "Oakheart",
["source"] = "Oakheart",
["npcID"] = 103344,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1837,
},
[397897] = {
["encounterName"] = "Talixae Flamewreath",
["source"] = "Jazshariu",
["npcID"] = 104273,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1869,
},
[228528] = {
["source"] = "Reformed Maiden",
["event"] = "SPELL_CAST_START",
["npcID"] = 114783,
},
[228019] = {
["encounterName"] = "Opera Hall",
["source"] = "Mrs. Cauldrons",
["encounterID"] = 1957,
["event"] = "SPELL_CAST_START",
["npcID"] = 114522,
},
[200154] = {
["event"] = "SPELL_CAST_START",
["source"] = "Understone Demolisher",
["npcID"] = 102253,
},
[227646] = {
["encounterName"] = "Moroes",
["source"] = "Baron Rafe Dreuger",
["encounterID"] = 1961,
["event"] = "SPELL_CAST_START",
["npcID"] = 114318,
},
[473070] = {
["encounterName"] = "Swampface",
["source"] = "Swampface",
["npcID"] = 226396,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3053,
},
[1243007] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pactsworn Dustblade",
["npcID"] = 244415,
},
[183345] = {
["source"] = "Feltotem Bloodbinder",
["event"] = "SPELL_CAST_START",
["npcID"] = 104328,
},
[217235] = {
["event"] = "SPELL_CAST_START",
["source"] = "Levantus",
["npcID"] = 108829,
},
[214486] = {
["encounterName"] = "Star Augur Etraeus",
["source"] = "Star Augur Etraeus",
["encounterID"] = 1863,
["event"] = "SPELL_CAST_START",
["npcID"] = 103758,
},
[205111] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Felhound Mage Slayer",
["npcID"] = 102372,
},
[433731] = {
["encounterName"] = "Anub'zekt",
["source"] = "Anub'zekt",
["npcID"] = 215405,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2906,
},
[194887] = {
["event"] = "SPELL_CAST_START",
["source"] = "Drogbar Wormhook",
["npcID"] = 95013,
},
[230888] = {
["source"] = "Overseer Ingra",
["event"] = "SPELL_CAST_START",
["npcID"] = 107217,
},
[215288] = {
["encounterName"] = "Elerethe Renferal",
["source"] = "Elerethe Renferal",
["encounterID"] = 1876,
["event"] = "SPELL_CAST_START",
["npcID"] = 106087,
},
[470587] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobyss Witherer",
["npcID"] = 214251,
},
[1243017] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pactsworn Dustblade",
["npcID"] = 244415,
},
[1254761] = {
["source"] = "Infinite Magus",
["event"] = "SPELL_CAST_START",
["npcID"] = 249019,
},
[181468] = {
["source"] = "Weeping Banshee",
["event"] = "SPELL_CAST_START",
["npcID"] = 91430,
},
[470588] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobyss Witherer",
["npcID"] = 214251,
},
[217140] = {
["source"] = "Captain Dargun",
["event"] = "SPELL_CAST_START",
["npcID"] = 109163,
},
[1244188] = {
["source"] = "Living Ember",
["event"] = "SPELL_CAST_START",
["npcID"] = 99233,
},
[449090] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Careless Hopgoblin",
["npcID"] = 223423,
},
[225089] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Wrangler",
["npcID"] = 100216,
},
[1238930] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pactsworn Sandreaver",
["npcID"] = 244410,
},
[224229] = {
["source"] = "Celestial Acolyte",
["event"] = "SPELL_CAST_START",
["npcID"] = 112655,
},
[408141] = {
["encounterName"] = "Blight of Galakrond",
["source"] = "Dazhak",
["npcID"] = 201788,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2668,
},
[197232] = {
["source"] = "Naxa",
["event"] = "SPELL_CAST_START",
["npcID"] = 99217,
},
[357243] = {
["source"] = "Wandering Pulsar",
["event"] = "SPELL_CAST_START",
["npcID"] = 180433,
},
[215618] = {
["source"] = "Vision of Deathwing",
["event"] = "SPELL_CAST_START",
["npcID"] = 97056,
},
[470592] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nightfall Shadeguard",
["npcID"] = 217519,
},
[470591] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nightfall Hopestealer",
["npcID"] = 217517,
},
[381525] = {
["encounterName"] = "Kyrakka and Erkhart Stormvein",
["encounterID"] = 2623,
["npcID"] = 190484,
},
[197450] = {
["source"] = "Torok Bloodtotem",
["event"] = "SPELL_CAST_START",
["npcID"] = 95707,
},
[197961] = {
["encounterName"] = "Odyn",
["source"] = "Odyn",
["npcID"] = 95676,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1809,
},
[384597] = {
["npcID"] = 193293,
},
[205370] = {
["encounterName"] = "Krosus",
["source"] = "Krosus",
["encounterID"] = 1842,
["event"] = "SPELL_CAST_START",
["npcID"] = 101002,
},
[228162] = {
["encounterName"] = "Odyn",
["source"] = "Hyrja",
["encounterID"] = 1958,
["event"] = "SPELL_CAST_START",
["npcID"] = 114360,
},
[221875] = {
["encounterName"] = "Star Augur Etraeus",
["source"] = "Star Augur Etraeus",
["encounterID"] = 1863,
["event"] = "SPELL_CAST_START",
["npcID"] = 103758,
},
[212997] = {
["encounterName"] = "Tichondrius",
["source"] = "Tichondrius",
["encounterID"] = 1862,
["event"] = "SPELL_CAST_START",
["npcID"] = 103685,
},
[397907] = {
["event"] = "SPELL_CAST_START",
["source"] = "Baalgar the Watchful",
["npcID"] = 104274,
},
[374361] = {
["encounterName"] = "Echo of Doragosa",
["npcID"] = 190609,
["encounterID"] = 2565,
},
[222532] = {
["event"] = "SPELL_CAST_START",
["source"] = "Torrentius",
["npcID"] = 102064,
},
[355934] = {
["event"] = "SPELL_CAST_START",
["source"] = "Support Officer",
["npcID"] = 177817,
},
[222491] = {
["source"] = "Kvaldir Soulflayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 91575,
},
[228603] = {
["encounterName"] = "Attumen the Huntsman",
["source"] = "Spectral Charger",
["encounterID"] = 1960,
["event"] = "SPELL_CAST_START",
["npcID"] = 114804,
},
[228637] = {
["encounterName"] = "Attumen the Huntsman",
["source"] = "Spectral Journeyman",
["encounterID"] = 1960,
["event"] = "SPELL_CAST_START",
["npcID"] = 114802,
},
[201307] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greystone Shardmaster",
["npcID"] = 101644,
},
[1238954] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Bone Melter",
["npcID"] = 245617,
},
[201920] = {
["encounterName"] = "Mindflayer Kaahrj",
["source"] = "Mindflayer Kaahrj",
["npcID"] = 101950,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1846,
},
[204471] = {
["encounterName"] = "Skorpyron",
["source"] = "Skorpyron",
["encounterID"] = 1849,
["event"] = "SPELL_CAST_START",
["npcID"] = 102263,
},
[1227792] = {
["source"] = "Void Creeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 245783,
},
[222526] = {
["source"] = "Debilitating Eye",
["event"] = "SPELL_CAST_START",
["npcID"] = 111756,
},
[228164] = {
["source"] = "Phantom Crew",
["event"] = "SPELL_CAST_START",
["npcID"] = 114584,
},
[224943] = {
["source"] = "Felsworn Chaos-Mage",
["event"] = "SPELL_CAST_START",
["npcID"] = 113012,
},
[229608] = {
["source"] = "Erudite Slayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 115486,
},
[430168] = {
["event"] = "SPELL_CAST_START",
["source"] = "Invading Hurler",
["npcID"] = 214677,
},
[1231882] = {
["source"] = "Phaseblade Bandit",
["event"] = "SPELL_CAST_START",
["npcID"] = 238312,
},
[227628] = {
["encounterName"] = "Shade of Medivh",
["source"] = "Shade of Medivh",
["encounterID"] = 1965,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 114350,
},
[219601] = {
["source"] = "Drugon the Frostblood",
["event"] = "SPELL_CAST_START",
["npcID"] = 110378,
},
[212165] = {
["source"] = "Athissa",
["event"] = "SPELL_CAST_START",
["npcID"] = 88855,
},
[232260] = {
["event"] = "SPELL_CAST_START",
["source"] = "Captain Fiora",
["npcID"] = 116223,
},
[225410] = {
["source"] = "Withered Skulker",
["event"] = "SPELL_CAST_START",
["npcID"] = 113128,
},
[448351] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wicktwister Kobold",
["npcID"] = 221066,
},
[212031] = {
["encounterName"] = "Patrol Captain Gerdo",
["source"] = "Bound Energy",
["npcID"] = 105705,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1868,
},
[349797] = {
["encounterName"] = "The Grand Menagerie",
["source"] = "Alcruux",
["npcID"] = 176556,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2441,
},
[227809] = {
["encounterName"] = "Maiden of Virtue",
["source"] = "Maiden of Virtue",
["encounterID"] = 1954,
["event"] = "SPELL_CAST_START",
["npcID"] = 113971,
},
[98043] = {
["encounterName"] = "Lord Rhyolith",
["source"] = "Lord Rhyolith",
["npcID"] = 52558,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1204,
},
[215369] = {
["event"] = "SPELL_CAST_START",
["source"] = "Feral Scavenger",
["npcID"] = 98979,
},
[211786] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fathnyr",
["npcID"] = 91803,
},
[440912] = {
["event"] = "SPELL_CAST_START",
["source"] = "Invasive Lashroom",
["npcID"] = 206194,
},
[214045] = {
["event"] = "SPELL_CAST_START",
["source"] = "Apothecary Faldren",
["npcID"] = 110870,
},
[381535] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scornful Sandshoal",
["npcID"] = 214662,
},
[197454] = {
["encounterName"] = "Cordana Felsong",
["source"] = "Avatar of Vengeance",
["npcID"] = 100351,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1818,
},
[427601] = {
["source"] = "Lightspawn",
["event"] = "SPELL_CAST_START",
["npcID"] = 206710,
},
[1251266] = {
["source"] = "Dreamweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 246868,
},
[221333] = {
["source"] = "Searing Infernal",
["event"] = "SPELL_CAST_START",
["npcID"] = 111210,
},
[1240060] = {
["source"] = "Untethered Rampager",
["event"] = "SPELL_CAST_START",
["npcID"] = 242525,
},
[209620] = {
["encounterName"] = "Grand Magistrix Elisande",
["source"] = "Recursive Elemental",
["encounterID"] = 1872,
["event"] = "SPELL_CAST_START",
["npcID"] = 105299,
},
[163671] = {
["source"] = "Vengeful Soul",
["event"] = "SPELL_CAST_START",
["npcID"] = 107628,
},
[356967] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cartel Muscle",
["npcID"] = 180348,
},
[201873] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bitestone Rockbeater",
["npcID"] = 94261,
},
[453200] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cragmund",
["npcID"] = 220269,
},
[198479] = {
["event"] = "SPELL_CAST_START",
["source"] = "Servant of Skovald",
["npcID"] = 112480,
},
[194896] = {
["source"] = "Dusky Howler",
["event"] = "SPELL_CAST_START",
["npcID"] = 100409,
},
[221749] = {
["source"] = "Matron Hagatha",
["event"] = "SPELL_CAST_START",
["npcID"] = 111329,
},
[232775] = {
["encounterName"] = "Guarm",
["source"] = "Guarm",
["npcID"] = 114323,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1962,
},
[1234898] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Dimensius",
["npcID"] = 241517,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3135,
},
[183768] = {
["source"] = "Thaon Moonclaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 95399,
},
[205646] = {
["source"] = "Fel Lord Nezmet",
["event"] = "SPELL_CAST_START",
["npcID"] = 241725,
},
[16568] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Monstrous Larva",
["npcID"] = 240091,
},
[189747] = {
["source"] = "Sirius Ebonwing",
["event"] = "SPELL_CAST_START",
["npcID"] = 94974,
},
[221408] = {
["encounterName"] = "Gul'dan",
["source"] = "Soul Fragment of Azzinoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 111070,
},
[427609] = {
["source"] = "Arathi Knight",
["event"] = "SPELL_CAST_START",
["npcID"] = 206696,
},
[186327] = {
["source"] = "Kvaldir Mistcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 93377,
},
[54431] = {
["source"] = "Salteye Shoresprinter",
["event"] = "SPELL_CAST_START",
["npcID"] = 88100,
},
[229705] = {
["source"] = "Spider",
["event"] = "SPELL_CAST_START",
["npcID"] = 115418,
},
[386660] = {
["encounterName"] = "Leymor",
["encounterID"] = 2582,
["npcID"] = 186644,
},
[197969] = {
["encounterName"] = "Ursoc",
["source"] = "Ursoc",
["encounterID"] = 1841,
["event"] = "SPELL_CAST_START",
["npcID"] = 100497,
},
[204275] = {
["encounterName"] = "Skorpyron",
["source"] = "Skorpyron",
["encounterID"] = 1849,
["event"] = "SPELL_CAST_START",
["npcID"] = 102263,
},
[227658] = {
["encounterName"] = "Guarm",
["source"] = "Guarm",
["encounterID"] = 1962,
["event"] = "SPELL_CAST_START",
["npcID"] = 114323,
},
[205862] = {
["encounterName"] = "Krosus",
["source"] = "Krosus",
["encounterID"] = 1842,
["event"] = "SPELL_CAST_START",
["npcID"] = 101002,
},
[220492] = {
["source"] = "Lord Tash'irel",
["event"] = "SPELL_CAST_START",
["npcID"] = 107696,
},
[216909] = {
["encounterName"] = "Star Augur Etraeus",
["source"] = "Eye of the Void",
["encounterID"] = 1863,
["event"] = "SPELL_CAST_START",
["npcID"] = 109082,
},
[229706] = {
["source"] = "Spider",
["event"] = "SPELL_CAST_START",
["npcID"] = 115418,
},
[3606] = {
["event"] = "SPELL_CAST_START",
["source"] = "Searing Totem",
["npcID"] = 2523,
},
[160772] = {
["isChanneled"] = true,
["source"] = "Webbed Victim",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 225601,
},
[224205] = {
["encounterName"] = "Star Augur Etraeus",
["source"] = "Astral Defender",
["encounterID"] = 1863,
["event"] = "SPELL_CAST_START",
["npcID"] = 112638,
},
[434779] = {
["encounterName"] = "Orator Krix'vizk",
["source"] = "Orator Krix'vizk",
["npcID"] = 216619,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2907,
},
[472658] = {
["isChanneled"] = true,
["source"] = "Darkfuse Spy-Copter",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 234102,
},
[200291] = {
["source"] = "Risen Scout",
["event"] = "SPELL_CAST_START",
["npcID"] = 98691,
},
[225100] = {
["event"] = "SPELL_CAST_START",
["source"] = "Guardian Construct",
["npcID"] = 104270,
},
[196947] = {
["encounterName"] = "Helya",
["source"] = "Helya",
["npcID"] = 96759,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1824,
},
[193364] = {
["encounterName"] = "Ymiron, the Fallen King",
["source"] = "Ymiron, the Fallen King",
["npcID"] = 96756,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1822,
},
[1236572] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowguard Null Bastion",
["npcID"] = 244115,
},
[330614] = {
["source"] = "Rancid Gasbag",
["event"] = "SPELL_CAST_START",
["npcID"] = 163086,
},
[223565] = {
["encounterName"] = "Ursoc",
["source"] = "Horrid Eagle",
["encounterID"] = 1841,
["event"] = "SPELL_CAST_START",
["npcID"] = 112290,
},
[231749] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felborne Collaborator",
["npcID"] = 111749,
},
[458329] = {
["source"] = "Kordac",
["event"] = "SPELL_CAST_START",
["npcID"] = 221084,
},
[192468] = {
["source"] = "Dargrul",
["event"] = "SPELL_CAST_START",
["npcID"] = 97442,
},
[438877] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nakt",
["npcID"] = 218324,
},
[218855] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stormfeather",
["npcID"] = 109594,
},
[427869] = {
["encounterName"] = "Void Speaker Eirich",
["source"] = "Void Speaker Eirich",
["npcID"] = 213119,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2883,
},
[157534] = {
["source"] = "Hatecoil Stormcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 88087,
},
[346742] = {
["encounterName"] = "Mailroom Mayhem",
["source"] = "P.O.S.T. Master",
["npcID"] = 175646,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2424,
},
[229610] = {
["encounterName"] = "Viz'aduum the Watcher",
["source"] = "Viz'aduum the Watcher",
["encounterID"] = 2017,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 114790,
},
[224387] = {
["source"] = "Sidereal Familiar",
["event"] = "SPELL_CAST_START",
["npcID"] = 112718,
},
[257862] = {
["encounterName"] = "Hadal Darkfathom",
["source"] = "Hadal Darkfathom",
["encounterID"] = 2099,
["event"] = "SPELL_CAST_START",
["npcID"] = 128651,
},
[224039] = {
["event"] = "SPELL_CAST_START",
["source"] = "Soulgazer",
["npcID"] = 105129,
},
[100794] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Flame Archon",
["npcID"] = 54161,
},
[453212] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["event"] = "SPELL_CAST_START",
["npcID"] = 211087,
},
[210770] = {
["event"] = "SPELL_CAST_START",
["source"] = "Volynd Stormbringer",
["npcID"] = 106320,
},
[1214468] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mechadrone Sniper",
["npcID"] = 229069,
},
[431714] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zik'tex",
["npcID"] = 227427,
},
[359028] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Zo'gron",
["npcID"] = 176563,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2440,
},
[438883] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nakt",
["npcID"] = 218324,
},
[434786] = {
["event"] = "SPELL_CAST_START",
["source"] = "Trilling Attendant",
["npcID"] = 216293,
},
[329340] = {
["encounterName"] = "High Adjudicator Aleez",
["source"] = "High Adjudicator Aleez",
["npcID"] = 165410,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2403,
},
[197974] = {
["encounterName"] = "Ilysanna Ravencrest",
["source"] = "Soul-torn Vanguard",
["npcID"] = 100485,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1833,
},
[99259] = {
["encounterName"] = "Baleroc",
["source"] = "Baleroc",
["npcID"] = 53494,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1200,
},
[125365] = {
["source"] = "Punchy Lou",
["event"] = "SPELL_CAST_START",
["npcID"] = 113775,
},
[427621] = {
["source"] = "Arathi Knight",
["event"] = "SPELL_CAST_START",
["npcID"] = 206696,
},
[473690] = {
["encounterName"] = "Demolition Duo",
["source"] = "Keeza Quickfuse",
["npcID"] = 226403,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3019,
},
[191955] = {
["source"] = "Ugla the Hag",
["event"] = "SPELL_CAST_START",
["npcID"] = 95196,
},
[229711] = {
["source"] = "Ancient Tome",
["event"] = "SPELL_CAST_START",
["npcID"] = 115419,
},
[100795] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Magmakin",
["npcID"] = 54161,
},
[217249] = {
["event"] = "SPELL_CAST_START",
["source"] = "Levantus",
["npcID"] = 108829,
},
[223057] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nightmother",
["npcID"] = 111980,
},
[373364] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gerenth the Vile",
["npcID"] = 107435,
},
[211406] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazing Imp",
["npcID"] = 104295,
},
[214989] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spirit of Vengeance",
["npcID"] = 100364,
},
[433766] = {
["encounterName"] = "Anub'zekt",
["source"] = "Anub'zekt",
["npcID"] = 215405,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2906,
},
[369828] = {
["npcID"] = 184023,
},
[1254886] = {
["source"] = "Infinite Slayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 249021,
},
[391793] = {
["event"] = "SPELL_CAST_START",
["source"] = "Frenzied Tidecore",
["npcID"] = 213699,
},
[212492] = {
["encounterName"] = "Spellblade Aluriel",
["source"] = "Spellblade Aluriel",
["encounterID"] = 1871,
["event"] = "SPELL_CAST_START",
["npcID"] = 104881,
},
[384868] = {
["npcID"] = 192789,
},
[203607] = {
["source"] = "Ishpip",
["event"] = "SPELL_CAST_START",
["npcID"] = 107485,
},
[207451] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felspreader Imp",
["npcID"] = 104754,
},
[124854] = {
["source"] = "Hannis Shoalwalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 113782,
},
[328322] = {
["encounterName"] = "Echelon",
["source"] = "Undying Stonefiend",
["npcID"] = 164363,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2380,
},
[1216233] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crystalline Golem",
["npcID"] = 236549,
},
[1226783] = {
["event"] = "SPELL_CAST_START",
["source"] = "Unbound Entity",
["npcID"] = 236072,
},
[357226] = {
["source"] = "Adorned Starseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 180429,
},
[434793] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Trilling Attendant",
["npcID"] = 216293,
},
[202703] = {
["source"] = "Soulflayer of the Inquisiton",
["event"] = "SPELL_CAST_START",
["npcID"] = 109395,
},
[1241307] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lurking Phaseburrower",
["npcID"] = 242548,
},
[347775] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overloaded Mailemental",
["npcID"] = 176395,
},
[229714] = {
["source"] = "Ancient Tome",
["event"] = "SPELL_CAST_START",
["npcID"] = 115419,
},
[213846] = {
["source"] = "Brawlgoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 107127,
},
[185299] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eredar Supplicant",
["npcID"] = 103162,
},
[207906] = {
["encounterName"] = "Talixae Flamewreath",
["source"] = "Talixae Flamewreath",
["npcID"] = 104217,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1869,
},
[448105] = {
["encounterName"] = "Drahga Shadowburner",
["source"] = "Valiona",
["npcID"] = 40320,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1048,
},
[427629] = {
["source"] = "Fervent Sharpshooter",
["event"] = "SPELL_CAST_START",
["npcID"] = 206694,
},
[206939] = {
["encounterName"] = "Gul'dan",
["source"] = "Gul'dan",
["encounterID"] = 1866,
["event"] = "SPELL_CAST_START",
["npcID"] = 104154,
},
[227666] = {
["encounterName"] = "Guarm",
["source"] = "Guarm",
["encounterID"] = 1962,
["event"] = "SPELL_CAST_START",
["npcID"] = 114323,
},
[1223634] = {
["event"] = "SPELL_CAST_START",
["source"] = "Waygate Watcher",
["npcID"] = 235853,
},
[100797] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Flame Archon",
["npcID"] = 54161,
},
[188907] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfiend Dreadbringer",
["npcID"] = 92789,
},
[450153] = {
["event"] = "SPELL_CAST_START",
["source"] = "Witherthorn",
["npcID"] = 214790,
},
[471652] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Darkfuse Demolitionist",
["npcID"] = 226398,
},
[191325] = {
["encounterName"] = "Dresaron",
["source"] = "Dresaron",
["npcID"] = 99200,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1838,
},
[449130] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forge Loader",
["npcID"] = 213343,
},
[225105] = {
["source"] = "Shal'dorei Archmage",
["event"] = "SPELL_CAST_START",
["npcID"] = 112595,
},
[229716] = {
["source"] = "Ancient Tome",
["event"] = "SPELL_CAST_START",
["npcID"] = 115419,
},
[1229510] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wastelander Farstalker",
["npcID"] = 234962,
},
[202075] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Burning Geode",
["npcID"] = 101437,
},
[218967] = {
["source"] = "Majestic Elderhorn",
["event"] = "SPELL_CAST_START",
["npcID"] = 96410,
},
[227669] = {
["encounterName"] = "Guarm",
["source"] = "Guarm",
["npcID"] = 114323,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1962,
},
[460393] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Darkfuse Mechadrone",
["npcID"] = 228424,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3020,
},
[225593] = {
["source"] = "Majestic Elderhorn",
["event"] = "SPELL_CAST_START",
["npcID"] = 96410,
},
[257870] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Buccaneer",
["npcID"] = 130011,
},
[455275] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shurrai",
["npcID"] = 221224,
},
[189791] = {
["source"] = "Oubdob da Smasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 95204,
},
[445038] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobyss Trickster",
["npcID"] = 214343,
},
[224944] = {
["source"] = "Felsworn Chaos-Mage",
["event"] = "SPELL_CAST_START",
["npcID"] = 113012,
},
[227615] = {
["encounterName"] = "Shade of Medivh",
["source"] = "Shade of Medivh",
["encounterID"] = 1965,
["event"] = "SPELL_CAST_START",
["npcID"] = 114350,
},
[452205] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aggregation of Horrors",
["npcID"] = 220999,
},
[1229523] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Plexus Sentinel",
["npcID"] = 239454,
},
[228606] = {
["encounterName"] = "Attumen the Huntsman",
["source"] = "Spectral Stable Hand",
["encounterID"] = 1960,
["event"] = "SPELL_CAST_START",
["npcID"] = 114803,
},
[434802] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ixin",
["npcID"] = 217531,
},
[205660] = {
["source"] = "Torturer of the Inquisition",
["event"] = "SPELL_CAST_START",
["npcID"] = 109394,
},
[449135] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flickerflame Overseer",
["npcID"] = 212542,
},
[445457] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["encounterID"] = 2836,
["event"] = "SPELL_CAST_START",
["npcID"] = 207207,
},
[207196] = {
["source"] = "Kiranys Duskwhisper",
["event"] = "SPELL_CAST_START",
["npcID"] = 94414,
},
[197719] = {
["source"] = "Majestic Elderhorn",
["event"] = "SPELL_CAST_START",
["npcID"] = 96410,
},
[449136] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Glumtooth Bug-Beater",
["npcID"] = 222176,
},
[212530] = {
["encounterName"] = "Spellblade Aluriel",
["source"] = "Spellblade Aluriel",
["encounterID"] = 1871,
["event"] = "SPELL_CAST_START",
["npcID"] = 104881,
},
[193376] = {
["encounterName"] = "Ularogg Cragshaper",
["source"] = "Ularogg Cragshaper",
["npcID"] = 91004,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1791,
},
[213851] = {
["source"] = "Brawlgoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 107127,
},
[1214546] = {
["event"] = "SPELL_CAST_START",
["source"] = "Void Ascendant",
["npcID"] = 212793,
},
[198495] = {
["encounterName"] = "Helya",
["source"] = "Helya",
["npcID"] = 96759,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1824,
},
[227672] = {
["encounterName"] = "Moroes",
["source"] = "Lord Crispin Ference",
["encounterID"] = 1961,
["event"] = "SPELL_CAST_START",
["npcID"] = 114321,
},
[431734] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chitinous Goliath",
["npcID"] = 220917,
},
[361088] = {
["source"] = "Cartel Xy Plunderer",
["event"] = "SPELL_CAST_START",
["npcID"] = 238318,
},
[199629] = {
["encounterName"] = "Naraxas",
["source"] = "Naraxas",
["npcID"] = 91005,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1792,
},
[215666] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mana-Corrupted Waterspawn",
["npcID"] = 99789,
},
[189282] = {
["source"] = "Oubdob da Smasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 95204,
},
[451913] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ascended Webfriar",
["npcID"] = 219022,
},
[210781] = {
["source"] = "Il'gynoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 105393,
},
[227673] = {
["encounterName"] = "Guarm",
["source"] = "Guarm",
["npcID"] = 114323,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1962,
},
[195767] = {
["source"] = "Bewitched Bear",
["event"] = "SPELL_CAST_START",
["npcID"] = 95270,
},
[210261] = {
["event"] = "SPELL_CAST_START",
["source"] = "Duskwatch Sentry",
["npcID"] = 104251,
},
[212967] = {
["source"] = "Pollous the Fetid",
["event"] = "SPELL_CAST_START",
["npcID"] = 94485,
},
[194401] = {
["event"] = "SPELL_CAST_START",
["source"] = "Defiled Grovewalker",
["npcID"] = 93157,
},
[125370] = {
["source"] = "Savash Windcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 113783,
},
[346766] = {
["encounterName"] = "Hylbrande",
["source"] = "Hylbrande",
["encounterID"] = 2426,
["event"] = "SPELL_CAST_START",
["npcID"] = 175663,
},
[465871] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Bloodwarper",
["npcID"] = 230748,
},
[223579] = {
["source"] = "Or'ell",
["event"] = "SPELL_CAST_START",
["npcID"] = 102495,
},
[228186] = {
["source"] = "Lord Korithis",
["event"] = "SPELL_CAST_START",
["npcID"] = 109821,
},
[214039] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kiranys Duskwhisper",
["npcID"] = 94414,
},
[219591] = {
["isChanneled"] = true,
["source"] = "Na'zak the Fiend",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 110321,
},
[206794] = {
["source"] = "Infernal Lord",
["event"] = "SPELL_CAST_START",
["npcID"] = 90803,
},
[346980] = {
["encounterName"] = "Hylbrande",
["source"] = "Vault Purifier",
["encounterID"] = 2426,
["event"] = "SPELL_CAST_START",
["npcID"] = 176551,
},
[1235045] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Adarus Duskblaze",
["npcID"] = 237661,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3122,
},
[201567] = {
["event"] = "SPELL_CAST_START",
["source"] = "Seacursed Slaver",
["npcID"] = 97043,
},
[230504] = {
["encounterName"] = "Spellblade Aluriel",
["source"] = "Fel Soul",
["encounterID"] = 1871,
["event"] = "SPELL_CAST_START",
["npcID"] = 115905,
},
[449640] = {
["event"] = "SPELL_CAST_START",
["source"] = "Maddened Siegebomber",
["npcID"] = 216044,
},
[1230941] = {
["source"] = "Phaseblade Bandit",
["event"] = "SPELL_CAST_START",
["npcID"] = 238312,
},
[423536] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_CAST_START",
["npcID"] = 207940,
},
[451764] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sir Braunpyke",
["npcID"] = 217658,
},
[1235052] = {
["isChanneled"] = false,
["source"] = "Stormforged Guardian",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 178171,
},
[357238] = {
["source"] = "Adorned Starseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 180429,
},
[195694] = {
["source"] = "Highland Elderhorn",
["event"] = "SPELL_CAST_START",
["npcID"] = 95268,
},
[377483] = {
["source"] = "Deepflayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 221572,
},
[221864] = {
["encounterName"] = "Grand Magistrix Elisande",
["source"] = "Recursive Elemental",
["encounterID"] = 1872,
["event"] = "SPELL_CAST_START",
["npcID"] = 105299,
},
[228700] = {
["encounterName"] = "The Curator",
["source"] = "Mana Confluence",
["encounterID"] = 1964,
["event"] = "SPELL_CAST_START",
["npcID"] = 114338,
},
[1223667] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Waygate Watcher",
["npcID"] = 235853,
},
[194682] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazing Imp",
["npcID"] = 98963,
},
[213856] = {
["source"] = "Brawlgoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 107127,
},
[206641] = {
["encounterName"] = "Trilliax",
["source"] = "Trilliax",
["encounterID"] = 1867,
["event"] = "SPELL_CAST_START",
["npcID"] = 104288,
},
[165740] = {
["source"] = "Icebound Dreadnought",
["event"] = "SPELL_CAST_START",
["npcID"] = 93173,
},
[201203] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greystone Trencher",
["npcID"] = 101645,
},
[1235064] = {
["event"] = "SPELL_CAST_START",
["source"] = "Untethered Voidshade",
["npcID"] = 234897,
},
[102569] = {
["encounterName"] = "Murozond",
["source"] = "Murozond",
["npcID"] = 54432,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1271,
},
[124860] = {
["source"] = "Hannis Shoalwalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 113782,
},
[471671] = {
["source"] = "Darkfuse Oppressor",
["event"] = "SPELL_CAST_START",
["npcID"] = 225854,
},
[207199] = {
["source"] = "Magistrix Vilessa",
["event"] = "SPELL_CAST_START",
["npcID"] = 112757,
},
[375439] = {
["encounterName"] = "Magmatusk",
["npcID"] = 181861,
["encounterID"] = 2610,
},
[228086] = {
["source"] = "Phantom Crew",
["event"] = "SPELL_CAST_START",
["npcID"] = 114584,
},
[1241254] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Velaryn Bloodwrath",
["npcID"] = 237660,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3122,
},
[211810] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glimar Ironfist",
["npcID"] = 91529,
},
[224607] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowy Overfiend",
["npcID"] = 112739,
},
[212834] = {
["encounterName"] = "Shade of Xavius",
["source"] = "Shade of Xavius",
["npcID"] = 99192,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1839,
},
[212566] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wraithtalon",
["npcID"] = 97504,
},
[194668] = {
["encounterName"] = "Harbaron",
["source"] = "Harbaron",
["npcID"] = 96754,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1823,
},
[228014] = {
["isChanneled"] = true,
["source"] = "Ghostly Philanthropist",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 114542,
},
[189726] = {
["isChanneled"] = true,
["source"] = "Lieutenant Desdel Stareye",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 93031,
},
[211299] = {
["event"] = "SPELL_CAST_START",
["source"] = "Watchful Inquisitor",
["npcID"] = 105715,
},
[1254890] = {
["isChanneled"] = false,
["source"] = "Infinite Slayer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 249021,
},
[191848] = {
["encounterName"] = "Serpentrix",
["source"] = "Serpentrix",
["npcID"] = 91808,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1813,
},
[450176] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Slasher",
["npcID"] = 208243,
},
[214988] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spirit of Vengeance",
["npcID"] = 100364,
},
[125373] = {
["source"] = "Savash Windcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 113783,
},
[189801] = {
["source"] = "Oubdob da Smasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 95204,
},
[220242] = {
["isChanneled"] = true,
["source"] = "Magoria",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 110423,
},
[1239963] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowed Fateshaper",
["npcID"] = 242517,
},
[214301] = {
["source"] = "Duskwatch Battlemaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 111446,
},
[195944] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skrog Wavecrasher",
["npcID"] = 91796,
},
[204646] = {
["encounterName"] = "Oakheart",
["source"] = "Oakheart",
["npcID"] = 103344,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1837,
},
[191192] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felskorn Oathbinder",
["npcID"] = 112479,
},
[197880] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bonespeaker Runeaxe",
["npcID"] = 93066,
},
[1226903] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowguard Harvester",
["npcID"] = 241242,
},
[1237261] = {
["source"] = "Reshanor",
["event"] = "SPELL_CAST_START",
["npcID"] = 238319,
},
[1222815] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wastelander Ritualist",
["npcID"] = 234957,
},
[228193] = {
["encounterName"] = "Opera Hall",
["source"] = "Luminore",
["encounterID"] = 1957,
["event"] = "SPELL_CAST_START",
["npcID"] = 114329,
},
[190315] = {
["source"] = "Nathanos Blightcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 95852,
},
[432967] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sentry Stagshell",
["npcID"] = 216340,
},
[434824] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ixin",
["npcID"] = 217531,
},
[1231005] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Living Mass",
["npcID"] = 242587,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3135,
},
[202088] = {
["encounterName"] = "Helya",
["source"] = "Helya",
["npcID"] = 96759,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1824,
},
[323236] = {
["encounterName"] = "Lord Chamberlain",
["source"] = "Lord Chamberlain",
["npcID"] = 164218,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2381,
},
[216756] = {
["source"] = "Fenri",
["event"] = "SPELL_CAST_START",
["npcID"] = 92040,
},
[10277] = {
["source"] = "Tormented Dryad",
["event"] = "SPELL_CAST_START",
["npcID"] = 93155,
},
[99947] = {
["encounterName"] = "Shannox",
["source"] = "Rageface",
["npcID"] = 53695,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1205,
},
[200551] = {
["encounterName"] = "Dargrul the Underking",
["source"] = "Dargrul",
["npcID"] = 91007,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1793,
},
[422541] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shuffling Horror",
["npcID"] = 208456,
},
[414944] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fungal Speartender",
["npcID"] = 207456,
},
[221186] = {
["source"] = "Doomguard Challenger",
["event"] = "SPELL_CAST_START",
["npcID"] = 246711,
},
[199919] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Faceless Voidcaster",
["npcID"] = 99651,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1850,
},
[219493] = {
["source"] = "Drugon the Frostblood",
["event"] = "SPELL_CAST_START",
["npcID"] = 110378,
},
[99781] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Inferno Hawk",
["npcID"] = 53648,
},
[38033] = {
["source"] = "Hatecoil Spitespeaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 89025,
},
[189108] = {
["source"] = "Risen Soldier",
["event"] = "SPELL_CAST_START",
["npcID"] = 92954,
},
[100549] = {
["event"] = "SPELL_CAST_START",
["source"] = "Unstable Magma",
["npcID"] = 53901,
},
[333477] = {
["source"] = "Goregrind",
["event"] = "SPELL_CAST_START",
["npcID"] = 163621,
},
[324447] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobyss Spearfisher",
["npcID"] = 214338,
},
[432117] = {
["encounterName"] = "Ki'katal the Harvester",
["source"] = "Ki'katal the Harvester",
["npcID"] = 215407,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2901,
},
[217119] = {
["source"] = "Captain Dargun",
["event"] = "SPELL_CAST_START",
["npcID"] = 109163,
},
[355641] = {
["event"] = "SPELL_CAST_START",
["source"] = "Veteran Sparkcaster",
["npcID"] = 179841,
},
[224613] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowy Overfiend",
["npcID"] = 112739,
},
[356001] = {
["event"] = "SPELL_CAST_START",
["source"] = "Armored Overseer",
["npcID"] = 177808,
},
[196194] = {
["encounterName"] = "Fenryr",
["source"] = "Steeljaw Grizzly",
["npcID"] = 96677,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1807,
},
[431491] = {
["source"] = "Nightfall Commander",
["event"] = "SPELL_CAST_START",
["npcID"] = 214762,
},
[383823] = {
["npcID"] = 192796,
},
[183526] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Mightstone Breaker",
["npcID"] = 92610,
},
[223590] = {
["source"] = "Dreadsoul Corruptor",
["event"] = "SPELL_CAST_START",
["npcID"] = 112261,
},
[357512] = {
["event"] = "SPELL_CAST_START",
["source"] = "Enraged Direhorn",
["npcID"] = 180495,
},
[1228502] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Forgeweaver Araz",
["npcID"] = 233817,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3132,
},
[450188] = {
["event"] = "SPELL_CAST_START",
["source"] = "Feral Hardhead",
["npcID"] = 225938,
},
[377502] = {
["source"] = "Proscenium Puddlestomper",
["event"] = "SPELL_CAST_START",
["npcID"] = 216072,
},
[228300] = {
["encounterName"] = "Helya",
["source"] = "Helya",
["encounterID"] = 2008,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 114537,
},
[436592] = {
["encounterName"] = "Goldie Baronbottom",
["source"] = "Goldie Baronbottom",
["encounterID"] = 2930,
["event"] = "SPELL_CAST_START",
["npcID"] = 214661,
},
[223079] = {
["isChanneled"] = true,
["source"] = "Helarjar Berserker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 107673,
},
[215233] = {
["isChanneled"] = true,
["source"] = "Dominator Tentacle",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 105304,
},
[397931] = {
["source"] = "Minion of Doubt",
["event"] = "SPELL_CAST_START",
["npcID"] = 57109,
},
[204140] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Portal Guardian",
["npcID"] = 102337,
},
[216106] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Shroudseeker",
["npcID"] = 103605,
},
[228003] = {
["encounterName"] = "Odyn",
["source"] = "Hymdall",
["encounterID"] = 1958,
["event"] = "SPELL_CAST_START",
["npcID"] = 114361,
},
[201581] = {
["encounterName"] = "Millificent Manastorm",
["source"] = "Millificent Manastorm",
["npcID"] = 101976,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1847,
},
[198496] = {
["encounterName"] = "Ularogg Cragshaper",
["source"] = "Ularogg Cragshaper",
["npcID"] = 91004,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1791,
},
[228391] = {
["source"] = "Bonespeaker Soulbinder",
["event"] = "SPELL_CAST_START",
["npcID"] = 114532,
},
[426645] = {
["source"] = "Naz'jar Ravager",
["event"] = "SPELL_CAST_START",
["npcID"] = 212673,
},
[198428] = {
["encounterName"] = "Ularogg Cragshaper",
["source"] = "Ularogg Cragshaper",
["npcID"] = 91004,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1791,
},
[453616] = {
["event"] = "SPELL_CAST_START",
["source"] = "Doomguard",
["npcID"] = 225493,
},
[221033] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Gelatinized Decay",
["npcID"] = 111004,
},
[182728] = {
["source"] = "Boss Whalebelly",
["event"] = "SPELL_CAST_START",
["npcID"] = 89050,
},
[230247] = {
["source"] = "Ariadne",
["event"] = "SPELL_CAST_START",
["npcID"] = 115847,
},
[190406] = {
["isChanneled"] = true,
["source"] = "Ysera",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 93065,
},
[424600] = {
["source"] = "Fungal Podling",
["event"] = "SPELL_CAST_START",
["npcID"] = 211063,
},
[443027] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sureki Raider",
["npcID"] = 222677,
},
[388392] = {
["npcID"] = 196044,
},
[232807] = {
["encounterName"] = "Guarm",
["source"] = "Guarm",
["encounterID"] = 1962,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 114323,
},
[189068] = {
["source"] = "Kester Farseeker",
["event"] = "SPELL_CAST_START",
["npcID"] = 92971,
},
[194657] = {
["event"] = "SPELL_CAST_START",
["source"] = "Waterlogged Soul Guard",
["npcID"] = 99188,
},
[1231061] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sandbank Hopper",
["npcID"] = 230598,
},
[191941] = {
["encounterName"] = "Tirathon Saltheril",
["source"] = "Tirathon Saltheril",
["npcID"] = 95885,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1815,
},
[186423] = {
["source"] = "Warbringer Mox'na",
["event"] = "SPELL_CAST_START",
["npcID"] = 90164,
},
[1231067] = {
["source"] = "Enraged Thorntail Shade",
["event"] = "SPELL_CAST_START",
["npcID"] = 239832,
},
[333488] = {
["encounterName"] = "Amarth, The Harvester",
["source"] = "Amarth",
["npcID"] = 163157,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2388,
},
[216428] = {
["event"] = "SPELL_CAST_START",
["source"] = "Humongris",
["npcID"] = 108879,
},
[450196] = {
["source"] = "Candlelit Blind-Hound",
["event"] = "SPELL_CAST_START",
["npcID"] = 218213,
},
[198595] = {
["event"] = "SPELL_CAST_START",
["source"] = "Valarjar Thundercaller",
["npcID"] = 95842,
},
[121580] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thistleleaf Ruffian",
["npcID"] = 91354,
},
[1244414] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sufaadi Soulbinder",
["npcID"] = 230354,
},
[450197] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skittering Swarmer",
["npcID"] = 208245,
},
[1239262] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Artoshion",
["npcID"] = 245255,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3135,
},
[444055] = {
["event"] = "SPELL_CAST_START",
["source"] = "Threadling Scavenger",
["npcID"] = 221131,
},
[232809] = {
["encounterName"] = "Guarm",
["source"] = "Guarm",
["encounterID"] = 1962,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 114323,
},
[200561] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ebonclaw Worg",
["npcID"] = 99868,
},
[209263] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grim Inquisitor",
["npcID"] = 103231,
},
[207298] = {
["source"] = "Obsidian Deathwarder",
["event"] = "SPELL_CAST_START",
["npcID"] = 125951,
},
[1239268] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Voidwarden",
["npcID"] = 245705,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3135,
},
[186229] = {
["event"] = "SPELL_CAST_START",
["source"] = "Orbyth",
["npcID"] = 91155,
},
[221117] = {
["event"] = "SPELL_CAST_START",
["source"] = "General Tel'arn",
["npcID"] = 110993,
},
[212415] = {
["source"] = "Urgev the Flayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 93401,
},
[200050] = {
["encounterName"] = "Shade of Xavius",
["source"] = "Shade of Xavius",
["npcID"] = 99192,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1839,
},
[196175] = {
["encounterName"] = "Serpentrix",
["source"] = "Mak'rana Hardshell",
["npcID"] = 95947,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1813,
},
[193712] = {
["encounterName"] = "Lady Hatecoil",
["source"] = "Lady Hatecoil",
["encounterID"] = 1811,
["event"] = "SPELL_CAST_START",
["npcID"] = 91789,
},
[141264] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bitterbrine Saltcaster",
["npcID"] = 89284,
},
[1226991] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sand Swirler",
["npcID"] = 237972,
},
[259940] = {
["encounterName"] = "Rixxa Fluxfume",
["source"] = "Rixxa Fluxflame",
["encounterID"] = 2107,
["event"] = "SPELL_CAST_START",
["npcID"] = 129231,
},
[186041] = {
["source"] = "Nightglaive the Traitor",
["event"] = "SPELL_CAST_START",
["npcID"] = 90621,
},
[228204] = {
["source"] = "Vile Stalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 90241,
},
[232811] = {
["encounterName"] = "Guarm",
["source"] = "Guarm",
["npcID"] = 114323,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1962,
},
[372397] = {
["source"] = "Brackenhide Scrapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 186359,
},
[448155] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crazed Abomination",
["npcID"] = 219454,
},
[411300] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Lost Waveshaper",
["npcID"] = 205363,
},
[1231716] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Dimensius",
["npcID"] = 233824,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3135,
},
[355640] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Market Peacekeeper",
["npcID"] = 179840,
},
[223598] = {
["event"] = "SPELL_CAST_START",
["source"] = "Broodmother Shu'malis",
["npcID"] = 105632,
},
[468631] = {
["event"] = "SPELL_CAST_START",
["source"] = "Venture Co. Diver",
["npcID"] = 231496,
},
[216432] = {
["event"] = "SPELL_CAST_START",
["source"] = "Humongris",
["npcID"] = 108879,
},
[355642] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Veteran Sparkcaster",
["npcID"] = 179841,
},
[183160] = {
["source"] = "Stoneblood Elderwitch",
["event"] = "SPELL_CAST_START",
["npcID"] = 91122,
},
[1239902] = {
["isChanneled"] = false,
["source"] = "Shadowed Fateshaper",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 242517,
},
[395946] = {
["source"] = "Decaymonger Rotpaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 205995,
},
[214500] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vorthax",
["npcID"] = 107113,
},
[216430] = {
["event"] = "SPELL_CAST_START",
["source"] = "Humongris",
["npcID"] = 108879,
},
[213583] = {
["encounterName"] = "Cordana Felsong",
["source"] = "Cordana Felsong",
["npcID"] = 95888,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1818,
},
[213594] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felwing",
["npcID"] = 105938,
},
[188605] = {
["source"] = "Morphael",
["event"] = "SPELL_CAST_START",
["npcID"] = 91045,
},
[188270] = {
["source"] = "Black Rook Falcon",
["event"] = "SPELL_CAST_START",
["npcID"] = 93064,
},
[1227014] = {
["event"] = "SPELL_CAST_START",
["source"] = "Heka'tamos",
["npcID"] = 245998,
},
[195521] = {
["source"] = "Pinerock Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 99109,
},
[201959] = {
["event"] = "SPELL_CAST_START",
["source"] = "Emberhusk Dominator",
["npcID"] = 113536,
},
[201298] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodtainted Burster",
["npcID"] = 100532,
},
[218555] = {
["source"] = "Fjordun",
["event"] = "SPELL_CAST_START",
["npcID"] = 109584,
},
[424614] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fungal Stabber",
["npcID"] = 207450,
},
[189725] = {
["source"] = "Lieutenant Desdel Stareye",
["event"] = "SPELL_CAST_START",
["npcID"] = 93031,
},
[1227704] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowguard Juggernaut",
["npcID"] = 241666,
},
[448161] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crazed Abomination",
["npcID"] = 219454,
},
[426261] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sootsnout",
["npcID"] = 212412,
},
[1230979] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Dimensius",
["npcID"] = 241517,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3135,
},
[223601] = {
["isChanneled"] = false,
["source"] = "Putrid Sludge",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 112251,
},
[195520] = {
["source"] = "Cursed Prowler",
["event"] = "SPELL_CAST_START",
["npcID"] = 94196,
},
[440996] = {
["source"] = "K'aresh Cragstalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 234779,
},
[197440] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Tyndrissen",
["npcID"] = 90390,
},
[202419] = {
["source"] = "Soulflayer of the Inquisiton",
["event"] = "SPELL_CAST_START",
["npcID"] = 109395,
},
[218554] = {
["source"] = "Fjordun",
["event"] = "SPELL_CAST_START",
["npcID"] = 109584,
},
[194425] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dread-Rider Plaguebringer",
["npcID"] = 94337,
},
[315076] = {
["source"] = "Morbid Ritualist",
["event"] = "SPELL_CAST_START",
["npcID"] = 164273,
},
[186674] = {
["source"] = "Brogozog",
["event"] = "SPELL_CAST_START",
["npcID"] = 91100,
},
[204151] = {
["encounterName"] = "Tirathon Saltheril",
["source"] = "Tirathon Saltheril",
["npcID"] = 95885,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1815,
},
[1231130] = {
["event"] = "SPELL_CAST_START",
["source"] = "Soulbinder Naazindhri",
["npcID"] = 233816,
},
[99919] = {
["encounterName"] = "Alysrazor",
["source"] = "Blazing Talon Clawshaper",
["npcID"] = 53734,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1206,
},
[320196] = {
["source"] = "Morbid Boneguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 168266,
},
[191726] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greater Lightning Elemental",
["npcID"] = 97022,
},
[166342] = {
["source"] = "Forsaken Dreadwing",
["event"] = "SPELL_CAST_START",
["npcID"] = 91069,
},
[427025] = {
["encounterName"] = "The Darkness",
["source"] = "The Darkness",
["encounterID"] = 2788,
["event"] = "SPELL_CAST_START",
["npcID"] = 208747,
},
[1237220] = {
["source"] = "Burrowing Creeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 245092,
},
[415406] = {
["encounterName"] = "Shroomspew",
["source"] = "Shroomsprew",
["npcID"] = 237481,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3139,
},
[400050] = {
["source"] = "Disturbed Deepflayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 215773,
},
[257899] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Ravager",
["npcID"] = 130012,
},
[201013] = {
["isChanneled"] = false,
["source"] = "Zaurac",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 100830,
},
[228171] = {
["encounterName"] = "Odyn",
["source"] = "Hyrja",
["encounterID"] = 1958,
["event"] = "SPELL_CAST_START",
["npcID"] = 114360,
},
[424621] = {
["source"] = "Sergeant Shaynemail",
["event"] = "SPELL_CAST_START",
["npcID"] = 239836,
},
[438954] = {
["encounterName"] = "Avanoxx",
["source"] = "Avanoxx",
["npcID"] = 213179,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2926,
},
[199034] = {
["event"] = "SPELL_CAST_START",
["source"] = "Valarjar Aspirant",
["npcID"] = 101637,
},
[203641] = {
["encounterName"] = "Fel Lord Betrug",
["source"] = "Fel Lord Betrug",
["npcID"] = 102446,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1856,
},
[355638] = {
["encounterName"] = "The Grand Menagerie",
["source"] = "Market Peacekeeper",
["npcID"] = 179840,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2441,
},
[228278] = {
["source"] = "Spectral Valet",
["event"] = "SPELL_CAST_START",
["npcID"] = 114633,
},
[456772] = {
["source"] = "Workmaster Nast",
["event"] = "SPELL_CAST_START",
["npcID"] = 213200,
},
[205689] = {
["event"] = "SPELL_CAST_START",
["source"] = "Huntress Estrid",
["npcID"] = 108822,
},
[465754] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shreddinator 3000",
["npcID"] = 230740,
},
[438471] = {
["encounterName"] = "Avanoxx",
["source"] = "Avanoxx",
["npcID"] = 213179,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2926,
},
[209270] = {
["encounterName"] = "Gul'dan",
["source"] = "Gul'dan",
["encounterID"] = 1866,
["event"] = "SPELL_CAST_START",
["npcID"] = 104154,
},
[166787] = {
["source"] = "Kobold Drawing",
["event"] = "SPELL_CAST_START",
["npcID"] = 107301,
},
[171394] = {
["source"] = "Desecrated Water Spirit",
["event"] = "SPELL_CAST_START",
["npcID"] = 108848,
},
[204666] = {
["encounterName"] = "Oakheart",
["source"] = "Oakheart",
["npcID"] = 103344,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1837,
},
[1214780] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Darkfuse Mechadrone",
["npcID"] = 228424,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3020,
},
[197500] = {
["source"] = "Mellok, Son of Torok",
["event"] = "SPELL_CAST_START",
["npcID"] = 96621,
},
[214392] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felfire Basilisk",
["npcID"] = 101868,
},
[458409] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pride of Beledar",
["npcID"] = 221786,
},
[1239350] = {
["encounterName"] = "Captain Nil'hitan",
["source"] = "Captain Nil'hitan",
["npcID"] = 244384,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3279,
},
[220535] = {
["event"] = "SPELL_CAST_START",
["source"] = "Apothecary Faldren",
["npcID"] = 110870,
},
[453291] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Trungal",
["npcID"] = 220268,
},
[204667] = {
["encounterName"] = "Oakheart",
["source"] = "Oakheart",
["npcID"] = 103344,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1837,
},
[350916] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Oasis Security",
["npcID"] = 179269,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2440,
},
[228277] = {
["encounterName"] = "Moroes",
["source"] = "Undying Servant",
["encounterID"] = 1961,
["event"] = "SPELL_CAST_START",
["npcID"] = 114634,
},
[202108] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blightshard Shaper",
["npcID"] = 90998,
},
[194430] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dread-Rider Plaguebringer",
["npcID"] = 109640,
},
[323538] = {
["encounterName"] = "High Adjudicator Aleez",
["source"] = "High Adjudicator Aleez",
["npcID"] = 165410,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2403,
},
[182145] = {
["source"] = "Impling Pillager",
["event"] = "SPELL_CAST_START",
["npcID"] = 110416,
},
[458688] = {
["source"] = "Awakened Volcanic Fury",
["event"] = "SPELL_CAST_START",
["npcID"] = 225896,
},
[465408] = {
["event"] = "SPELL_CAST_START",
["source"] = "Venture Co. Architect",
["npcID"] = 229251,
},
[201085] = {
["source"] = "Zaurac",
["event"] = "SPELL_CAST_START",
["npcID"] = 100830,
},
[197502] = {
["encounterName"] = "Warlord Parjesh",
["source"] = "Hatecoil Crestrider",
["npcID"] = 97269,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1810,
},
[350919] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Zo'gron",
["npcID"] = 176563,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2440,
},
[462508] = {
["source"] = "Void Emissary",
["event"] = "SPELL_CAST_START",
["npcID"] = 229537,
},
[207228] = {
["encounterName"] = "Chronomatic Anomaly",
["source"] = "Waning Time Particle",
["encounterID"] = 1865,
["event"] = "SPELL_CAST_START",
["npcID"] = 104676,
},
[214394] = {
["event"] = "SPELL_CAST_START",
["source"] = "Imperial Arcbinder",
["npcID"] = 109647,
},
[1235762] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stoneborn Reaver",
["npcID"] = 167612,
},
[196028] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Arcanist",
["npcID"] = 97171,
},
[100559] = {
["event"] = "SPELL_CAST_START",
["source"] = "Majordomo Staghelm",
["npcID"] = 54015,
},
[201598] = {
["encounterName"] = "Festerface",
["source"] = "Festerface",
["npcID"] = 101995,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1848,
},
[433845] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blood Overseer",
["npcID"] = 216364,
},
[470700] = {
["source"] = "Marina Zapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 227645,
},
[202062] = {
["encounterName"] = "Shivermaw",
["source"] = "Shivermaw",
["npcID"] = 101951,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1845,
},
[401205] = {
["event"] = "SPELL_CAST_START",
["source"] = "Oblivious Shaleshell",
["npcID"] = 217123,
},
[461487] = {
["encounterName"] = "Ki'katal the Harvester",
["source"] = "Ki'katal the Harvester",
["npcID"] = 215407,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2901,
},
[388801] = {
["npcID"] = 195855,
},
[1233093] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Adarus Duskblaze",
["npcID"] = 237661,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3122,
},
[448179] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crazed Abomination",
["npcID"] = 219454,
},
[340446] = {
["event"] = "SPELL_CAST_START",
["source"] = "Manifestation of Envy",
["npcID"] = 167898,
},
[183135] = {
["source"] = "Questioner Arev'naal",
["event"] = "SPELL_CAST_START",
["npcID"] = 89673,
},
[196208] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Shadowmoon Warlock",
["npcID"] = 99704,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1850,
},
[472750] = {
["source"] = "Swigs Farsight",
["event"] = "SPELL_CAST_START",
["npcID"] = 231288,
},
[228729] = {
["encounterName"] = "Opera Hall",
["source"] = "Luminore",
["encounterID"] = 1957,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 114329,
},
[424750] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fungal Rotcaster",
["npcID"] = 207459,
},
[229753] = {
["isChanneled"] = true,
["source"] = "Dungeoneer's Training Dummy",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 115273,
},
[1223007] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wastes Creeper",
["npcID"] = 234918,
},
[433841] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blood Overseer",
["npcID"] = 216364,
},
[1241833] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Ilyssa Darksorrow",
["npcID"] = 237662,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3122,
},
[427342] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arathi Footman",
["npcID"] = 206705,
},
[267997] = {
["source"] = "Gloomhound",
["event"] = "SPELL_CAST_START",
["npcID"] = 226268,
},
[222217] = {
["source"] = "Venomspinner",
["event"] = "SPELL_CAST_START",
["npcID"] = 111479,
},
[182505] = {
["source"] = "Felblade Destroyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 97966,
},
[211632] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eredar Chaosbringer",
["npcID"] = 105617,
},
[217981] = {
["source"] = "Elfbane",
["event"] = "SPELL_CAST_START",
["npcID"] = 99792,
},
[185733] = {
["source"] = "Ravyn-Drath",
["event"] = "SPELL_CAST_START",
["npcID"] = 89016,
},
[223100] = {
["source"] = "Dreadheart Ruiner",
["event"] = "SPELL_CAST_START",
["npcID"] = 112021,
},
[213728] = {
["source"] = "Hatecoil Deepsinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 90774,
},
[1231719] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Forgeweaver Araz",
["npcID"] = 233817,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3132,
},
[447270] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["encounterID"] = 2847,
["event"] = "SPELL_CAST_START",
["npcID"] = 207946,
},
[275907] = {
["encounterName"] = "Azerokk",
["source"] = "Azerokk",
["encounterID"] = 2106,
["event"] = "SPELL_CAST_START",
["npcID"] = 129227,
},
[217470] = {
["source"] = "Houndmaster Stroxis",
["event"] = "SPELL_CAST_START",
["npcID"] = 107136,
},
[198073] = {
["encounterName"] = "Smashspite the Hateful",
["source"] = "Smashspite the Hateful",
["npcID"] = 98949,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1834,
},
[269029] = {
["encounterName"] = "Dread Captain Lockwood",
["source"] = "Dread Captain Lockwood",
["encounterID"] = 2109,
["event"] = "SPELL_CAST_START",
["npcID"] = 129208,
},
[458423] = {
["source"] = "Kordac",
["event"] = "SPELL_CAST_START",
["npcID"] = 221084,
},
[356942] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tracker Zo'korss",
["npcID"] = 179837,
},
[1239407] = {
["encounterName"] = "Captain Nil'hitan",
["source"] = "Ethereal Scallywag",
["npcID"] = 245722,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3279,
},
[257397] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Bonesaw",
["npcID"] = 129788,
},
[331479] = {
["source"] = "Flawed Rancor",
["event"] = "SPELL_CAST_START",
["npcID"] = 169992,
},
[471733] = {
["event"] = "SPELL_CAST_START",
["source"] = "Disturbed Kelp",
["npcID"] = 231223,
},
[223101] = {
["source"] = "Bestrix",
["event"] = "SPELL_CAST_START",
["npcID"] = 111454,
},
[1239412] = {
["source"] = "Voidcrawler",
["event"] = "SPELL_CAST_START",
["npcID"] = 245782,
},
[194437] = {
["source"] = "Crawliac Cinderwitch",
["event"] = "SPELL_CAST_START",
["npcID"] = 95174,
},
[1237272] = {
["encounterName"] = "Loom'ithar",
["source"] = "Loom'ithar",
["npcID"] = 233815,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3131,
},
[228221] = {
["encounterName"] = "Opera Hall",
["source"] = "Babblet",
["encounterID"] = 1957,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 114330,
},
[444546] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_CAST_START",
["npcID"] = 207940,
},
[200580] = {
["event"] = "SPELL_CAST_START",
["source"] = "Festerhide Grizzly",
["npcID"] = 95779,
},
[189116] = {
["source"] = "Starlys Strongbow",
["event"] = "SPELL_CAST_START",
["npcID"] = 92963,
},
[213889] = {
["source"] = "Syphonus",
["event"] = "SPELL_CAST_START",
["npcID"] = 90505,
},
[199775] = {
["encounterName"] = "Naraxas",
["source"] = "Naraxas",
["npcID"] = 91005,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1792,
},
[1235326] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stoneborn Slasher",
["npcID"] = 167607,
},
[471736] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Disturbed Kelp",
["npcID"] = 231223,
},
[195031] = {
["encounterName"] = "Ymiron, the Fallen King",
["source"] = "Seacursed Soulkeeper",
["npcID"] = 97200,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1822,
},
[193977] = {
["encounterName"] = "Ymiron, the Fallen King",
["source"] = "Ymiron, the Fallen King",
["npcID"] = 96756,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1822,
},
[193803] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Tarspitter Grub",
["npcID"] = 92538,
},
[1239426] = {
["encounterName"] = "Captain Nil'hitan",
["source"] = "Captain Nil'hitan",
["npcID"] = 244384,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3279,
},
[1239427] = {
["encounterName"] = "Captain Nil'hitan",
["source"] = "Captain Nil'hitan",
["npcID"] = 244384,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3279,
},
[465595] = {
["event"] = "SPELL_CAST_START",
["source"] = "Venture Co. Electrician",
["npcID"] = 231312,
},
[223104] = {
["source"] = "Bestrix",
["event"] = "SPELL_CAST_START",
["npcID"] = 111454,
},
[200732] = {
["encounterName"] = "Dargrul the Underking",
["source"] = "Dargrul",
["npcID"] = 91007,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1793,
},
[321834] = {
["encounterName"] = "Mistcaller",
["source"] = "Mistcaller",
["npcID"] = 164501,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2392,
},
[201088] = {
["source"] = "Zaurac",
["event"] = "SPELL_CAST_START",
["npcID"] = 100830,
},
[183227] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eredar Riftweaver",
["npcID"] = 92450,
},
[1217664] = {
["encounterName"] = "Azhiccar",
["source"] = "Azhiccar",
["npcID"] = 234893,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3107,
},
[210868] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nightborne Spellsword",
["npcID"] = 105921,
},
[440218] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Vx",
["encounterID"] = 2908,
["event"] = "SPELL_CAST_START",
["npcID"] = 216649,
},
[215427] = {
["event"] = "SPELL_CAST_START",
["source"] = "Soulfiend Tagerma",
["npcID"] = 108494,
},
[182667] = {
["source"] = "Skrog Ambassador",
["event"] = "SPELL_CAST_START",
["npcID"] = 93513,
},
[198931] = {
["event"] = "SPELL_CAST_START",
["source"] = "Valarjar Mystic",
["npcID"] = 95834,
},
[200630] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mindshattered Screecher",
["npcID"] = 95769,
},
[445217] = {
["source"] = "Wavering Drone",
["event"] = "SPELL_CAST_START",
["npcID"] = 224081,
},
[1231252] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Overcharged Sentinel",
["npcID"] = 242631,
},
[222082] = {
["source"] = "Nightmare Amalgamation",
["event"] = "SPELL_CAST_START",
["npcID"] = 111398,
},
[198024] = {
["encounterName"] = "Rokmora",
["source"] = "Rokmora",
["npcID"] = 91003,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1790,
},
[1239445] = {
["encounterName"] = "Captain Nil'hitan",
["source"] = "Captain Nil'hitan",
["npcID"] = 244384,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3279,
},
[196115] = {
["encounterName"] = "Corstilax",
["source"] = "Corstilax",
["encounterID"] = 1825,
["event"] = "SPELL_CAST_START",
["npcID"] = 98205,
},
[211845] = {
["source"] = "Bloodstalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 92600,
},
[182837] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arcavellus",
["npcID"] = 90244,
},
[221059] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gelatinized Decay",
["npcID"] = 111004,
},
[324323] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skeletal Marauder",
["npcID"] = 165919,
},
[468672] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bombshell Crab",
["npcID"] = 231497,
},
[1247642] = {
["source"] = "Eternus",
["event"] = "SPELL_CAST_START",
["npcID"] = 248925,
},
[194442] = {
["event"] = "SPELL_CAST_START",
["source"] = "Waterlogged Soul Guard",
["npcID"] = 99188,
},
[377559] = {
["encounterName"] = "Treemouth",
["npcID"] = 186120,
["encounterID"] = 2568,
},
[201297] = {
["source"] = "Melezan",
["event"] = "SPELL_CAST_START",
["npcID"] = 101092,
},
[183633] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rockbound Pelter",
["npcID"] = 91008,
},
[374719] = {
["event"] = "SPELL_CAST_START",
["source"] = "Armored Riplisk",
["npcID"] = 217524,
},
[473071] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nitro",
["npcID"] = 230995,
},
[384978] = {
["encounterName"] = "Umbrelskul",
["npcID"] = 186738,
["encounterID"] = 2584,
},
[222596] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lysanis Shadesoul",
["npcID"] = 111939,
},
[1237769] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Arcane Echo",
["npcID"] = 241923,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3132,
},
[199050] = {
["event"] = "SPELL_CAST_START",
["source"] = "Valarjar Shieldmaiden",
["npcID"] = 95832,
},
[1235368] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overcharged Sentinel",
["npcID"] = 242631,
},
[427484] = {
["source"] = "Fanatical Conjuror",
["event"] = "SPELL_CAST_START",
["npcID"] = 206698,
},
[223621] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ambassador D'vwinn",
["npcID"] = 111649,
},
[202676] = {
["encounterName"] = "Blood-Princess Thal'ena",
["source"] = "Blood-Princess Thal'ena",
["npcID"] = 102431,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1855,
},
[222085] = {
["isChanneled"] = false,
["source"] = "Nightmare Amalgamation",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 111398,
},
[194956] = {
["encounterName"] = "Amalgam of Souls",
["source"] = "Amalgam of Souls",
["npcID"] = 98542,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1832,
},
[202634] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Grimhorn the Enslaver",
["npcID"] = 102566,
},
[199051] = {
["encounterName"] = "Oakheart",
["source"] = "Oakheart",
["npcID"] = 103344,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1837,
},
[163677] = {
["source"] = "Lord Tash'irel",
["event"] = "SPELL_CAST_START",
["npcID"] = 107696,
},
[189150] = {
["source"] = "Darkshade",
["event"] = "SPELL_CAST_START",
["npcID"] = 92965,
},
[204682] = {
["source"] = "Doomguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 249120,
},
[376190] = {
["isChanneled"] = true,
["source"] = "Brackenhide Rotflinger",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 186362,
},
[372311] = {
["npcID"] = 189266,
},
[465607] = {
["source"] = "Lost Legion Wrathguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 246552,
},
[194445] = {
["event"] = "SPELL_CAST_START",
["source"] = "Priestess of Eyir",
["npcID"] = 94856,
},
[193375] = {
["encounterName"] = "Ularogg Cragshaper",
["source"] = "Ularogg Cragshaper",
["npcID"] = 91004,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1791,
},
[209443] = {
["encounterName"] = "Xavius",
["source"] = "Xavius",
["encounterID"] = 1864,
["event"] = "SPELL_CAST_START",
["npcID"] = 103769,
},
[210662] = {
["event"] = "SPELL_CAST_START",
["source"] = "Withered Fiend",
["npcID"] = 98733,
},
[190351] = {
["source"] = "Nathanos Blightcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 95852,
},
[473351] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Big M.O.M.M.A.",
["npcID"] = 226398,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3020,
},
[202019] = {
["encounterName"] = "Lord Kur'talos Ravencrest",
["source"] = "Dantalionax",
["npcID"] = 98970,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1835,
},
[206219] = {
["encounterName"] = "Gul'dan",
["source"] = "Gul'dan",
["encounterID"] = 1866,
["event"] = "SPELL_CAST_START",
["npcID"] = 104154,
},
[15744] = {
["source"] = "Ancient Tome",
["event"] = "SPELL_CAST_START",
["npcID"] = 89834,
},
[215433] = {
["source"] = "Valarjar Mystic",
["event"] = "SPELL_CAST_START",
["npcID"] = 95834,
},
[223419] = {
["source"] = "Dread Spirit",
["event"] = "SPELL_CAST_START",
["npcID"] = 112178,
},
[1243887] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Dark Singularity",
["npcID"] = 243859,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3132,
},
[378850] = {
["event"] = "SPELL_CAST_START",
["source"] = "Babbling Book",
["npcID"] = 223852,
},
[135029] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wasserelementar",
["npcID"] = 208441,
},
[260894] = {
["encounterName"] = "Elder Leaxa",
["source"] = "Elder Leaxa",
["encounterID"] = 2111,
["event"] = "SPELL_CAST_START",
["npcID"] = 131318,
},
[204142] = {
["source"] = "Lost Legion Felguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 246551,
},
[178067] = {
["source"] = "Sea Skrog",
["event"] = "SPELL_CAST_START",
["npcID"] = 88094,
},
[206221] = {
["encounterName"] = "Gul'dan",
["source"] = "Gul'dan",
["encounterID"] = 1866,
["event"] = "SPELL_CAST_START",
["npcID"] = 104154,
},
[199567] = {
["encounterName"] = "Lord Kur'talos Ravencrest",
["source"] = "Image of Latosius",
["npcID"] = 101028,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1835,
},
[221577] = {
["source"] = "Astral Farseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 111170,
},
[1231328] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Overcharged Sentinel",
["npcID"] = 242631,
},
[213387] = {
["source"] = "Morjirn",
["event"] = "SPELL_CAST_START",
["npcID"] = 102852,
},
[1231309] = {
["source"] = "Empowered Broker",
["event"] = "SPELL_CAST_START",
["npcID"] = 230550,
},
[355048] = {
["source"] = "Murkbrine Shellcrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 178139,
},
[1231311] = {
["event"] = "SPELL_CAST_START",
["source"] = "Enraged Slateback Shade",
["npcID"] = 239830,
},
[182675] = {
["isChanneled"] = true,
["source"] = "Ooker Dooker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 89082,
},
[179092] = {
["source"] = "Hatecoil Enchantress",
["event"] = "SPELL_CAST_START",
["npcID"] = 88089,
},
[206222] = {
["encounterName"] = "Gul'dan",
["source"] = "Gul'dan",
["encounterID"] = 1866,
["event"] = "SPELL_CAST_START",
["npcID"] = 104154,
},
[182710] = {
["isChanneled"] = true,
["source"] = "Lieutenant Desdel Stareye",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 93031,
},
[188818] = {
["event"] = "SPELL_CAST_START",
["source"] = "Soultorn Jailer",
["npcID"] = 103363,
},
[213900] = {
["source"] = "Syphonus",
["event"] = "SPELL_CAST_START",
["npcID"] = 90505,
},
[1231318] = {
["source"] = "Sha'ryth the Cursed",
["event"] = "SPELL_CAST_START",
["npcID"] = 232006,
},
[1243604] = {
["encounterName"] = "Ash'Golm",
["source"] = "Ash'golm",
["npcID"] = 95886,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1816,
},
[1219040] = {
["encounterName"] = "Soulbinder Naazindhri",
["source"] = "Unbound Mage",
["npcID"] = 237872,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3130,
},
[195473] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shellmaw",
["npcID"] = 91788,
},
[1227227] = {
["encounterName"] = "Loom'ithar",
["source"] = "Loom'ithar",
["encounterID"] = 3131,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 233815,
},
[471760] = {
["source"] = "Venture Scrapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 225716,
},
[160154] = {
["source"] = "Shipwrecked Captive",
["event"] = "SPELL_CAST_START",
["npcID"] = 89111,
},
[448213] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["encounterID"] = 2839,
["event"] = "SPELL_CAST_START",
["npcID"] = 213937,
},
[193938] = {
["event"] = "SPELL_CAST_START",
["source"] = "Unstable Amalgamation",
["npcID"] = 98425,
},
[219020] = {
["source"] = "Mellok, Son of Torok",
["event"] = "SPELL_CAST_START",
["npcID"] = 96621,
},
[455380] = {
["source"] = "Malfunctioning Railbot",
["event"] = "SPELL_CAST_START",
["npcID"] = 218251,
},
[195474] = {
["source"] = "Bonespeaker Mystic",
["event"] = "SPELL_CAST_START",
["npcID"] = 93071,
},
[1231799] = {
["source"] = "Wastelander Wildcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 230624,
},
[223164] = {
["isChanneled"] = true,
["source"] = "Fel Annihilator",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 111652,
},
[198079] = {
["encounterName"] = "Smashspite the Hateful",
["source"] = "Smashspite the Hateful",
["npcID"] = 98949,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1834,
},
[183625] = {
["source"] = "Darkfiend Corruptor",
["event"] = "SPELL_CAST_START",
["npcID"] = 95727,
},
[222604] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lysanis Shadesoul",
["npcID"] = 111939,
},
[219534] = {
["event"] = "SPELL_CAST_START",
["source"] = "Degren",
["npcID"] = 111651,
},
[214415] = {
["source"] = "Inquisitor Tivos",
["event"] = "SPELL_CAST_START",
["npcID"] = 107269,
},
[446230] = {
["encounterName"] = "Undersea Abomination",
["source"] = "Undersea Abomination",
["npcID"] = 214348,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2895,
},
[1219053] = {
["encounterName"] = "Soulbinder Naazindhri",
["source"] = "Unbound Assassin",
["npcID"] = 237871,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3130,
},
[1243630] = {
["encounterName"] = "Ash'Golm",
["source"] = "Ash'golm",
["npcID"] = 95886,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1816,
},
[414433] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lost Legion Doomguard",
["npcID"] = 246553,
},
[1231341] = {
["source"] = "Sha'ryth the Cursed",
["event"] = "SPELL_CAST_START",
["npcID"] = 232006,
},
[222605] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Felsworn Adept",
["npcID"] = 111821,
},
[219022] = {
["source"] = "Sea Skrog Drawing",
["event"] = "SPELL_CAST_START",
["npcID"] = 107300,
},
[1227249] = {
["event"] = "SPELL_CAST_START",
["source"] = "Korgoth the Hungerer",
["npcID"] = 231229,
},
[203666] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Plaguemaw",
["npcID"] = 103045,
},
[449242] = {
["encounterName"] = "Tomb-Raider Drywhisker",
["source"] = "Tomb-Raider Drywhisker",
["encounterID"] = 2878,
["event"] = "SPELL_CAST_START",
["npcID"] = 204188,
},
[444692] = {
["source"] = "Ramolith Stonecrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 221641,
},
[188851] = {
["source"] = "Deathweaver Cassandra",
["event"] = "SPELL_CAST_START",
["npcID"] = 93560,
},
[448219] = {
["source"] = "Colossal Titan Orb",
["event"] = "SPELL_CAST_START",
["npcID"] = 221730,
},
[193941] = {
["event"] = "SPELL_CAST_START",
["source"] = "Embershard Scorpion",
["npcID"] = 98406,
},
[209741] = {
["encounterName"] = "Advisor Melandrus",
["source"] = "Image of Advisor Melandrus",
["encounterID"] = 1870,
["event"] = "SPELL_CAST_START",
["npcID"] = 105754,
},
[215440] = {
["source"] = "Mynta Talonscreech",
["event"] = "SPELL_CAST_START",
["npcID"] = 97593,
},
[445205] = {
["source"] = "Drained Cinderbee",
["event"] = "SPELL_CAST_START",
["npcID"] = 224080,
},
[200084] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ghostly Retainer",
["npcID"] = 98366,
},
[193942] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Unstable Amalgamation",
["npcID"] = 98425,
},
[1231356] = {
["source"] = "Urmag",
["event"] = "SPELL_CAST_START",
["npcID"] = 232195,
},
[210931] = {
["encounterName"] = "Il'gynoth, The Heart of Corruption",
["source"] = "Eye of Il'gynoth",
["npcID"] = 105906,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1873,
},
[1227263] = {
["encounterName"] = "Loom'ithar",
["source"] = "Loom'ithar",
["npcID"] = 233815,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3131,
},
[182681] = {
["source"] = "Ooker Dooker",
["event"] = "SPELL_CAST_START",
["npcID"] = 89082,
},
[219536] = {
["source"] = "Spitespeaker Lir'kess",
["event"] = "SPELL_CAST_START",
["npcID"] = 107525,
},
[222716] = {
["event"] = "SPELL_CAST_START",
["source"] = "Taintheart Befouler",
["npcID"] = 111354,
},
[184380] = {
["source"] = "Lyrathos Darkgrove",
["event"] = "SPELL_CAST_START",
["npcID"] = 92335,
},
[213420] = {
["source"] = "Captain Hring",
["event"] = "SPELL_CAST_START",
["npcID"] = 106981,
},
[221584] = {
["source"] = "Astral Farseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 111170,
},
[199151] = {
["source"] = "Angerhoof Bull",
["event"] = "SPELL_CAST_START",
["npcID"] = 96611,
},
[448854] = {
["source"] = "Burly Contender",
["event"] = "SPELL_CAST_START",
["npcID"] = 217646,
},
[339706] = {
["encounterName"] = "Mordretha",
["source"] = "Echo Bullrider",
["npcID"] = 173549,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2404,
},
[453292] = {
["event"] = "SPELL_CAST_START",
["source"] = "Trungal",
["npcID"] = 220268,
},
[1231345] = {
["isChanneled"] = false,
["source"] = "Empowered Broker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 230550,
},
[198551] = {
["encounterName"] = "Harbaron",
["source"] = "Harbaron",
["npcID"] = 96754,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1823,
},
[1243656] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pactsworn Arcanist",
["npcID"] = 244411,
},
[1227279] = {
["encounterName"] = "Soulbinder Naazindhri",
["source"] = "Soulbinder Naazindhri",
["npcID"] = 233816,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3130,
},
[206459] = {
["encounterName"] = "Cordana Felsong",
["source"] = "Avatar of Shadow",
["npcID"] = 104293,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1818,
},
[206229] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Nameless King",
["npcID"] = 92763,
},
[219026] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glimar Ironfist",
["npcID"] = 91529,
},
[215443] = {
["encounterName"] = "Elerethe Renferal",
["source"] = "Elerethe Renferal",
["npcID"] = 106087,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1876,
},
[1247757] = {
["source"] = "Eternus",
["event"] = "SPELL_CAST_START",
["npcID"] = 248954,
},
[216467] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Humongris",
["npcID"] = 108879,
},
[1225673] = {
["encounterName"] = "Fractillus",
["source"] = "Fractillus",
["npcID"] = 237861,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3133,
},
[470392] = {
["source"] = "Acidic Salvage",
["event"] = "SPELL_CAST_START",
["npcID"] = 225430,
},
[1231344] = {
["source"] = "Empowered Broker",
["event"] = "SPELL_CAST_START",
["npcID"] = 230550,
},
[449251] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Threadmancer",
["npcID"] = 208244,
},
[1243668] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sthaarbs",
["npcID"] = 234845,
},
[1247764] = {
["source"] = "Manifested Timeways",
["event"] = "SPELL_CAST_START",
["npcID"] = 248958,
},
[382708] = {
["npcID"] = 193293,
},
[100060] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Cinderweb Spiderling",
["npcID"] = 53639,
},
[228883] = {
["source"] = "Dark Seraph",
["event"] = "SPELL_CAST_START",
["npcID"] = 114922,
},
[225682] = {
["isChanneled"] = true,
["source"] = "Majestic Elderhorn",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 96410,
},
[215466] = {
["event"] = "SPELL_CAST_START",
["source"] = "Soulfiend Tagerma",
["npcID"] = 108494,
},
[1215015] = {
["encounterName"] = "Torque Clanfire and Sprok",
["source"] = "Sprok",
["encounterID"] = 3140,
["event"] = "SPELL_CAST_START",
["npcID"] = 237552,
},
[198553] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felskorn Cleaver",
["npcID"] = 97825,
},
[443111] = {
["source"] = "Shadowtide Disciple",
["event"] = "SPELL_CAST_START",
["npcID"] = 220844,
},
[156718] = {
["source"] = "Monstrous Corpse Spider",
["event"] = "SPELL_CAST_START",
["npcID"] = 76104,
},
[198577] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tideskorn Worker",
["npcID"] = 108526,
},
[347903] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overloaded Mailemental",
["npcID"] = 176395,
},
[90325] = {
["source"] = "Naga Brute",
["event"] = "SPELL_CAST_START",
["npcID"] = 91459,
},
[199514] = {
["event"] = "SPELL_CAST_START",
["source"] = "Seacursed Mistmender",
["npcID"] = 97365,
},
[1223364] = {
["encounterName"] = "Plexus Sentinel",
["source"] = "Plexus Sentinel",
["encounterID"] = 3129,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 233814,
},
[186269] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blightshard Shaper",
["npcID"] = 90998,
},
[382712] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wilted Oak",
["npcID"] = 186229,
},
[1223211] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Darkmage Zadus",
["npcID"] = 239454,
},
[191900] = {
["encounterName"] = "Warlord Parjesh",
["source"] = "Warlord Parjesh",
["npcID"] = 91784,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1810,
},
[1231403] = {
["encounterName"] = "Loom'ithar",
["source"] = "Loom'ithar",
["npcID"] = 233815,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3131,
},
[426734] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["event"] = "SPELL_CAST_START",
["npcID"] = 211087,
},
[218006] = {
["source"] = "Bonespeaker Cleaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 108939,
},
[457447] = {
["source"] = "Ixlorb the Spinner",
["event"] = "SPELL_CAST_START",
["npcID"] = 218426,
},
[1237071] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stoneborn Slasher",
["npcID"] = 167607,
},
[219542] = {
["source"] = "Drugon the Frostblood",
["event"] = "SPELL_CAST_START",
["npcID"] = 110378,
},
[349954] = {
["encounterName"] = "The Grand Menagerie",
["source"] = "Achillite",
["npcID"] = 176555,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2441,
},
[217495] = {
["source"] = "Infernal Lord",
["event"] = "SPELL_CAST_START",
["npcID"] = 90803,
},
[196508] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Deranged Mindflayer",
["npcID"] = 99657,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1850,
},
[1223222] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkmage Zadus",
["npcID"] = 239454,
},
[1215033] = {
["encounterName"] = "Torque Clanfire and Sprok",
["source"] = "Torque Clankfire",
["encounterID"] = 3140,
["event"] = "SPELL_CAST_START",
["npcID"] = 237554,
},
[326409] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shard of Halkias",
["npcID"] = 164557,
},
[203671] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hill Prince Morg",
["npcID"] = 96068,
},
[203163] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felspite Dominator",
["npcID"] = 102788,
},
[194584] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tideskorn Huntress",
["npcID"] = 100446,
},
[211473] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadow Mistress",
["npcID"] = 104300,
},
[1239906] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Shadowed Fateshaper",
["npcID"] = 242517,
},
[221591] = {
["source"] = "Twilight Stardancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 111164,
},
[222103] = {
["isChanneled"] = false,
["source"] = "Nightmare Amalgamation",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 111398,
},
[198557] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felskorn Cleaver",
["npcID"] = 97825,
},
[202652] = {
["encounterName"] = "Blood-Princess Thal'ena",
["source"] = "Blood-Princess Thal'ena",
["npcID"] = 102431,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1855,
},
[369409] = {
["npcID"] = 184130,
},
[1223235] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Darkmage Zadus",
["npcID"] = 239454,
},
[423664] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_CAST_START",
["npcID"] = 207940,
},
[439506] = {
["encounterName"] = "Anub'zekt",
["source"] = "Anub'zekt",
["npcID"] = 215405,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2906,
},
[228889] = {
["source"] = "Deepbrine Monstrosity",
["event"] = "SPELL_CAST_START",
["npcID"] = 114932,
},
[222104] = {
["isChanneled"] = false,
["source"] = "Nightmare Amalgamation",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 111398,
},
[193951] = {
["event"] = "SPELL_CAST_START",
["source"] = "Barbed Spiderling",
["npcID"] = 97677,
},
[326441] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shard of Halkias",
["npcID"] = 164557,
},
[427376] = {
["source"] = "Gilgoblin Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 40935,
},
[183202] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dread-Rider Malwick",
["npcID"] = 90902,
},
[192073] = {
["encounterName"] = "Warlord Parjesh",
["source"] = "Warlord Parjesh",
["npcID"] = 91784,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1810,
},
[99618] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flamewaker Cauterizer",
["npcID"] = 53121,
},
[201118] = {
["isChanneled"] = true,
["source"] = "Typhinius",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 100760,
},
[214427] = {
["source"] = "Inquisitor Tivos",
["event"] = "SPELL_CAST_START",
["npcID"] = 107269,
},
[1231438] = {
["source"] = "Shadowguard Bulwark",
["event"] = "SPELL_CAST_START",
["npcID"] = 231586,
},
[198559] = {
["event"] = "SPELL_CAST_START",
["source"] = "Muorg",
["npcID"] = 97944,
},
[227736] = {
["encounterName"] = "Moroes",
["source"] = "Moroes",
["encounterID"] = 1961,
["event"] = "SPELL_CAST_START",
["npcID"] = 114312,
},
[1255962] = {
["event"] = "SPELL_CAST_START",
["source"] = "Malaxxar the Frustrated",
["npcID"] = 248169,
},
[1227226] = {
["encounterName"] = "Loom'ithar",
["source"] = "Loom'ithar",
["npcID"] = 233815,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3131,
},
[1235490] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nullbinder",
["npcID"] = 234478,
},
[474018] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voidrider",
["npcID"] = 212786,
},
[1231445] = {
["source"] = "Void Terror",
["event"] = "SPELL_CAST_START",
["npcID"] = 231552,
},
[213743] = {
["source"] = "Golza the Iron Fin",
["event"] = "SPELL_CAST_START",
["npcID"] = 89816,
},
[1227734] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-King Salhadaar",
["npcID"] = 237763,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3134,
},
[227737] = {
["encounterName"] = "Moroes",
["source"] = "Moroes",
["encounterID"] = 1961,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 114312,
},
[257426] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Enforcer",
["npcID"] = 129602,
},
[1227355] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Adarus Duskblaze",
["npcID"] = 237661,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3122,
},
[323137] = {
["encounterName"] = "Ingra Maloch",
["source"] = "Droman Oulfarran",
["npcID"] = 164804,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2397,
},
[1215023] = {
["encounterName"] = "Torque Clanfire and Sprok",
["source"] = "Torque Clankfire",
["encounterID"] = 3140,
["event"] = "SPELL_CAST_START",
["npcID"] = 237554,
},
[216342] = {
["event"] = "SPELL_CAST_START",
["source"] = "Koralune Ettin",
["npcID"] = 99791,
},
[218624] = {
["isChanneled"] = true,
["source"] = "Netherflame Infernal",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 107328,
},
[1239356] = {
["source"] = "Risen Skulker",
["event"] = "SPELL_CAST_START",
["npcID"] = 99541,
},
[283422] = {
["encounterName"] = "Tussle Tonks",
["source"] = "Gnomercy 4.U.",
["npcID"] = 145185,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2257,
},
[183205] = {
["source"] = "Eredar Navigator",
["event"] = "SPELL_CAST_START",
["npcID"] = 107267,
},
[457460] = {
["source"] = "Ixlorb the Spinner",
["event"] = "SPELL_CAST_START",
["npcID"] = 218426,
},
[197546] = {
["encounterName"] = "Ilysanna Ravencrest",
["source"] = "Illysanna Ravencrest",
["npcID"] = 98696,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1833,
},
[389572] = {
["event"] = "SPELL_CAST_START",
["source"] = "Soaring Devilfish",
["npcID"] = 246733,
},
[59638] = {
["source"] = "Mirror Image",
["event"] = "SPELL_CAST_START",
["npcID"] = 31216,
},
[456438] = {
["event"] = "SPELL_CAST_START",
["source"] = "Warped Reaver",
["npcID"] = 225342,
},
[39419] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mire Hydra",
["npcID"] = 18213,
},
[1215084] = {
["encounterName"] = "Torque Clanfire and Sprok",
["source"] = "Sprok",
["encounterID"] = 3140,
["event"] = "SPELL_CAST_START",
["npcID"] = 237552,
},
[448248] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodstained Webmage",
["npcID"] = 223253,
},
[445191] = {
["source"] = "Spitfire Charger",
["event"] = "SPELL_CAST_START",
["npcID"] = 213577,
},
[196515] = {
["event"] = "SPELL_CAST_START",
["source"] = "Binder Ashioi",
["npcID"] = 100250,
},
[369563] = {
["encounterName"] = "The Lost Dwarves",
["npcID"] = 184581,
["encounterID"] = 2555,
},
[203176] = {
["encounterName"] = "Advisor Vandros",
["source"] = "Advisor Vandros",
["npcID"] = 98208,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1829,
},
[227228] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fal'dorei Webspinner",
["npcID"] = 105686,
},
[202658] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Malignant Defiler",
["npcID"] = 102584,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1850,
},
[424704] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fungal Gutter",
["npcID"] = 207454,
},
[188927] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfiend Dreamtwister",
["npcID"] = 92788,
},
[200099] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ghostly Protector",
["npcID"] = 98368,
},
[196516] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ritualist Lesha",
["npcID"] = 100248,
},
[201123] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vilethorn Blossom",
["npcID"] = 99360,
},
[222110] = {
["source"] = "Shadow Pounder",
["event"] = "SPELL_CAST_START",
["npcID"] = 111405,
},
[207261] = {
["encounterName"] = "Patrol Captain Gerdo",
["source"] = "Patrol Captain Gerdo",
["npcID"] = 104215,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1868,
},
[202659] = {
["encounterName"] = "Blood-Princess Thal'ena",
["source"] = "Blood-Princess Thal'ena",
["npcID"] = 102431,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1855,
},
[195493] = {
["event"] = "SPELL_CAST_START",
["source"] = "Runeseer Sigvid",
["npcID"] = 109318,
},
[415492] = {
["encounterName"] = "Shroomspew",
["source"] = "Shroomsprew",
["npcID"] = 237481,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3139,
},
[98868] = {
["encounterName"] = "Alysrazor",
["source"] = "Blazing Talon Initiate",
["npcID"] = 53369,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1206,
},
[1243771] = {
["encounterName"] = "Loom'ithar",
["source"] = "Loom'ithar",
["npcID"] = 233815,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3131,
},
[1243769] = {
["encounterName"] = "Glazer",
["source"] = "Glazer",
["npcID"] = 95887,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1817,
},
[222623] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lysanis Shadesoul",
["npcID"] = 111939,
},
[449277] = {
["source"] = "General Emmerich",
["event"] = "SPELL_CAST_START",
["npcID"] = 215371,
},
[202663] = {
["encounterName"] = "Glazer",
["source"] = "Fel Scorcher",
["npcID"] = 102583,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1817,
},
[223647] = {
["encounterName"] = "Cenarius",
["source"] = "Haunting Nightmare",
["encounterID"] = 1877,
["event"] = "SPELL_CAST_START",
["npcID"] = 112320,
},
[228254] = {
["source"] = "Forlorn Spirit",
["event"] = "SPELL_CAST_START",
["npcID"] = 114626,
},
[222996] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowfeather",
["npcID"] = 111975,
},
[1231477] = {
["source"] = "Void Terror",
["event"] = "SPELL_CAST_START",
["npcID"] = 231552,
},
[465966] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Waterworks Bottomfeeder",
["npcID"] = 231312,
},
[211874] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Priestess of Misery",
["npcID"] = 105706,
},
[203685] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Mogu'shan Secret-Keeper",
["npcID"] = 99676,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1850,
},
[202661] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Fel Scorcher",
["npcID"] = 102583,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1850,
},
[99555] = {
["source"] = "Molten Lord",
["event"] = "SPELL_CAST_START",
["npcID"] = 53115,
},
[390926] = {
["source"] = "Candlelit Big-Boomer",
["event"] = "SPELL_CAST_START",
["npcID"] = 211546,
},
[215458] = {
["encounterName"] = "Spellblade Aluriel",
["source"] = "Spellblade Aluriel",
["encounterID"] = 1871,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 104881,
},
[456171] = {
["source"] = "Urmag",
["event"] = "SPELL_CAST_START",
["npcID"] = 232195,
},
[200105] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ghostly Protector",
["npcID"] = 98368,
},
[1231501] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Velaryn Bloodwrath",
["npcID"] = 237660,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3122,
},
[222719] = {
["event"] = "SPELL_CAST_START",
["source"] = "Taintheart Befouler",
["npcID"] = 111354,
},
[1239732] = {
["source"] = "Entropic Soul",
["event"] = "SPELL_CAST_START",
["npcID"] = 231164,
},
[430036] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Kobyss Spearfisher",
["npcID"] = 214338,
},
[191401] = {
["event"] = "SPELL_CAST_START",
["source"] = "Valarjar Marksman",
["npcID"] = 96640,
},
[1231506] = {
["source"] = "Wastelander Dunewraith",
["event"] = "SPELL_CAST_START",
["npcID"] = 230621,
},
[211875] = {
["event"] = "SPELL_CAST_START",
["source"] = "Priestess of Misery",
["npcID"] = 105706,
},
[450509] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Captain",
["npcID"] = 216584,
},
[218019] = {
["source"] = "Runebound Stonewarden",
["event"] = "SPELL_CAST_START",
["npcID"] = 93344,
},
[205108] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Felstalker Ravener",
["npcID"] = 102369,
},
[227233] = {
["encounterName"] = "Helya",
["source"] = "Helya",
["npcID"] = 96759,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1824,
},
[1221190] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ravenous Destroyer",
["npcID"] = 236995,
},
[199589] = {
["event"] = "SPELL_CAST_START",
["source"] = "Helarjar Mistcaller",
["npcID"] = 99033,
},
[99625] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flamewaker Cauterizer",
["npcID"] = 53639,
},
[181535] = {
["source"] = "Hatecoil Skrog",
["event"] = "SPELL_CAST_START",
["npcID"] = 89802,
},
[20801] = {
["source"] = "Lost Legion Imp",
["event"] = "SPELL_CAST_START",
["npcID"] = 246550,
},
[218020] = {
["event"] = "SPELL_CAST_START",
["source"] = "Agitated Stonewarden",
["npcID"] = 108856,
},
[220437] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tideclaw",
["npcID"] = 110824,
},
[468726] = {
["event"] = "SPELL_CAST_START",
["source"] = "Venture Co. Diver",
["npcID"] = 231496,
},
[182701] = {
["source"] = "Boss Whalebelly",
["event"] = "SPELL_CAST_START",
["npcID"] = 89050,
},
[228368] = {
["source"] = "Helhound",
["event"] = "SPELL_CAST_START",
["npcID"] = 114534,
},
[465666] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Jumpstarter",
["npcID"] = 231325,
},
[193566] = {
["encounterName"] = "Ymiron, the Fallen King",
["source"] = "Ymiron, the Fallen King",
["npcID"] = 96756,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1822,
},
[221604] = {
["source"] = "Twilight Stardancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 111164,
},
[472833] = {
["source"] = "Bomb Bot",
["event"] = "SPELL_CAST_START",
["npcID"] = 231928,
},
[186415] = {
["isChanneled"] = true,
["source"] = "Warbringer Mox'na",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 90164,
},
[219045] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ana-Mouz",
["npcID"] = 109943,
},
[1229474] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overgorged Mite",
["npcID"] = 242209,
},
[211775] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadborne Seer",
["npcID"] = 105651,
},
[326438] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Shard of Halkias",
["npcID"] = 164557,
},
[79850] = {
["source"] = "Lady Sssurine",
["event"] = "SPELL_CAST_START",
["npcID"] = 89199,
},
[471811] = {
["source"] = "Underrider Pyromaniac",
["event"] = "SPELL_CAST_START",
["npcID"] = 230665,
},
[204042] = {
["source"] = "Mo'arg Crusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 103176,
},
[212008] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wyrmtongue Scavenger",
["npcID"] = 105629,
},
[221241] = {
["source"] = "Blast Waves",
["event"] = "SPELL_CAST_START",
["npcID"] = 111116,
},
[440195] = {
["source"] = "Shadow Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 220575,
},
[169929] = {
["encounterName"] = "Yalnu",
["source"] = "Gnarled Ancient",
["encounterID"] = 1756,
["event"] = "SPELL_CAST_START",
["npcID"] = 84400,
},
[1237695] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Pargoth",
["npcID"] = 245222,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3135,
},
[217583] = {
["source"] = "Nightborne Foehunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 106782,
},
[1231540] = {
["source"] = "Sufaadi Soulbinder",
["event"] = "SPELL_CAST_START",
["npcID"] = 230354,
},
[349987] = {
["encounterName"] = "The Grand Menagerie",
["source"] = "Achillite",
["npcID"] = 176555,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2441,
},
[1231542] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Budding Silkgrub",
["npcID"] = 241304,
},
[219047] = {
["source"] = "Mellok, Son of Torok",
["event"] = "SPELL_CAST_START",
["npcID"] = 96621,
},
[217516] = {
["source"] = "Rulf Bonesnapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 109317,
},
[191524] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blade Dancer Illianna",
["npcID"] = 96657,
},
[15586] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bilgefin Tideseer",
["npcID"] = 98500,
},
[194501] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ironbranch",
["npcID"] = 93030,
},
[1219263] = {
["encounterName"] = "Plexus Sentinel",
["source"] = "Plexus Sentinel",
["npcID"] = 233814,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3129,
},
[427357] = {
["source"] = "Devout Priest",
["event"] = "SPELL_CAST_START",
["npcID"] = 206697,
},
[468841] = {
["encounterName"] = "Geezle Gigazap",
["source"] = "Geezle Gigazap",
["npcID"] = 226404,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3054,
},
[214424] = {
["source"] = "Storm's Reach Cliffwalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 107020,
},
[446416] = {
["source"] = "Honey-Fused Droplet",
["event"] = "SPELL_CAST_START",
["npcID"] = 213697,
},
[446615] = {
["source"] = "Nightfall Dark Architect",
["event"] = "SPELL_CAST_START",
["npcID"] = 213885,
},
[265019] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chosen Blood Matron",
["npcID"] = 131436,
},
[356133] = {
["source"] = "Burly Deckhand",
["event"] = "SPELL_CAST_START",
["npcID"] = 180015,
},
[219029] = {
["source"] = "Senegos Drawing",
["event"] = "SPELL_CAST_START",
["npcID"] = 107299,
},
[317231] = {
["encounterName"] = "Xav the Unfallen",
["source"] = "Xav the Unfallen",
["npcID"] = 162329,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2366,
},
[449295] = {
["encounterName"] = "Tomb-Raider Drywhisker",
["source"] = "Tomb-Raider Drywhisker",
["encounterID"] = 2878,
["event"] = "SPELL_CAST_START",
["npcID"] = 204188,
},
[219049] = {
["encounterName"] = "High Botanist Tel'arn",
["source"] = "Naturalist Tel'arn",
["encounterID"] = 1886,
["event"] = "SPELL_CAST_START",
["npcID"] = 109041,
},
[182706] = {
["source"] = "Prince Oceanus",
["event"] = "SPELL_CAST_START",
["npcID"] = 89101,
},
[472842] = {
["source"] = "Bomb Bot",
["event"] = "SPELL_CAST_START",
["npcID"] = 231928,
},
[179101] = {
["source"] = "Lady Sssurine",
["event"] = "SPELL_CAST_START",
["npcID"] = 89199,
},
[1243673] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sthaarbs",
["npcID"] = 234845,
},
[182172] = {
["source"] = "Fiendish Trickster",
["event"] = "SPELL_CAST_START",
["npcID"] = 107545,
},
[374563] = {
["npcID"] = 190362,
},
[157241] = {
["source"] = "Vengeful Soul",
["event"] = "SPELL_CAST_START",
["npcID"] = 107625,
},
[1231567] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Arcane Collector",
["npcID"] = 240905,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3132,
},
[1227259] = {
["event"] = "SPELL_CAST_START",
["source"] = "Korgoth the Hungerer",
["npcID"] = 231229,
},
[181477] = {
["isChanneled"] = true,
["source"] = "Ancient Sentry Construct",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 104640,
},
[1239281] = {
["encounterName"] = "Taah'bat and A'wazj",
["source"] = "A'wazj",
["npcID"] = 237514,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3108,
},
[388897] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepwater Snapper",
["npcID"] = 214550,
},
[209325] = {
["source"] = "Nightglaive the Traitor",
["event"] = "SPELL_CAST_START",
["npcID"] = 90621,
},
[464655] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mechadrone Sniper",
["npcID"] = 229069,
},
[213126] = {
["source"] = "Eye of Keletress",
["event"] = "SPELL_CAST_START",
["npcID"] = 105259,
},
[194966] = {
["encounterName"] = "Amalgam of Souls",
["source"] = "Amalgam of Souls",
["npcID"] = 98542,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1832,
},
[207278] = {
["encounterName"] = "Patrol Captain Gerdo",
["source"] = "Patrol Captain Gerdo",
["npcID"] = 104215,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1868,
},
[448276] = {
["source"] = "Fungarian Sporeflinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 218667,
},
[326450] = {
["event"] = "SPELL_CAST_START",
["source"] = "Depraved Houndmaster",
["npcID"] = 164562,
},
[347949] = {
["encounterName"] = "Zo'phex the Sentinel",
["source"] = "Zo'phex",
["npcID"] = 175616,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2425,
},
[205231] = {
["source"] = "Darkglare",
["event"] = "SPELL_CAST_START",
["npcID"] = 103673,
},
[1227631] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Forgeweaver Araz",
["npcID"] = 233817,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3132,
},
[416139] = {
["encounterName"] = "Chrono-Lord Deios",
["source"] = "Chrono-Lord Deios",
["event"] = "SPELL_CAST_START",
["npcID"] = 199000,
},
[194482] = {
["event"] = "SPELL_CAST_START",
["source"] = "Priestess of Eyir",
["npcID"] = 94856,
},
[226737] = {
["source"] = "Elfbane",
["event"] = "SPELL_CAST_START",
["npcID"] = 99792,
},
[355057] = {
["source"] = "Murkbrine Shellcrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 178139,
},
[465682] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Inspector",
["npcID"] = 231385,
},
[83017] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lyrath Moonfeather",
["npcID"] = 98241,
},
[99530] = {
["source"] = "Molten Lord",
["event"] = "SPELL_CAST_START",
["npcID"] = 53115,
},
[326389] = {
["encounterName"] = "Echelon",
["source"] = "Echelon",
["npcID"] = 164185,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2380,
},
[199061] = {
["encounterName"] = "Ymiron, the Fallen King",
["source"] = "Enslaved Shieldmaiden",
["npcID"] = 102104,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1822,
},
[202181] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rockback Gnasher",
["npcID"] = 91006,
},
[199090] = {
["event"] = "SPELL_CAST_START",
["source"] = "Angerhoof Bull",
["npcID"] = 96611,
},
[349934] = {
["encounterName"] = "The Grand Menagerie",
["source"] = "Achillite",
["npcID"] = 176555,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2441,
},
[216494] = {
["source"] = "Fenri",
["event"] = "SPELL_CAST_START",
["npcID"] = 92040,
},
[211958] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wyrmtongue Scavenger",
["npcID"] = 105629,
},
[443162] = {
["event"] = "SPELL_CAST_START",
["source"] = "Devouring Shade",
["npcID"] = 217870,
},
[193460] = {
["encounterName"] = "Ymiron, the Fallen King",
["source"] = "Ymiron, the Fallen King",
["npcID"] = 96756,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1822,
},
[445210] = {
["source"] = "Spitfire Charger",
["event"] = "SPELL_CAST_START",
["npcID"] = 213577,
},
[205089] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Blazing Infernal",
["npcID"] = 102398,
},
[211995] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wyrmtongue Scavenger",
["npcID"] = 105629,
},
[214553] = {
["source"] = "Arcanist Shal'iman",
["event"] = "SPELL_CAST_START",
["npcID"] = 107657,
},
[1239792] = {
["source"] = "Relictor Efrat",
["event"] = "SPELL_CAST_START",
["npcID"] = 237790,
},
[474337] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shreddinator 3000",
["npcID"] = 230740,
},
[201139] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wrathguard Bladelord",
["npcID"] = 98810,
},
[211785] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felguard Destroyer",
["npcID"] = 105682,
},
[214448] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Highlands Runehorn",
["npcID"] = 108538,
},
[1215227] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkmage Zadus",
["npcID"] = 239454,
},
[226296] = {
["source"] = "Vileshard Hulk",
["event"] = "SPELL_CAST_START",
["npcID"] = 91000,
},
[99503] = {
["source"] = "Lava Wielder",
["event"] = "SPELL_CAST_START",
["npcID"] = 53575,
},
[1221207] = {
["source"] = "Shadowguard Adept",
["event"] = "SPELL_CAST_START",
["npcID"] = 231584,
},
[196027] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Arcanist",
["npcID"] = 97171,
},
[98034] = {
["encounterName"] = "Lord Rhyolith",
["source"] = "Lord Rhyolith",
["npcID"] = 52558,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1204,
},
[7978] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zany Goblin",
["npcID"] = 221982,
},
[441119] = {
["source"] = "Bee Wrangler",
["event"] = "SPELL_CAST_START",
["npcID"] = 210264,
},
[347958] = {
["encounterName"] = "Hylbrande",
["source"] = "Vault Purifier",
["encounterID"] = 2426,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 176551,
},
[426787] = {
["encounterName"] = "Anub'ikkaj",
["source"] = "Anub'ikkaj",
["encounterID"] = 2838,
["event"] = "SPELL_CAST_START",
["npcID"] = 211089,
},
[1232973] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Dimensius",
["npcID"] = 233824,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3135,
},
[211975] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wyrmtongue Scavenger",
["npcID"] = 105629,
},
[196534] = {
["encounterName"] = "Helya",
["source"] = "Destructor Tentacle",
["encounterID"] = 1824,
["event"] = "SPELL_CAST_START",
["npcID"] = 99801,
},
[201141] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Wrathguard Bladelord",
["npcID"] = 98810,
},
[197558] = {
["encounterName"] = "Fenryr",
["source"] = "Fenryr",
["npcID"] = 95674,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1807,
},
[1228238] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Velaryn Bloodwrath",
["npcID"] = 237660,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3122,
},
[196916] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lady Velandras Ravencrest",
["npcID"] = 98538,
},
[1227529] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-King Salhadaar",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 237763,
},
[164357] = {
["encounterName"] = "Witherbark",
["source"] = "Witherbark",
["encounterID"] = 1746,
["event"] = "SPELL_CAST_START",
["npcID"] = 81522,
},
[359222] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Unruly Patron",
["npcID"] = 176561,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2440,
},
[388911] = {
["npcID"] = 196577,
},
[350922] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Oasis Security",
["npcID"] = 179269,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2440,
},
[1248009] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Forgeweaver Araz",
["npcID"] = 233817,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3132,
},
[198752] = {
["event"] = "SPELL_CAST_START",
["source"] = "Seacursed Slaver",
["npcID"] = 97043,
},
[194488] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tideskorn Shieldmaiden",
["npcID"] = 93584,
},
[193597] = {
["encounterName"] = "Lady Hatecoil",
["source"] = "Lady Hatecoil",
["npcID"] = 91789,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1811,
},
[195512] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Felskorn Raider",
["npcID"] = 96129,
},
[211994] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wyrmtongue Scavenger",
["npcID"] = 105629,
},
[225201] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sanaar",
["npcID"] = 105739,
},
[257756] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bilge Rat Buccaneer",
["npcID"] = 129527,
},
[226687] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Glitterpool Heron",
["npcID"] = 113707,
},
[99052] = {
["encounterName"] = "Beth'tilac",
["source"] = "Beth'tilac",
["npcID"] = 52498,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1197,
},
[267354] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hired Assassin",
["npcID"] = 134232,
},
[1227117] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Ilyssa Darksorrow",
["npcID"] = 237662,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3122,
},
[228273] = {
["encounterName"] = "Maiden of Virtue",
["source"] = "Spectral Sentry",
["encounterID"] = 1954,
["event"] = "SPELL_CAST_START",
["npcID"] = 114637,
},
[199726] = {
["event"] = "SPELL_CAST_START",
["source"] = "King Ranulf",
["npcID"] = 97083,
},
[79831] = {
["source"] = "Golden Xue",
["event"] = "SPELL_CAST_START",
["npcID"] = 88932,
},
[356929] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tracker Zo'korss",
["npcID"] = 179837,
},
[433410] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chittering Fearmonger",
["npcID"] = 216583,
},
[1243931] = {
["source"] = "Voidglass Swooper",
["event"] = "SPELL_CAST_START",
["npcID"] = 230429,
},
[31707] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wasserelementar",
["npcID"] = 208441,
},
[369465] = {
["npcID"] = 186420,
},
[438973] = {
["source"] = "Pit Lord",
["event"] = "SPELL_CAST_START",
["npcID"] = 228574,
},
[449318] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Darkcaster",
["npcID"] = 208242,
},
[219858] = {
["source"] = "Bahagar",
["event"] = "SPELL_CAST_START",
["npcID"] = 110562,
},
[471841] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Waterworks Bottomfeeder",
["npcID"] = 231312,
},
[181536] = {
["source"] = "Hatecoil Skrog",
["event"] = "SPELL_CAST_START",
["npcID"] = 89802,
},
[432135] = {
["source"] = "Waterworks Opportunist",
["event"] = "SPELL_CAST_START",
["npcID"] = 222867,
},
[219061] = {
["source"] = "Mal'Dreth the Corruptor",
["event"] = "SPELL_CAST_START",
["npcID"] = 110024,
},
[322711] = {
["encounterName"] = "Halkias, the Sin-Stained Goliath",
["source"] = "Halkias",
["npcID"] = 165408,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2401,
},
[350796] = {
["encounterName"] = "So'leah",
["source"] = "So'leah",
["encounterID"] = 2442,
["event"] = "SPELL_CAST_START",
["npcID"] = 177269,
},
[1215278] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowguard Soldier",
["npcID"] = 234050,
},
[196157] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Shadowmoon Technician",
["npcID"] = 99645,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1850,
},
[1231660] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lesser Eye",
["npcID"] = 242901,
},
[472153] = {
["source"] = "Venture Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 238624,
},
[216194] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flamescale",
["npcID"] = 97793,
},
[186302] = {
["source"] = "Helhound",
["event"] = "SPELL_CAST_START",
["npcID"] = 91384,
},
[199674] = {
["event"] = "SPELL_CAST_START",
["source"] = "King Bjorn",
["npcID"] = 97081,
},
[349498] = {
["encounterName"] = "The Grand Menagerie",
["source"] = "Alcruux",
["npcID"] = 176556,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2441,
},
[346947] = {
["encounterName"] = "Mailroom Mayhem",
["source"] = "P.O.S.T. Master",
["npcID"] = 175646,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2424,
},
[212920] = {
["source"] = "Pollous the Fetid",
["event"] = "SPELL_CAST_START",
["npcID"] = 94485,
},
[217527] = {
["source"] = "Infernal Lord",
["event"] = "SPELL_CAST_START",
["npcID"] = 90803,
},
[197564] = {
["source"] = "Witch of the Wood",
["event"] = "SPELL_CAST_START",
["npcID"] = 95311,
},
[451543] = {
["source"] = "Eye of the Queen",
["event"] = "SPELL_CAST_START",
["npcID"] = 220003,
},
[1235766] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stoneborn Reaver",
["npcID"] = 167612,
},
[1216557] = {
["source"] = "Darkfuse Smuggler",
["event"] = "SPELL_CAST_START",
["npcID"] = 232777,
},
[183232] = {
["source"] = "Darkfiend Dreamworg",
["event"] = "SPELL_CAST_START",
["npcID"] = 91645,
},
[355139] = {
["source"] = "Invigorating Fish Stick",
["event"] = "SPELL_CAST_START",
["npcID"] = 179733,
},
[167012] = {
["source"] = "Lord Tash'irel",
["event"] = "SPELL_CAST_START",
["npcID"] = 107696,
},
[201148] = {
["encounterName"] = "Mindflayer Kaahrj",
["source"] = "Mindflayer Kaahrj",
["npcID"] = 101950,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1846,
},
[412129] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lerai, Timesworn Maiden",
["npcID"] = 205152,
},
[198077] = {
["encounterName"] = "Odyn",
["source"] = "Odyn",
["npcID"] = 95676,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1809,
},
[401209] = {
["event"] = "SPELL_CAST_START",
["source"] = "Oblivious Shaleshell",
["npcID"] = 217123,
},
[209033] = {
["event"] = "SPELL_CAST_START",
["source"] = "Duskwatch Guard",
["npcID"] = 111563,
},
[183233] = {
["source"] = "Morphael",
["event"] = "SPELL_CAST_START",
["npcID"] = 91045,
},
[188763] = {
["event"] = "SPELL_CAST_START",
["source"] = "Soultorn Jailer",
["npcID"] = 103363,
},
[200637] = {
["encounterName"] = "Dargrul the Underking",
["source"] = "Dargrul",
["npcID"] = 91007,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1793,
},
[438823] = {
["source"] = "Diabolic Imp",
["event"] = "SPELL_CAST_START",
["npcID"] = 219161,
},
[226231] = {
["source"] = "Astral Farseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 111170,
},
[193983] = {
["encounterName"] = "God-King Skovald",
["source"] = "God-King Skovald",
["npcID"] = 95675,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1808,
},
[210875] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stormforged Sentinel",
["npcID"] = 96574,
},
[207292] = {
["isChanneled"] = false,
["source"] = "Obsidian Deathwarder",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 125951,
},
[228279] = {
["encounterName"] = "Moroes",
["source"] = "Spectral Attendant",
["encounterID"] = 1961,
["event"] = "SPELL_CAST_START",
["npcID"] = 114632,
},
[196031] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Wavebinder",
["npcID"] = 97170,
},
[196543] = {
["encounterName"] = "Fenryr",
["source"] = "Fenryr",
["npcID"] = 95674,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1807,
},
[197942] = {
["encounterName"] = "Ursoc",
["source"] = "Ursoc",
["encounterID"] = 1841,
["event"] = "SPELL_CAST_START",
["npcID"] = 100497,
},
[39592] = {
["source"] = "Summoned Searing Totem",
["event"] = "SPELL_CAST_START",
["npcID"] = 110730,
},
[185794] = {
["event"] = "SPELL_CAST_START",
["source"] = "Burning Hellion",
["npcID"] = 90660,
},
[186306] = {
["source"] = "Daggerbeak",
["event"] = "SPELL_CAST_START",
["npcID"] = 90057,
},
[1216826] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Darkfuse Hyena",
["encounterID"] = 3020,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 230748,
},
[228280] = {
["source"] = "Spectral Retainer",
["event"] = "SPELL_CAST_START",
["npcID"] = 114629,
},
[221723] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eternal Groom",
["npcID"] = 91757,
},
[221114] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ranger General Feleor",
["npcID"] = 110995,
},
[267551] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coin-Operated Crowd Pummeler",
["npcID"] = 129214,
},
[203609] = {
["source"] = "Vizznak",
["event"] = "SPELL_CAST_START",
["npcID"] = 97968,
},
[445236] = {
["source"] = "Colossal Eel",
["event"] = "SPELL_CAST_START",
["npcID"] = 224621,
},
[1225582] = {
["encounterName"] = "Soulbinder Naazindhri",
["source"] = "Soulbinder Naazindhri",
["npcID"] = 233816,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3130,
},
[207294] = {
["source"] = "Obsidian Deathwarder",
["event"] = "SPELL_CAST_START",
["npcID"] = 125951,
},
[207806] = {
["encounterName"] = "Patrol Captain Gerdo",
["source"] = "Patrol Captain Gerdo",
["npcID"] = 104215,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1868,
},
[346957] = {
["encounterName"] = "Hylbrande",
["source"] = "Titanic Defense Turret",
["encounterID"] = 2426,
["event"] = "SPELL_CAST_START",
["npcID"] = 175667,
},
[213836] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fal'dorei Silkwitch",
["npcID"] = 105752,
},
[80117] = {
["source"] = "Burrowing Leyworm",
["event"] = "SPELL_CAST_START",
["npcID"] = 106630,
},
[1221152] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voracious Gorger",
["npcID"] = 234883,
},
[451064] = {
["event"] = "SPELL_CAST_START",
["source"] = "Amber Honeyslime",
["npcID"] = 222846,
},
[1239901] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowed Fateshaper",
["npcID"] = 242517,
},
[357196] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cartel Wiseguy",
["npcID"] = 180336,
},
[203712] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hill Prince Urgo",
["npcID"] = 96070,
},
[220604] = {
["event"] = "SPELL_CAST_START",
["source"] = "Uzgarogg the Seer",
["npcID"] = 104244,
},
[391723] = {
["npcID"] = 197697,
},
[201153] = {
["encounterName"] = "Mindflayer Kaahrj",
["source"] = "Mindflayer Kaahrj",
["npcID"] = 101950,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1846,
},
[1239907] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Shadowed Fateshaper",
["npcID"] = 242517,
},
[387910] = {
["npcID"] = 196200,
},
[210879] = {
["encounterName"] = "Fel Lord Betrug",
["source"] = "Fel Lord Betrug",
["npcID"] = 102446,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1856,
},
[1231720] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Forgeweaver Araz",
["npcID"] = 233817,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3132,
},
[340160] = {
["source"] = "Mistveil Matriarch",
["event"] = "SPELL_CAST_START",
["npcID"] = 173655,
},
[204225] = {
["source"] = "Felguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 109725,
},
[200642] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadsoul Ruiner",
["npcID"] = 95771,
},
[88308] = {
["encounterName"] = "Altairus",
["source"] = "Altairus",
["npcID"] = 43873,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1041,
},
[420509] = {
["isChanneled"] = true,
["source"] = "Dungeoneer's Training Dummy",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 246553,
},
[351057] = {
["encounterName"] = "So'leah",
["source"] = "So'leah",
["encounterID"] = 2442,
["event"] = "SPELL_CAST_START",
["npcID"] = 177269,
},
[194500] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ironbranch",
["npcID"] = 93030,
},
[187207] = {
["source"] = "Stormbreaker Reykir",
["event"] = "SPELL_CAST_START",
["npcID"] = 91517,
},
[200658] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadsoul Ruiner",
["npcID"] = 95771,
},
[220606] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Poisonous Slime",
["npcID"] = 106340,
},
[183132] = {
["source"] = "Questioner Arev'naal",
["event"] = "SPELL_CAST_START",
["npcID"] = 89673,
},
[427469] = {
["source"] = "Fanatical Conjuror",
["event"] = "SPELL_CAST_START",
["npcID"] = 206698,
},
[192094] = {
["encounterName"] = "Warlord Parjesh",
["source"] = "Warlord Parjesh",
["npcID"] = 91784,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1810,
},
[449339] = {
["encounterName"] = "Tomb-Raider Drywhisker",
["source"] = "Tomb-Raider Drywhisker",
["encounterID"] = 2878,
["event"] = "SPELL_CAST_START",
["npcID"] = 204188,
},
[1219450] = {
["encounterName"] = "Plexus Sentinel",
["source"] = "Plexus Sentinel",
["npcID"] = 233814,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3129,
},
[219583] = {
["source"] = "Belphiar",
["event"] = "SPELL_CAST_START",
["npcID"] = 109397,
},
[221352] = {
["source"] = "First Mate Oxswain",
["event"] = "SPELL_CAST_START",
["npcID"] = 108137,
},
[182844] = {
["source"] = "Magula",
["event"] = "SPELL_CAST_START",
["npcID"] = 91130,
},
[220522] = {
["event"] = "SPELL_CAST_START",
["source"] = "Apothecary Faldren",
["npcID"] = 110870,
},
[446300] = {
["encounterName"] = "Undersea Abomination",
["source"] = "Undersea Abomination",
["npcID"] = 214348,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2895,
},
[460602] = {
["encounterName"] = "Demolition Duo",
["source"] = "Keeza Quickfuse",
["npcID"] = 226403,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3019,
},
[1226950] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowguard Infuser",
["npcID"] = 241304,
},
[200913] = {
["source"] = "Wyrmtongue Scavenger",
["event"] = "SPELL_CAST_START",
["npcID"] = 98792,
},
[1224906] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-King Salhadaar",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 237763,
},
[194112] = {
["encounterName"] = "God-King Skovald",
["source"] = "God-King Skovald",
["npcID"] = 95675,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1808,
},
[1216687] = {
["source"] = "The Gobfather",
["event"] = "SPELL_CAST_START",
["npcID"] = 231821,
},
[198263] = {
["encounterName"] = "Odyn",
["source"] = "Odyn",
["npcID"] = 95676,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1809,
},
[13860] = {
["event"] = "SPELL_CAST_START",
["source"] = "Monstrous Larva",
["npcID"] = 240091,
},
[219813] = {
["source"] = "Na'zak the Fiend",
["event"] = "SPELL_CAST_START",
["npcID"] = 110321,
},
[424773] = {
["source"] = "Gnarled Reviver",
["event"] = "SPELL_CAST_START",
["npcID"] = 207468,
},
[206788] = {
["encounterName"] = "Trilliax",
["source"] = "Trilliax",
["encounterID"] = 1867,
["event"] = "SPELL_CAST_START",
["npcID"] = 104288,
},
[207300] = {
["event"] = "SPELL_CAST_START",
["source"] = "Selenyi",
["npcID"] = 104522,
},
[194038] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gleamhoof Stag",
["npcID"] = 93313,
},
[219349] = {
["source"] = "Na'zak the Fiend",
["event"] = "SPELL_CAST_START",
["npcID"] = 110321,
},
[195284] = {
["event"] = "SPELL_CAST_START",
["source"] = "Restless Tides",
["npcID"] = 97173,
},
[435012] = {
["encounterName"] = "Anub'zekt",
["source"] = "Anub'zekt",
["npcID"] = 215405,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2906,
},
[1254720] = {
["source"] = "Infinite Magus",
["event"] = "SPELL_CAST_START",
["npcID"] = 249019,
},
[350875] = {
["encounterName"] = "So'leah",
["source"] = "So'leah",
["encounterID"] = 2442,
["event"] = "SPELL_CAST_START",
["npcID"] = 177269,
},
[436322] = {
["event"] = "SPELL_CAST_START",
["source"] = "Atik",
["npcID"] = 217533,
},
[176718] = {
["source"] = "Smolderhide Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 93578,
},
[195528] = {
["event"] = "SPELL_CAST_START",
["source"] = "Animated Storm",
["npcID"] = 95920,
},
[1219477] = {
["source"] = "Propaganda Pusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 225826,
},
[193668] = {
["encounterName"] = "God-King Skovald",
["source"] = "God-King Skovald",
["npcID"] = 95675,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1808,
},
[221634] = {
["event"] = "SPELL_CAST_START",
["source"] = "Braxas the Fleshcarver",
["npcID"] = 111290,
},
[51797] = {
["source"] = "Drowned Magister",
["event"] = "SPELL_CAST_START",
["npcID"] = 87368,
},
[445252] = {
["isChanneled"] = true,
["source"] = "Kobyss Necromancer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214625,
},
[1219482] = {
["encounterName"] = "Taah'bat and A'wazj",
["source"] = "A'wazj",
["npcID"] = 237514,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3108,
},
[57984] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greater Fire Elemental",
["npcID"] = 95061,
},
[451605] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_CAST_START",
["npcID"] = 207940,
},
[191946] = {
["encounterName"] = "Warlord Parjesh",
["source"] = "Warlord Parjesh",
["npcID"] = 91784,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1810,
},
[184416] = {
["source"] = "Shimmering Oleander",
["event"] = "SPELL_CAST_START",
["npcID"] = 114216,
},
[1225130] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Velaryn Bloodwrath",
["npcID"] = 237660,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3122,
},
[201672] = {
["encounterName"] = "Shivermaw",
["source"] = "Shivermaw",
["npcID"] = 101951,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1845,
},
[182866] = {
["source"] = "Geir",
["event"] = "SPELL_CAST_START",
["npcID"] = 91948,
},
[179538] = {
["source"] = "Hatecoil Spitespeaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 89025,
},
[192568] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pinerock Hunter",
["npcID"] = 99064,
},
[207815] = {
["encounterName"] = "Patrol Captain Gerdo",
["source"] = "Patrol Captain Gerdo",
["npcID"] = 104215,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1868,
},
[444609] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_CAST_START",
["npcID"] = 207940,
},
[218613] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hertha Grimdottir",
["npcID"] = 103223,
},
[205112] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Felhound Mage Slayer",
["npcID"] = 102372,
},
[187191] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felskorn Zealot",
["npcID"] = 112481,
},
[203381] = {
["encounterName"] = "Blood-Princess Thal'ena",
["source"] = "Blood-Princess Thal'ena",
["npcID"] = 102431,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1855,
},
[465813] = {
["event"] = "SPELL_CAST_START",
["source"] = "Undercrawler",
["npcID"] = 231380,
},
[182734] = {
["source"] = "Lady Sssurine",
["event"] = "SPELL_CAST_START",
["npcID"] = 89199,
},
[187341] = {
["source"] = "Fel Lord Nezmet",
["event"] = "SPELL_CAST_START",
["npcID"] = 241725,
},
[197892] = {
["source"] = "Bonespeaker Mystic",
["event"] = "SPELL_CAST_START",
["npcID"] = 93071,
},
[216276] = {
["event"] = "SPELL_CAST_START",
["source"] = "Huntress Estrid",
["npcID"] = 108822,
},
[225732] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lady Velandras Ravencrest",
["npcID"] = 98538,
},
[203882] = {
["encounterName"] = "Advisor Vandros",
["source"] = "Advisor Vandros",
["npcID"] = 98208,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1829,
},
[1244075] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pactsworn Arcanist",
["npcID"] = 244411,
},
[196296] = {
["encounterName"] = "Serpentrix",
["source"] = "Stormwake Hydra",
["npcID"] = 91792,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1813,
},
[218954] = {
["source"] = "Sekhan",
["event"] = "SPELL_CAST_START",
["npcID"] = 101077,
},
[187342] = {
["source"] = "Runeskeld Rollo",
["event"] = "SPELL_CAST_START",
["npcID"] = 108578,
},
[377034] = {
["encounterName"] = "Crawth",
["npcID"] = 191736,
["encounterID"] = 2564,
},
[453161] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hulking Bloodguard",
["npcID"] = 216338,
},
[205258] = {
["isChanneled"] = true,
["source"] = "Infernal Destroyer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 98011,
},
[196402] = {
["source"] = "Bitestone Slinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 103067,
},
[1239988] = {
["encounterName"] = "Soulbinder Naazindhri",
["source"] = "Unbound Phaseblade",
["npcID"] = 245008,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3130,
},
[186319] = {
["source"] = "Daggerbeak",
["event"] = "SPELL_CAST_START",
["npcID"] = 90057,
},
[211401] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazing Imp",
["npcID"] = 104295,
},
[1216709] = {
["source"] = "The Gobfather",
["event"] = "SPELL_CAST_START",
["npcID"] = 231821,
},
[195346] = {
["isChanneled"] = true,
["source"] = "Blistering Geode",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 99384,
},
[222043] = {
["source"] = "Creature in the Shadows",
["event"] = "SPELL_CAST_START",
["npcID"] = 111370,
},
[205259] = {
["isChanneled"] = true,
["source"] = "Infernal Destroyer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 98011,
},
[220139] = {
["source"] = "Darkshard Crystal",
["event"] = "SPELL_CAST_START",
["npcID"] = 100445,
},
[1244964] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Pactsworn Sandreaver",
["npcID"] = 248084,
},
[201226] = {
["source"] = "Bloodtainted Fury",
["event"] = "SPELL_CAST_START",
["npcID"] = 100531,
},
[182836] = {
["source"] = "Stoneblood Temptress",
["event"] = "SPELL_CAST_START",
["npcID"] = 91598,
},
[183249] = {
["event"] = "SPELL_CAST_START",
["source"] = "Whitewater Typhoon",
["npcID"] = 92152,
},
[225047] = {
["source"] = "Terrace Grove-Tender",
["event"] = "SPELL_CAST_START",
["npcID"] = 112603,
},
[1241367] = {
["source"] = "Lost Legion Doomguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 246553,
},
[197070] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blargrul the Siegebrul",
["npcID"] = 104660,
},
[197582] = {
["source"] = "Siege Worm",
["event"] = "SPELL_CAST_START",
["npcID"] = 99214,
},
[318319] = {
["isChanneled"] = true,
["source"] = "Morbid Ritualist",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 164273,
},
[225404] = {
["source"] = "Trained Shadescale",
["event"] = "SPELL_CAST_START",
["npcID"] = 112804,
},
[1219531] = {
["encounterName"] = "Plexus Sentinel",
["source"] = "Plexus Sentinel",
["npcID"] = 233814,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3129,
},
[223417] = {
["source"] = "Grisly Trapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 112162,
},
[412505] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tyr's Vanguard",
["npcID"] = 205151,
},
[413529] = {
["source"] = "Timestream Anomaly",
["event"] = "SPELL_CAST_START",
["npcID"] = 199749,
},
[1219535] = {
["encounterName"] = "Taah'bat and A'wazj",
["source"] = "A'wazj",
["npcID"] = 237514,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3108,
},
[1219536] = {
["encounterName"] = "Taah'bat and A'wazj",
["source"] = "A'wazj",
["npcID"] = 237514,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3108,
},
[191823] = {
["encounterName"] = "Tirathon Saltheril",
["source"] = "Tirathon Saltheril",
["npcID"] = 95885,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1815,
},
[1244108] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pactsworn Sandreaver",
["npcID"] = 248084,
},
[182739] = {
["event"] = "SPELL_CAST_START",
["source"] = "Savage Felbat",
["npcID"] = 93556,
},
[468813] = {
["encounterName"] = "Geezle Gigazap",
["source"] = "Geezle Gigazap",
["npcID"] = 226404,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3054,
},
[221521] = {
["source"] = "Resolute Courtesan",
["event"] = "SPELL_CAST_START",
["npcID"] = 111166,
},
[212554] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wraithtalon",
["npcID"] = 97504,
},
[221164] = {
["source"] = "Fulminant",
["event"] = "SPELL_CAST_START",
["npcID"] = 111081,
},
[1248209] = {
["encounterName"] = "So'azmi",
["source"] = "So'azmi",
["npcID"] = 175806,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2437,
},
[1241694] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Hulking Bloodguard",
["npcID"] = 216338,
},
[194513] = {
["event"] = "SPELL_CAST_START",
["source"] = "Valkyra Aspirant",
["npcID"] = 92764,
},
[99576] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lava Spawn",
["npcID"] = 53622,
},
[211917] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Eredar Chaosbringer",
["npcID"] = 105706,
},
[1226442] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-King Salhadaar",
["encounterID"] = 3134,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 237763,
},
[1240025] = {
["source"] = "Untethered Rampager",
["event"] = "SPELL_CAST_START",
["npcID"] = 242525,
},
[181450] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tide Behemoth",
["npcID"] = 91113,
},
[448341] = {
["source"] = "Kobold Thwacker",
["event"] = "SPELL_CAST_START",
["npcID"] = 203877,
},
[213620] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fal'dorei Slicer",
["npcID"] = 105623,
},
[219084] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fel Tear",
["npcID"] = 110026,
},
[1227745] = {
["encounterName"] = "Azhiccar",
["source"] = "Azhiccar",
["npcID"] = 234893,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3107,
},
[38663] = {
["source"] = "Valiyaka the Stormbringer",
["event"] = "SPELL_CAST_START",
["npcID"] = 89650,
},
[167385] = {
["source"] = "Crystalmaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 225978,
},
[196562] = {
["encounterName"] = "Ivanyr",
["source"] = "Ivanyr",
["npcID"] = 98203,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1827,
},
[357229] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cartel Muscle",
["npcID"] = 180348,
},
[222156] = {
["source"] = "Felblaze Trickster",
["event"] = "SPELL_CAST_START",
["npcID"] = 111554,
},
[213208] = {
["source"] = "Gurbog da Basher",
["event"] = "SPELL_CAST_START",
["npcID"] = 96590,
},
[1216093] = {
["event"] = "SPELL_CAST_START",
["source"] = "Unreal Observer",
["npcID"] = 230426,
},
[229083] = {
["encounterName"] = "Viz'aduum the Watcher",
["source"] = "Viz'aduum the Watcher",
["encounterID"] = 2017,
["event"] = "SPELL_CAST_START",
["npcID"] = 114790,
},
[1231849] = {
["event"] = "SPELL_CAST_START",
["source"] = "Duelist Xaheen",
["npcID"] = 230985,
},
[424798] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infected Beast",
["npcID"] = 210478,
},
[196563] = {
["encounterName"] = "Warlord Parjesh",
["source"] = "Warlord Parjesh",
["npcID"] = 91784,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1810,
},
[195786] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Keeper Selentia",
["npcID"] = 99524,
},
[319733] = {
["encounterName"] = "Echelon",
["source"] = "Echelon",
["npcID"] = 164185,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2380,
},
[1227759] = {
["source"] = "Ensorcelled Skitterer",
["event"] = "SPELL_CAST_START",
["npcID"] = 236884,
},
[376683] = {
["encounterName"] = "Balakar Khan",
["npcID"] = 186151,
["encounterID"] = 2580,
},
[191527] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blade Dancer Illianna",
["npcID"] = 96657,
},
[195540] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodtotem Skirmisher",
["npcID"] = 96229,
},
[125363] = {
["source"] = "Punchy Lou",
["event"] = "SPELL_CAST_START",
["npcID"] = 113775,
},
[38204] = {
["source"] = "Unbound Seer",
["event"] = "SPELL_CAST_START",
["npcID"] = 33422,
},
[206388] = {
["encounterName"] = "Star Augur Etraeus",
["source"] = "Star Augur Etraeus",
["encounterID"] = 1863,
["event"] = "SPELL_CAST_START",
["npcID"] = 103758,
},
[185843] = {
["source"] = "Athissa",
["event"] = "SPELL_CAST_START",
["npcID"] = 88855,
},
[229698] = {
["source"] = "Rat",
["event"] = "SPELL_CAST_START",
["npcID"] = 115417,
},
[1227768] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glutted Creeper",
["npcID"] = 234282,
},
[227789] = {
["encounterName"] = "Maiden of Virtue",
["source"] = "Maiden of Virtue",
["encounterID"] = 1954,
["event"] = "SPELL_CAST_START",
["npcID"] = 113971,
},
[1231865] = {
["event"] = "SPELL_CAST_START",
["source"] = "Phase Image",
["npcID"] = 245980,
},
[204243] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nightmare Dweller",
["npcID"] = 101991,
},
[188375] = {
["source"] = "Rotbeak",
["event"] = "SPELL_CAST_START",
["npcID"] = 94383,
},
[197077] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blargrul the Siegebrul",
["npcID"] = 104660,
},
[189114] = {
["source"] = "Reanimated Archer",
["event"] = "SPELL_CAST_START",
["npcID"] = 91860,
},
[222671] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felsworn Betrayer",
["npcID"] = 111823,
},
[1231871] = {
["encounterName"] = "Fractillus",
["source"] = "Fractillus",
["npcID"] = 237861,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3133,
},
[207315] = {
["source"] = "Obsidian Deathwarder",
["event"] = "SPELL_CAST_START",
["npcID"] = 125951,
},
[203373] = {
["source"] = "Torturer of the Inquisition",
["event"] = "SPELL_CAST_START",
["npcID"] = 109394,
},
[1227779] = {
["source"] = "Void Creeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 245783,
},
[1231875] = {
["source"] = "Wastelander Wildcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 230624,
},
[443232] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nightfall Lookout",
["npcID"] = 217485,
},
[1227782] = {
["encounterName"] = "Loom'ithar",
["source"] = "Loom'ithar",
["npcID"] = 233815,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3131,
},
[387950] = {
["npcID"] = 187919,
},
[1227784] = {
["encounterName"] = "Loom'ithar",
["source"] = "Loom'ithar",
["npcID"] = 233815,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3131,
},
[373618] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hypnosis Bat",
["npcID"] = 190174,
},
[440162] = {
["source"] = "Fungarian Creepcap",
["event"] = "SPELL_CAST_START",
["npcID"] = 218665,
},
[351096] = {
["encounterName"] = "So'leah",
["source"] = "So'leah",
["encounterID"] = 2442,
["event"] = "SPELL_CAST_START",
["npcID"] = 177269,
},
[442210] = {
["encounterName"] = "Anub'zekt",
["source"] = "Bloodstained Webmage",
["npcID"] = 220599,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2906,
},
[199146] = {
["encounterName"] = "Fenryr",
["source"] = "Gildedfur Stag",
["npcID"] = 96609,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1807,
},
[224246] = {
["encounterName"] = "Star Augur Etraeus",
["source"] = "Celestial Acolyte",
["encounterID"] = 1863,
["event"] = "SPELL_CAST_START",
["npcID"] = 112655,
},
[206514] = {
["encounterName"] = "Gul'dan",
["source"] = "Gul'dan",
["encounterID"] = 1866,
["event"] = "SPELL_CAST_START",
["npcID"] = 104154,
},
[388976] = {
["npcID"] = 196671,
},
[219602] = {
["isChanneled"] = true,
["source"] = "Drugon the Frostblood",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 110378,
},
[208685] = {
["encounterName"] = "Il'gynoth, The Heart of Corruption",
["source"] = "Dominator Tentacle",
["encounterID"] = 1873,
["event"] = "SPELL_CAST_START",
["npcID"] = 105304,
},
[199361] = {
["event"] = "SPELL_CAST_START",
["source"] = "Valarjar Trapper",
["npcID"] = 96934,
},
[241784] = {
["source"] = "Spectral Retainer",
["event"] = "SPELL_CAST_START",
["npcID"] = 114629,
},
[192985] = {
["encounterName"] = "Wrath of Azshara",
["source"] = "Wrath of Azshara",
["npcID"] = 96028,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1814,
},
[227638] = {
["encounterName"] = "Attumen the Huntsman",
["source"] = "Attumen the Huntsman",
["encounterID"] = 1960,
["event"] = "SPELL_CAST_START",
["npcID"] = 114262,
},
[224378] = {
["source"] = "Celestial Acolyte",
["event"] = "SPELL_CAST_START",
["npcID"] = 112655,
},
[191754] = {
["source"] = "Skullhat",
["event"] = "SPELL_CAST_START",
["npcID"] = 95872,
},
[209568] = {
["encounterName"] = "Grand Magistrix Elisande",
["source"] = "Expedient Elemental",
["encounterID"] = 1872,
["event"] = "SPELL_CAST_START",
["npcID"] = 105301,
},
[225809] = {
["source"] = "Nightborne Sage",
["event"] = "SPELL_CAST_START",
["npcID"] = 111303,
},
[220986] = {
["event"] = "SPELL_CAST_START",
["source"] = "Randril",
["npcID"] = 111007,
},
[66954] = {
["source"] = "Mature Deathblossom",
["event"] = "SPELL_CAST_START",
["npcID"] = 114217,
},
[201176] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wyrmtongue Scavenger",
["npcID"] = 98792,
},
[1215521] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Underpin",
["npcID"] = 247390,
},
[224570] = {
["source"] = "Nighthold Protector",
["event"] = "SPELL_CAST_START",
["npcID"] = 112665,
},
[186332] = {
["source"] = "Daggerbeak",
["event"] = "SPELL_CAST_START",
["npcID"] = 90057,
},
[1227809] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Velaryn Bloodwrath",
["npcID"] = 237660,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3122,
},
[227365] = {
["encounterName"] = "Attumen the Huntsman",
["source"] = "Midnight",
["encounterID"] = 1960,
["event"] = "SPELL_CAST_START",
["npcID"] = 114264,
},
[433002] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodstained Assistant",
["npcID"] = 216333,
},
[197413] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ishkaneth",
["npcID"] = 90389,
},
[426860] = {
["encounterName"] = "Anub'ikkaj",
["source"] = "Anub'ikkaj",
["npcID"] = 211089,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2838,
},
[1227814] = {
["source"] = "Malek'ta",
["event"] = "SPELL_CAST_START",
["npcID"] = 245997,
},
[222676] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felsworn Betrayer",
["npcID"] = 111823,
},
[222880] = {
["source"] = "Brimstone Wrathguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 111889,
},
[1240102] = {
["encounterName"] = "Timecap'n Hooktail",
["source"] = "Timecap'n Hooktail",
["encounterID"] = 2419,
["event"] = "SPELL_CAST_START",
["npcID"] = 175546,
},
[225407] = {
["source"] = "Withered Skulker",
["event"] = "SPELL_CAST_START",
["npcID"] = 113128,
},
[367484] = {
["npcID"] = 185508,
},
[168985] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shivan Strifebringer",
["npcID"] = 102898,
},
[179017] = {
["source"] = "Fathom-Commander Zarrin",
["event"] = "SPELL_CAST_START",
["npcID"] = 88090,
},
[213975] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spellwyrm",
["npcID"] = 105884,
},
[221312] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greystone Shardcaster",
["npcID"] = 111184,
},
[196189] = {
["source"] = "Bonebeak Hawk",
["event"] = "SPELL_CAST_START",
["npcID"] = 103592,
},
[195036] = {
["event"] = "SPELL_CAST_START",
["source"] = "Seacursed Soulkeeper",
["npcID"] = 97200,
},
[221800] = {
["source"] = "Matron Hagatha",
["event"] = "SPELL_CAST_START",
["npcID"] = 111329,
},
[219666] = {
["source"] = "Siegemaster Aedrin",
["event"] = "SPELL_CAST_START",
["npcID"] = 110438,
},
[215626] = {
["source"] = "Vision of Deathwing",
["event"] = "SPELL_CAST_START",
["npcID"] = 97056,
},
[369193] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreamweaver",
["npcID"] = 246868,
},
[195344] = {
["source"] = "Drogbar Manathirster",
["event"] = "SPELL_CAST_START",
["npcID"] = 95866,
},
[194228] = {
["source"] = "Agara Deathsong",
["event"] = "SPELL_CAST_START",
["npcID"] = 95195,
},
[217733] = {
["source"] = "Pit Lord",
["event"] = "SPELL_CAST_START",
["npcID"] = 98757,
},
[451435] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voidwraith",
["npcID"] = 224466,
},
[225052] = {
["source"] = "Terrace Grove-Tender",
["event"] = "SPELL_CAST_START",
["npcID"] = 112603,
},
[100094] = {
["event"] = "SPELL_CAST_START",
["source"] = "Harbinger of Flame",
["npcID"] = 53793,
},
[125212] = {
["source"] = "Hugh Mann",
["event"] = "SPELL_CAST_START",
["npcID"] = 113785,
},
[209370] = {
["source"] = "Ancient Boneservant",
["event"] = "SPELL_CAST_START",
["npcID"] = 108940,
},
[345990] = {
["encounterName"] = "Zo'phex the Sentinel",
["source"] = "Zo'phex",
["npcID"] = 175616,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2425,
},
[214489] = {
["event"] = "SPELL_CAST_START",
["source"] = "Imperial Arcbinder",
["npcID"] = 108188,
},
[214177] = {
["source"] = "Inquisitor Tivos",
["event"] = "SPELL_CAST_START",
["npcID"] = 107269,
},
[125802] = {
["source"] = "Li-An Skymirror",
["event"] = "SPELL_CAST_START",
["npcID"] = 113781,
},
[1231937] = {
["event"] = "SPELL_CAST_START",
["source"] = "Korgorath the Ravager",
["npcID"] = 232077,
},
[101223] = {
["encounterName"] = "Alysrazor",
["source"] = "Blazing Talon Initiate",
["npcID"] = 53369,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1206,
},
[186420] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Nameless King",
["npcID"] = 92763,
},
[238622] = {
["isChanneled"] = true,
["source"] = "Fel Bat",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 120991,
},
[43325] = {
["source"] = "Shipwrecked Captive",
["event"] = "SPELL_CAST_START",
["npcID"] = 89112,
},
[428916] = {
["source"] = "Devout Priest",
["event"] = "SPELL_CAST_START",
["npcID"] = 206697,
},
[194317] = {
["source"] = "Fleshrender Roc",
["event"] = "SPELL_CAST_START",
["npcID"] = 94986,
},
[426869] = {
["event"] = "SPELL_CAST_START",
["source"] = "Waterworks Brute",
["npcID"] = 222979,
},
[220121] = {
["source"] = "Adolescent Storm Drake",
["event"] = "SPELL_CAST_START",
["npcID"] = 110667,
},
[100095] = {
["event"] = "SPELL_CAST_START",
["source"] = "Harbinger of Flame",
["npcID"] = 53793,
},
[227999] = {
["source"] = "Ghostly Philanthropist",
["event"] = "SPELL_CAST_START",
["npcID"] = 114542,
},
[215334] = {
["isChanneled"] = true,
["source"] = "Elfbane",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 109188,
},
[427894] = {
["source"] = "Forge Master Damian",
["event"] = "SPELL_CAST_START",
["npcID"] = 212831,
},
[196694] = {
["source"] = "Obsidian Reclaimer",
["event"] = "SPELL_CAST_START",
["npcID"] = 96242,
},
[198623] = {
["source"] = "Fel Trickster",
["event"] = "SPELL_CAST_START",
["npcID"] = 246706,
},
[219610] = {
["isChanneled"] = true,
["source"] = "Drugon the Frostblood",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 110378,
},
[191691] = {
["event"] = "SPELL_CAST_START",
["source"] = "Viletongue Belcher",
["npcID"] = 96480,
},
[1231954] = {
["isChanneled"] = true,
["source"] = "Shadowguard Weavemaster",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 240974,
},
[218774] = {
["encounterName"] = "High Botanist Tel'arn",
["source"] = "Solarist Tel'arn",
["encounterID"] = 1886,
["event"] = "SPELL_CAST_START",
["npcID"] = 109038,
},
[377732] = {
["npcID"] = 184319,
},
[468846] = {
["encounterName"] = "Geezle Gigazap",
["source"] = "Geezle Gigazap",
["npcID"] = 226404,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3054,
},
[441205] = {
["source"] = "K'aresh Cragstalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 234779,
},
[225858] = {
["source"] = "Shal'dorei Naturalist",
["event"] = "SPELL_CAST_START",
["npcID"] = 112678,
},
[195041] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ironbranch",
["npcID"] = 93030,
},
[427897] = {
["source"] = "Forge Master Damian",
["event"] = "SPELL_CAST_START",
["npcID"] = 212831,
},
[220635] = {
["event"] = "SPELL_CAST_START",
["source"] = "Guardian Thor'el",
["npcID"] = 110944,
},
[372615] = {
["npcID"] = 189247,
},
[1244249] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pactsworn Sandreaver",
["npcID"] = 248084,
},
[194604] = {
["source"] = "Tormented Dryad",
["event"] = "SPELL_CAST_START",
["npcID"] = 93155,
},
[206303] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Inquisitor Tormentorum",
["encounterID"] = 1850,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 96015,
},
[230484] = {
["event"] = "SPELL_CAST_START",
["source"] = "Captain Fiora",
["npcID"] = 116223,
},
[357260] = {
["source"] = "Focused Ritualist",
["event"] = "SPELL_CAST_START",
["npcID"] = 180431,
},
[186409] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Nameless King",
["npcID"] = 92763,
},
[189035] = {
["source"] = "Dread-Captain Tattersail",
["event"] = "SPELL_CAST_START",
["npcID"] = 93486,
},
[225243] = {
["source"] = "Magistrix Vilessa",
["event"] = "SPELL_CAST_START",
["npcID"] = 112757,
},
[208068] = {
["isChanneled"] = true,
["source"] = "Nathanos Blightcaller",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 95852,
},
[219339] = {
["event"] = "SPELL_CAST_START",
["source"] = "Myonix",
["npcID"] = 110340,
},
[194019] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greystone Flanker",
["npcID"] = 104615,
},
[194284] = {
["source"] = "Dreadwake Cannoneer",
["event"] = "SPELL_CAST_START",
["npcID"] = 111761,
},
[185350] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tiptog the Lost",
["npcID"] = 93166,
},
[124946] = {
["source"] = "Classic Larry",
["event"] = "SPELL_CAST_START",
["npcID"] = 113784,
},
[191161] = {
["event"] = "SPELL_CAST_START",
["source"] = "God-King Skovald",
["npcID"] = 92307,
},
[191132] = {
["event"] = "SPELL_CAST_START",
["source"] = "God-King Skovald",
["npcID"] = 92307,
},
[201291] = {
["encounterName"] = "Millificent Manastorm",
["source"] = "Elementium Squirrel Bomb",
["npcID"] = 102043,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1847,
},
[201240] = {
["encounterName"] = "Millificent Manastorm",
["source"] = "Millificent Manastorm",
["npcID"] = 101976,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1847,
},
[453496] = {
["isChanneled"] = true,
["source"] = "Nightfall Shadowmage",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 225479,
},
[97282] = {
["encounterName"] = "Lord Rhyolith",
["source"] = "Lord Rhyolith",
["npcID"] = 52558,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1204,
},
[1245311] = {
["encounterName"] = "Glazer",
["source"] = "Glazer",
["npcID"] = 95887,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1817,
},
[1219700] = {
["encounterName"] = "Taah'bat and A'wazj",
["source"] = "A'wazj",
["npcID"] = 237514,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3108,
},
[15655] = {
["source"] = "Royal Dreadguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 93490,
},
[187630] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felskorn Trapper",
["npcID"] = 91244,
},
[215025] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hannval the Butcher",
["npcID"] = 107926,
},
[212586] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stormwing Matriarch",
["npcID"] = 91795,
},
[206306] = {
["event"] = "SPELL_CAST_START",
["source"] = "Uzgarogg the Seer",
["npcID"] = 104244,
},
[470902] = {
["source"] = "Wastelander Duelist",
["event"] = "SPELL_CAST_START",
["npcID"] = 231549,
},
[210597] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ivory Sentinel",
["npcID"] = 92751,
},
[199652] = {
["event"] = "SPELL_CAST_START",
["source"] = "King Haldor",
["npcID"] = 95843,
},
[75528] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ambassador D'vwinn",
["npcID"] = 111649,
},
[470903] = {
["isChanneled"] = true,
["source"] = "Wastelander Duelist",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 231549,
},
[209378] = {
["event"] = "SPELL_CAST_START",
["source"] = "Imacu'tya",
["npcID"] = 104275,
},
[350101] = {
["encounterName"] = "The Grand Menagerie",
["source"] = "Venza Goldfuse",
["npcID"] = 176705,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2441,
},
[3110] = {
["source"] = "Jubloz",
["event"] = "SPELL_CAST_START",
["npcID"] = 416,
},
[442239] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nerubian Threadmancer",
["npcID"] = 219810,
},
[195046] = {
["encounterName"] = "Warlord Parjesh",
["source"] = "Hatecoil Oracle",
["npcID"] = 95861,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1810,
},
[268202] = {
["encounterName"] = "Gorak Tul",
["source"] = "Deathtouched Slaver",
["npcID"] = 135552,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2117,
},
[445311] = {
["source"] = "Shadowcrested Snapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 216963,
},
[198427] = {
["event"] = "SPELL_CAST_START",
["source"] = "Restless Ancestor",
["npcID"] = 93094,
},
[228373] = {
["source"] = "Kvaldir Reefcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 114539,
},
[195577] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Helarjar Guardian",
["npcID"] = 115753,
},
[195576] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Helarjar Guardian",
["npcID"] = 115753,
},
[177928] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dread-Rider Stalker",
["npcID"] = 94338,
},
[226070] = {
["event"] = "SPELL_CAST_START",
["source"] = "Screeching Spiderling",
["npcID"] = 112039,
},
[220129] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vethir",
["npcID"] = 90907,
},
[220641] = {
["event"] = "SPELL_CAST_START",
["source"] = "Guardian Thor'el",
["npcID"] = 110944,
},
[204773] = {
["isChanneled"] = true,
["source"] = "Aspersius",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 101887,
},
[214001] = {
["event"] = "SPELL_CAST_START",
["source"] = "Risen Lancer",
["npcID"] = 102095,
},
[1227918] = {
["encounterName"] = "Taah'bat and A'wazj",
["source"] = "A'wazj",
["npcID"] = 237514,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3108,
},
[219237] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chief Treasurer Jabrill",
["npcID"] = 109677,
},
[186346] = {
["source"] = "Flog the Captain-Eater",
["event"] = "SPELL_CAST_START",
["npcID"] = 89884,
},
[199143] = {
["encounterName"] = "Lord Kur'talos Ravencrest",
["source"] = "Dantalionax",
["npcID"] = 98970,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1835,
},
[203750] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arcane Chronomaton",
["npcID"] = 111622,
},
[205303] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infernal Siegebreaker",
["npcID"] = 107143,
},
},
}
PlaterLanguage = {
["language"] = "enUS",
["version"] = 1,
}
PlaterLogs = {
["_general_logs"] = {
"2025-10-28 00:30:05 | INIT | Plater-v616-Retail | Framework v628 | 11.2.5 | enUS | Wanpan",
"2025-10-27 19:58:37 | INIT | Plater-v616-Retail | Framework v628 | 11.2.5 | enUS | Cretino",
"2025-10-27 17:38:49 | INIT | Plater-v616-Retail | Framework v628 | 11.2.5 | enUS | Wanpan",
"2025-10-27 17:36:54 | INIT | Plater-v616-Retail | Framework v628 | 11.2.5 | enUS | Cretino",
"2025-10-26 23:30:05 | INIT | Plater-v616-Retail | Framework v628 | 11.2.5 | enUS | Wanpan",
"2025-10-26 19:55:36 | INIT | Plater-v616-Retail | Framework v628 | 11.2.5 | enUS | Cretino",
"2025-10-26 19:08:24 | INIT | Plater-v616-Retail | Framework v628 | 11.2.5 | enUS | Wanpan",
"2025-10-26 19:00:46 | INIT | Plater-v616-Retail | Framework v628 | 11.2.5 | enUS | Cretino",
"2025-10-26 14:23:49 | INIT | Plater-v616-Retail | Framework v628 | 11.2.5 | enUS | Wanpan",
"2025-10-26 02:01:20 | INIT | Plater-v616-Retail | Framework v628 | 11.2.5 | enUS | Wanpan",
"2025-10-26 01:34:30 | INIT | Plater-v616-Retail | Framework v628 | 11.2.5 | enUS | Wanpan",
"2025-10-26 01:31:56 | INIT | Plater-v616-Retail | Framework v628 | 11.2.5 | enUS | Cretino",
"2025-10-25 08:46:36 | INIT | Plater-v616-Retail | Framework v628 | 11.2.5 | enUS | Wanpan",
"2025-10-25 01:27:45 | INIT | Plater-v616-Retail | Framework v628 | 11.2.5 | enUS | Wanpan",
"2025-10-25 00:40:39 | INIT | Plater-v616-Retail | Framework v628 | 11.2.5 | enUS | Wanpan",
"2025-10-24 17:28:25 | INIT | Plater-v616-Retail | Framework v628 | 11.2.5 | enUS | Wanpan",
"2025-10-23 21:08:52 | INIT | Plater-v616-Retail | Framework v626 | 11.2.5 | enUS | Wanpan",
"2025-10-23 04:14:55 | INIT | Plater-v616-Retail | Framework v626 | 11.2.5 | enUS | Wanpan",
"2025-10-22 23:48:16 | INIT | Plater-v616-Retail | Framework v626 | 11.2.5 | enUS | Wanpan",
},
["_error_logs"] = {
},
}
PlaterBackup = {
}
